@:realPath("js.lib.Int16Array") @:used @:native("Int16Array")
extern class Int16Array implements js.lib.ArrayBufferView implements ArrayAccess<Int> {

	@:pure
	function new(buffer:ArrayBuffer, byteOffset:Null<Int>, length:Null<Int>):Void;

	@:pure
	function new(length:Int):Void;

	@:pure
	function new(object:{ }):Void;

	@:realPath("BYTES_PER_ELEMENT_") @:native("BYTES_PER_ELEMENT")
	var BYTES_PER_ELEMENT(default,ctor):Int;

	var buffer(default,ctor):ArrayBuffer;

	var byteLength(default,ctor):Int;

	var byteOffset(default,ctor):Int;

	var length(default,ctor):Int;

	function copyWithin(target:Int, start:Int, end:Null<Int>):Int16Array;

	@:pure
	function entries():js.lib.Iterator<js.lib.KeyValue<Int, Int>>;

	function every(callback:(currentValue : Int, index : Int, array : Int16Array) -> Bool, thisArg:Null<Any>):Bool;

	function every(callback:(currentValue : Int) -> Bool, thisArg:Null<Any>):Bool;

	function every(callback:(currentValue : Int, index : Int) -> Bool, thisArg:Null<Any>):Bool;

	function fill(value:Int, start:Null<Int>, end:Null<Int>):Int16Array;

	function filter(callback:(element : Int, index : Int, array : Int16Array) -> Bool, thisArg:Null<Any>):Int16Array;

	function filter(callback:(element : Int) -> Bool, thisArg:Null<Any>):Int16Array;

	function filter(callback:(element : Int, index : Int) -> Bool, thisArg:Null<Any>):Int16Array;

	function find(callback:(element : Int, index : Int, array : Int16Array) -> Bool, thisArg:Null<Any>):Null<Int>;

	function find(callback:(element : Int) -> Bool, thisArg:Null<Any>):Null<Int>;

	function find(callback:(element : Int, index : Int) -> Bool, thisArg:Null<Any>):Null<Int>;

	function findIndex(callback:(element : Int, index : Int, array : Int16Array) -> Bool, thisArg:Null<Any>):Int;

	function findIndex(callback:(element : Int) -> Bool, thisArg:Null<Any>):Int;

	function findIndex(callback:(element : Int, index : Int) -> Bool, thisArg:Null<Any>):Int;

	function forEach(callback:(element : Int, index : Int, array : Int16Array) -> Void, thisArg:Null<Any>):Void;

	function forEach(callback:(element : Int) -> Void, thisArg:Null<Any>):Void;

	function forEach(callback:(element : Int, index : Int) -> Void, thisArg:Null<Any>):Void;

	@:pure
	function includes(searchElement:Int, fromIndex:Null<Int>):Bool;

	@:pure
	function indexOf(searchElement:Int, fromIndex:Null<Int>):Int;

	@:pure
	function join(separator:Null<String>):String;

	@:pure
	function keys():js.lib.Iterator<Int>;

	@:pure
	function lastIndexOf(searchElement:Int, fromIndex:Null<Int>):Int;

	function map(callback:(element : Int, index : Int, array : Int16Array) -> Int, thisArg:Null<Any>):Int16Array;

	function map(callback:(element : Int) -> Int, thisArg:Null<Any>):Int16Array;

	function map(callback:(element : Int, index : Int) -> Int, thisArg:Null<Any>):Int16Array;

	function reduce<T : reduce.T>(callback:(previousValue : reduce.T, currentValue : Int, index : Int, array : Int16Array) -> reduce.T, initialValue:reduce.T):reduce.T;

	function reduce<T : reduce.T>(callback:(previousValue : reduce.T, currentValue : Int) -> reduce.T, initialValue:reduce.T):reduce.T;

	function reduce<T : reduce.T>(callback:(previousValue : reduce.T, currentValue : Int, index : Int) -> reduce.T, initialValue:reduce.T):reduce.T;

	function reduce(callbackfn:(previousValue : Int, currentValue : Int) -> Int):Int;

	function reduce(callbackfn:(previousValue : Int, currentValue : Int, index : Int) -> Int):Int;

	function reduce(callbackfn:(previousValue : Int, currentValue : Int, index : Int, array : Int16Array) -> Int):Int;

	function reduceRight<T : reduceRight.T>(callback:(previousValue : reduceRight.T, currentValue : Int, index : Int, array : Int16Array) -> reduceRight.T, initialValue:reduceRight.T):reduceRight.T;

	function reduceRight<T : reduceRight.T>(callback:(previousValue : reduceRight.T, currentValue : Int) -> reduceRight.T, initialValue:reduceRight.T):reduceRight.T;

	function reduceRight<T : reduceRight.T>(callback:(previousValue : reduceRight.T, currentValue : Int, index : Int) -> reduceRight.T, initialValue:reduceRight.T):reduceRight.T;

	function reduceRight(callbackfn:(previousValue : Int, currentValue : Int) -> Int):Int;

	function reduceRight(callbackfn:(previousValue : Int, currentValue : Int, index : Int) -> Int):Int;

	function reduceRight(callbackfn:(previousValue : Int, currentValue : Int, index : Int, array : Int16Array) -> Int):Int;

	function reverse():Int16Array;

	function set(array:Array<Int>, offset:Null<Int>):Void;

	function set(array:Int8Array, offset:Null<Int>):Void;

	function set(array:Uint8Array, offset:Null<Int>):Void;

	function set(array:Uint8ClampedArray, offset:Null<Int>):Void;

	function set(array:Int16Array, offset:Null<Int>):Void;

	function set(array:Uint16Array, offset:Null<Int>):Void;

	function set(array:Int32Array, offset:Null<Int>):Void;

	function set(array:Uint32Array, offset:Null<Int>):Void;

	function set(array:Float32Array, offset:Null<Int>):Void;

	function set(array:Float64Array, offset:Null<Int>):Void;

	@:pure
	function slice(start:Null<Int>, end:Null<Int>):Int16Array;

	function some(callback:(element : Int, index : Int, array : Int16Array) -> Bool, thisArg:Null<Any>):Bool;

	function some(callback:(element : Int) -> Bool, thisArg:Null<Any>):Bool;

	function some(callback:(element : Int, index : Int) -> Bool, thisArg:Null<Any>):Bool;

	function sort(compareFn:Null<(x : Int, y : Int) -> Int>):Int16Array;

	@:pure
	function subarray(begin:Null<Int>, end:Null<Int>):Int16Array;

	@:pure
	function values():js.lib.Iterator<Int>;

	@:pure
	function toLocaleString(locales:Null<String>, options:Null<js.lib.intl.NumberFormatOptions>):String;

	@:pure
	function toString():String;

	static var BYTES_PER_ELEMENT(default,never):Int;

	@:pure
	static function from(source:{ }, mapFn:Null<(value : Int, index : Int) -> Int>, thisArg:Null<Any>):Int16Array;

	@:pure
	static function from(source:{ }, mapFn:Null<(value : Int) -> Int>, thisArg:Null<Any>):Int16Array;

	@:pure
	static function of(elements:haxe.extern.Rest<Dynamic>):Int16Array;
}
@:realPath("js.html.Document") @:used @:native("Document")
extern class Document extends Node {

	function new():Void;

	var implementation(default,null):DOMImplementation;

	var URL(default,null):String;

	var documentURI(default,null):String;

	var compatMode(default,null):String;

	var characterSet(default,null):String;

	var charset(default,null):String;

	var inputEncoding(default,null):String;

	var contentType(default,null):String;

	var doctype(default,null):DocumentType;

	var documentElement(default,null):HTMLElement;

	var location(default,null):Location;

	var referrer(default,null):String;

	var lastModified(default,null):String;

	var readyState(default,null):String;

	var title:String;

	var dir:String;

	var body:HTMLElement;

	var head(default,null):HTMLHeadElement;

	var images(default,null):HTMLCollection;

	var embeds(default,null):HTMLCollection;

	var plugins(default,null):HTMLCollection;

	var links(default,null):HTMLCollection;

	var forms(default,null):HTMLCollection;

	var scripts(default,null):HTMLCollection;

	var defaultView(default,null):Window;

	var onreadystatechange:haxe.Function;

	var onbeforescriptexecute:haxe.Function;

	var onafterscriptexecute:haxe.Function;

	var onselectionchange:haxe.Function;

	var currentScript(default,null):HTMLElement;

	var anchors(default,null):HTMLCollection;

	var applets(default,null):HTMLCollection;

	var fullscreen(default,null):Bool;

	var fullscreenEnabled(default,null):Bool;

	var onfullscreenchange:haxe.Function;

	var onfullscreenerror:haxe.Function;

	var onpointerlockchange:haxe.Function;

	var onpointerlockerror:haxe.Function;

	var hidden(default,null):Bool;

	var visibilityState(default,null):js.html.VisibilityState;

	var onvisibilitychange:haxe.Function;

	var selectedStyleSheetSet:String;

	var lastStyleSheetSet(default,null):String;

	var preferredStyleSheetSet(default,null):String;

	var styleSheetSets(default,null):DOMStringList;

	var scrollingElement(default,null):HTMLElement;

	var timeline(default,null):DocumentTimeline;

	var rootElement(default,null):SVGSVGElement;

	var oncopy:haxe.Function;

	var oncut:haxe.Function;

	var onpaste:haxe.Function;

	var activeElement(default,null):HTMLElement;

	var styleSheets(default,null):StyleSheetList;

	var pointerLockElement(default,null):HTMLElement;

	var fullscreenElement(default,null):HTMLElement;

	var fonts(default,null):FontFaceSet;

	var onabort:haxe.Function;

	var onblur:haxe.Function;

	var onfocus:haxe.Function;

	var onauxclick:haxe.Function;

	var oncanplay:haxe.Function;

	var oncanplaythrough:haxe.Function;

	var onchange:haxe.Function;

	var onclick:haxe.Function;

	var onclose:haxe.Function;

	var oncontextmenu:haxe.Function;

	var ondblclick:haxe.Function;

	var ondrag:haxe.Function;

	var ondragend:haxe.Function;

	var ondragenter:haxe.Function;

	var ondragexit:haxe.Function;

	var ondragleave:haxe.Function;

	var ondragover:haxe.Function;

	var ondragstart:haxe.Function;

	var ondrop:haxe.Function;

	var ondurationchange:haxe.Function;

	var onemptied:haxe.Function;

	var onended:haxe.Function;

	var oninput:haxe.Function;

	var oninvalid:haxe.Function;

	var onkeydown:haxe.Function;

	var onkeypress:haxe.Function;

	var onkeyup:haxe.Function;

	var onload:haxe.Function;

	var onloadeddata:haxe.Function;

	var onloadedmetadata:haxe.Function;

	var onloadend:haxe.Function;

	var onloadstart:haxe.Function;

	var onmousedown:haxe.Function;

	var onmouseenter:haxe.Function;

	var onmouseleave:haxe.Function;

	var onmousemove:haxe.Function;

	var onmouseout:haxe.Function;

	var onmouseover:haxe.Function;

	var onmouseup:haxe.Function;

	var onwheel:haxe.Function;

	var onpause:haxe.Function;

	var onplay:haxe.Function;

	var onplaying:haxe.Function;

	var onprogress:haxe.Function;

	var onratechange:haxe.Function;

	var onreset:haxe.Function;

	var onresize:haxe.Function;

	var onscroll:haxe.Function;

	var onseeked:haxe.Function;

	var onseeking:haxe.Function;

	var onselect:haxe.Function;

	var onshow:haxe.Function;

	var onstalled:haxe.Function;

	var onsubmit:haxe.Function;

	var onsuspend:haxe.Function;

	var ontimeupdate:haxe.Function;

	var onvolumechange:haxe.Function;

	var onwaiting:haxe.Function;

	var onselectstart:haxe.Function;

	var ontoggle:haxe.Function;

	var onpointercancel:haxe.Function;

	var onpointerdown:haxe.Function;

	var onpointerup:haxe.Function;

	var onpointermove:haxe.Function;

	var onpointerout:haxe.Function;

	var onpointerover:haxe.Function;

	var onpointerenter:haxe.Function;

	var onpointerleave:haxe.Function;

	var ongotpointercapture:haxe.Function;

	var onlostpointercapture:haxe.Function;

	var onanimationcancel:haxe.Function;

	var onanimationend:haxe.Function;

	var onanimationiteration:haxe.Function;

	var onanimationstart:haxe.Function;

	var ontransitioncancel:haxe.Function;

	var ontransitionend:haxe.Function;

	var ontransitionrun:haxe.Function;

	var ontransitionstart:haxe.Function;

	var onwebkitanimationend:haxe.Function;

	var onwebkitanimationiteration:haxe.Function;

	var onwebkitanimationstart:haxe.Function;

	var onwebkittransitionend:haxe.Function;

	var onerror:haxe.Function;

	var children(default,null):HTMLCollection;

	var firstElementChild(default,null):HTMLElement;

	var lastElementChild(default,null):HTMLElement;

	var childElementCount(default,null):Int;

	var ontouchstart:haxe.Function;

	var ontouchend:haxe.Function;

	var ontouchmove:haxe.Function;

	var ontouchcancel:haxe.Function;

	@:pure
	function getElementsByTagName(localName:String):HTMLCollection;

	@:pure
	function getElementsByTagNameNS(namespace:String, localName:String):HTMLCollection;

	@:pure
	function getElementsByClassName(classNames:String):HTMLCollection;

	@:pure
	function getElementById(elementId:String):HTMLElement;

	function createElement(localName:String, options:Null<js.html.ElementCreationOptions>):HTMLElement;

	function createElement(localName:String, options:Null<String>):HTMLElement;

	function createElementNS(namespace:String, qualifiedName:String, options:Null<js.html.ElementCreationOptions>):HTMLElement;

	function createElementNS(namespace:String, qualifiedName:String, options:Null<String>):HTMLElement;

	function createDocumentFragment():DocumentFragment;

	function createTextNode(data:String):Text;

	function createComment(data:String):Comment;

	function createProcessingInstruction(target:String, data:String):ProcessingInstruction;

	@:value({ deep : false })
	function importNode(node:Node, deep:Bool):Node;

	function adoptNode(node:Node):Node;

	function createEvent(interface_:String):Event;

	function createRange():Range;

	@:value({ whatToShow : cast 4294967295 })
	function createNodeIterator(root:Node, whatToShow:Int, filter:Null<Node -> Int>):NodeIterator;

	@:value({ whatToShow : cast 4294967295 })
	function createNodeIterator(root:Node, whatToShow:Int, filter:Null<haxe.Function>):NodeIterator;

	@:value({ whatToShow : cast 4294967295 })
	function createNodeIterator(root:Node, whatToShow:Int, filter:Null<NodeFilter>):NodeIterator;

	@:value({ whatToShow : cast 4294967295 })
	function createTreeWalker(root:Node, whatToShow:Int, filter:Null<Node -> Int>):TreeWalker;

	@:value({ whatToShow : cast 4294967295 })
	function createTreeWalker(root:Node, whatToShow:Int, filter:Null<haxe.Function>):TreeWalker;

	@:value({ whatToShow : cast 4294967295 })
	function createTreeWalker(root:Node, whatToShow:Int, filter:Null<NodeFilter>):TreeWalker;

	function createCDATASection(data:String):CDATASection;

	function createAttribute(name:String):Attr;

	function createAttributeNS(namespace:String, name:String):Attr;

	@:pure
	function getElementsByName(elementName:String):NodeList;

	function hasFocus():Bool;

	function releaseCapture():Void;

	function exitFullscreen():Void;

	function exitPointerLock():Void;

	function enableStyleSheetsForSet(name:String):Void;

	function caretPositionFromPoint(x:Float, y:Float):CaretPosition;

	@:pure
	function querySelector(selectors:String):HTMLElement;

	@:pure
	function querySelectorAll(selectors:String):NodeList;

	function getAnimations():Array<Animation>;

	@:value({ force : 0.0, rotationAngle : 0.0, radiusY : 0, radiusX : 0, clientY : 0, clientX : 0, screenY : 0, screenX : 0, pageY : 0, pageX : 0, identifier : 0 })
	function createTouch(view:Null<Window>, target:Null<EventTarget>, identifier:Int, pageX:Int, pageY:Int, screenX:Int, screenY:Int, clientX:Int, clientY:Int, radiusX:Int, radiusY:Int, rotationAngle:Float, force:Float):Touch;

	function createTouchList(touches:Array<Touch>):TouchList;

	function createTouchList(touch:Touch, touches:haxe.extern.Rest<Touch>):TouchList;

	function createTouchList():TouchList;

	function getSelection():Selection;

	function elementFromPoint(x:Float, y:Float):HTMLElement;

	function elementsFromPoint(x:Float, y:Float):Array<HTMLElement>;

	function convertQuadFromNode(quad:DOMQuad, from:Text, options:Null<js.html.ConvertCoordinateOptions>):DOMQuad;

	function convertQuadFromNode(quad:DOMQuad, from:HTMLElement, options:Null<js.html.ConvertCoordinateOptions>):DOMQuad;

	function convertQuadFromNode(quad:DOMQuad, from:HTMLDocument, options:Null<js.html.ConvertCoordinateOptions>):DOMQuad;

	function convertRectFromNode(rect:DOMRectReadOnly, from:Text, options:Null<js.html.ConvertCoordinateOptions>):DOMQuad;

	function convertRectFromNode(rect:DOMRectReadOnly, from:HTMLElement, options:Null<js.html.ConvertCoordinateOptions>):DOMQuad;

	function convertRectFromNode(rect:DOMRectReadOnly, from:HTMLDocument, options:Null<js.html.ConvertCoordinateOptions>):DOMQuad;

	function convertPointFromNode(point:js.html.DOMPointInit, from:Text, options:Null<js.html.ConvertCoordinateOptions>):DOMPoint;

	function convertPointFromNode(point:js.html.DOMPointInit, from:HTMLElement, options:Null<js.html.ConvertCoordinateOptions>):DOMPoint;

	function convertPointFromNode(point:js.html.DOMPointInit, from:HTMLDocument, options:Null<js.html.ConvertCoordinateOptions>):DOMPoint;

	function prepend(nodes:haxe.extern.Rest<Node>):Void;

	function prepend(nodes:haxe.extern.Rest<String>):Void;

	function append(nodes:haxe.extern.Rest<Node>):Void;

	function append(nodes:haxe.extern.Rest<String>):Void;

	function createExpression(expression:String, resolver:Null<String -> Null<String>>):XPathExpression;

	function createExpression(expression:String, resolver:Null<haxe.Function>):XPathExpression;

	function createExpression(expression:String, resolver:Null<js.html.XPathNSResolver>):XPathExpression;

	@:pure
	function createNSResolver(nodeResolver:Node):Node;

	@:value({ type : 0 })
	function evaluate(expression:String, contextNode:Node, resolver:Null<String -> Null<String>>, type:Int, result:Null<Dynamic>):XPathResult;

	@:value({ type : 0 })
	function evaluate(expression:String, contextNode:Node, resolver:Null<haxe.Function>, type:Int, result:Null<Dynamic>):XPathResult;

	@:value({ type : 0 })
	function evaluate(expression:String, contextNode:Node, resolver:Null<js.html.XPathNSResolver>, type:Int, result:Null<Dynamic>):XPathResult;
}
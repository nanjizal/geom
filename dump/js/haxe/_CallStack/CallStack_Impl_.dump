@:keep @:directlyUsed @:used @:using(haxe.CallStack) @:allow(haxe.Exception)
private class haxe._CallStack.CallStack_Impl_ {

	public static function callStack() {
		return haxe.NativeStackTrace.toHaxe(haxe.NativeStackTrace.callStack());
	}

	public static function exceptionStack() {
		var eStack = haxe.NativeStackTrace.toHaxe(haxe.NativeStackTrace.exceptionStack());
		return cast haxe._CallStack.CallStack_Impl_.subtract(eStack, haxe._CallStack.CallStack_Impl_.callStack());
	}

	public static function toString(stack:haxe.CallStack) {
		var b = new StringBuf();
		{
			var _g = 0;
			var _g1 = cast stack;
			while ((_g < _g1.length)) {
				var s = _g1[_g];
				++ _g;
				b.add("\nCalled from ");
				haxe._CallStack.CallStack_Impl_.itemToString(b, s);
			};
		};
		return b.toString();
	}

	@:impl
	public static function subtract(this1:Array<haxe.StackItem>, stack:haxe.CallStack) {
		var startIndex = -1;
		var i = -1;
		while ((++ i < this1.length)) {
			{
				var _g = 0;
				var _g1 = cast stack.length;
				while ((_g < _g1)) {
					var j = _g ++;
					if ((haxe._CallStack.CallStack_Impl_.equalItems(this1[i], cast stack[j]))) {
						if ((startIndex < 0)) startIndex = i;
						++ i;
						if ((i >= this1.length)) break;
					} else startIndex = -1;
				};
			};
			if ((startIndex >= 0)) break;
		};
		if ((startIndex >= 0)) return this1.slice(0, startIndex) else return this1;
	}

	static function equalItems(item1:Null<haxe.StackItem>, item2:Null<haxe.StackItem>) {
		if ((item1 == null)) {
			if ((item2 == null)) return true else return false;
		} else switch ((@:exhaustive enumIndex item1)) {
			case 0: if ((item2 == null)) return false else if ((enumIndex item2 == 0)) return true else return false;
			case 1: if ((item2 == null)) return false else if ((enumIndex item2 == 1)) {
				var m1 = item1[0];
				var m2 = item2[0];
				return m1 == m2;
			} else return false;
			case 2: if ((item2 == null)) return false else if ((enumIndex item2 == 2)) {
				var item11 = item1[0];
				var file1 = item1[1];
				var line1 = item1[2];
				var col1 = item1[3];
				var col2 = item2[3];
				var line2 = item2[2];
				var file2 = item2[1];
				var item21 = item2[0];
				if ((file1 == file2 && line1 == line2 && col1 == col2)) return haxe._CallStack.CallStack_Impl_.equalItems(item11, item21) else return false;
			} else return false;
			case 3: if ((item2 == null)) return false else if ((enumIndex item2 == 3)) {
				var class1 = item1[0];
				var method1 = item1[1];
				var method2 = item2[1];
				var class2 = item2[0];
				if ((class1 == class2)) return method1 == method2 else return false;
			} else return false;
			case 4: if ((item2 == null)) return false else if ((enumIndex item2 == 4)) {
				var v1 = item1[0];
				var v2 = item2[0];
				return v1 == v2;
			} else return false;
		};
	}

	static function itemToString(b:StringBuf, s:haxe.StackItem) {
		switch ((@:exhaustive enumIndex s)) {
			case 0: b.add("a C function");
			case 1: {
				var m = s[0];
				{
					b.add("module ");
					b.add(m);
				};
			};
			case 2: {
				var col = s[3];
				var line = s[2];
				var file = s[1];
				var s1 = s[0];
				{
					if ((s1 != null)) {
						haxe._CallStack.CallStack_Impl_.itemToString(b, s1);
						b.add(" (");
					};
					b.add(file);
					b.add(" line ");
					b.add(line);
					if ((col != null)) {
						b.add(" column ");
						b.add(col);
					};
					if ((s1 != null)) b.add(")");
				};
			};
			case 3: {
				var meth = s[1];
				var cname = s[0];
				{
					b.add(if ((cname == null)) "<unknown>" else cname);
					b.add(".");
					b.add(meth);
				};
			};
			case 4: {
				var n = s[0];
				{
					b.add("local function #");
					b.add(n);
				};
			};
		};
	}
}
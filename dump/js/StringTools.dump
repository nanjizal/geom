@:keep @:directlyUsed @:used
class StringTools {

	public static function htmlEscape(s:String, quotes:Null<Bool> = null) {
		var buf = new StringBuf();
		{
			var code = new haxe.iterators.StringIteratorUnicode(s);
			while ((code.hasNext())) {
				var code1 = code.next();
				switch ((code1)) {
					case 34: if ((quotes)) buf.add("&quot;") else buf.addChar(code1);
					case 38: buf.add("&amp;");
					case 39: if ((quotes)) buf.add("&#039;") else buf.addChar(code1);
					case 60: buf.add("&lt;");
					case 62: buf.add("&gt;");
					default: buf.addChar(code1)
				};
			};
		};
		return buf.toString();
	}

	public static function startsWith(s:String, start:String) {
		if ((s.length >= start.length)) return s.lastIndexOf(start, 0) == 0 else return false;
	}

	public static function isSpace(s:String, pos:Int) {
		var c = @:pure HxOverrides.cca(s, pos);
		if ((! (c > 8 && c < 14))) return c == 32 else return true;
	}

	public static function ltrim(s:String) {
		var l = s.length;
		var r = 0;
		while ((r < l && StringTools.isSpace(s, r))) ++ r;
		if ((r > 0)) return @:pure HxOverrides.substr(s, r, l - r) else return s;
	}

	public static function rtrim(s:String) {
		var l = s.length;
		var r = 0;
		while ((r < l && StringTools.isSpace(s, l - r - 1))) ++ r;
		if ((r > 0)) return @:pure HxOverrides.substr(s, 0, l - r) else return s;
	}

	public static function trim(s:String) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}

	public static function replace(s:String, sub:String, by:String) {
		return s.split(sub).join(by);
	}

	public static function fastCodeAt(s:String, index:Int) {
		return cast s.charCodeAt(index);
	}

	static function utf16CodePointAt(s:String, index:Int) {
		var c = StringTools.fastCodeAt(s, index);
		if ((c >= 55296 && c <= 56319)) c = c - 55232 << 10 | StringTools.fastCodeAt(s, index + 1) & 1023;
		return c;
	}
}
@:used
extern interface js.html.ConsoleInstance {

	@:value({ condition : false })
	function assert(condition:Bool, data:haxe.extern.Rest<Dynamic>):Void;

	function clear():Void;

	@:value({ label : "default" })
	function count(label:String):Void;

	@:value({ label : "default" })
	function countReset(label:String):Void;

	function debug(data:haxe.extern.Rest<Dynamic>):Void;

	function error(data:haxe.extern.Rest<Dynamic>):Void;

	function info(data:haxe.extern.Rest<Dynamic>):Void;

	function log(data:haxe.extern.Rest<Dynamic>):Void;

	function table(data:haxe.extern.Rest<Dynamic>):Void;

	function trace(data:haxe.extern.Rest<Dynamic>):Void;

	function warn(data:haxe.extern.Rest<Dynamic>):Void;

	function dir(data:haxe.extern.Rest<Dynamic>):Void;

	function dirxml(data:haxe.extern.Rest<Dynamic>):Void;

	function group(data:haxe.extern.Rest<Dynamic>):Void;

	function groupCollapsed(data:haxe.extern.Rest<Dynamic>):Void;

	function groupEnd():Void;

	@:value({ label : "default" })
	function time(label:String):Void;

	@:value({ label : "default" })
	function timeLog(label:String, data:haxe.extern.Rest<Dynamic>):Void;

	@:value({ label : "default" })
	function timeEnd(label:String):Void;

	function exception(data:haxe.extern.Rest<Dynamic>):Void;

	function timeStamp(data:Null<Dynamic>):Void;

	function profile(data:haxe.extern.Rest<Dynamic>):Void;

	function profileEnd(data:haxe.extern.Rest<Dynamic>):Void;
}
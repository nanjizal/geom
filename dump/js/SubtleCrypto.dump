@:realPath("js.html.SubtleCrypto") @:native("SubtleCrypto")
extern class SubtleCrypto {

	function encrypt(algorithm:haxe.extern.EitherType<Dynamic, String>, key:CryptoKey, data:haxe.extern.EitherType<js.lib.ArrayBufferView, ArrayBuffer>):Promise<Dynamic>;

	function decrypt(algorithm:haxe.extern.EitherType<Dynamic, String>, key:CryptoKey, data:haxe.extern.EitherType<js.lib.ArrayBufferView, ArrayBuffer>):Promise<Dynamic>;

	function sign(algorithm:haxe.extern.EitherType<Dynamic, String>, key:CryptoKey, data:haxe.extern.EitherType<js.lib.ArrayBufferView, ArrayBuffer>):Promise<Dynamic>;

	function verify(algorithm:haxe.extern.EitherType<Dynamic, String>, key:CryptoKey, signature:haxe.extern.EitherType<js.lib.ArrayBufferView, ArrayBuffer>, data:haxe.extern.EitherType<js.lib.ArrayBufferView, ArrayBuffer>):Promise<Dynamic>;

	function digest(algorithm:haxe.extern.EitherType<Dynamic, String>, data:haxe.extern.EitherType<js.lib.ArrayBufferView, ArrayBuffer>):Promise<Dynamic>;

	function generateKey(algorithm:Dynamic, extractable:Bool, keyUsages:Array<String>):Promise<Dynamic>;

	function generateKey(algorithm:String, extractable:Bool, keyUsages:Array<String>):Promise<Dynamic>;

	function deriveKey(algorithm:haxe.extern.EitherType<Dynamic, String>, baseKey:CryptoKey, derivedKeyType:haxe.extern.EitherType<Dynamic, String>, extractable:Bool, keyUsages:Array<String>):Promise<Dynamic>;

	function deriveBits(algorithm:Dynamic, baseKey:CryptoKey, length:Int):Promise<Dynamic>;

	function deriveBits(algorithm:String, baseKey:CryptoKey, length:Int):Promise<Dynamic>;

	function importKey(format:String, keyData:Dynamic, algorithm:Dynamic, extractable:Bool, keyUsages:Array<String>):Promise<Dynamic>;

	function importKey(format:String, keyData:Dynamic, algorithm:String, extractable:Bool, keyUsages:Array<String>):Promise<Dynamic>;

	function exportKey(format:String, key:CryptoKey):Promise<Dynamic>;

	function wrapKey(format:String, key:CryptoKey, wrappingKey:CryptoKey, wrapAlgorithm:Dynamic):Promise<Dynamic>;

	function wrapKey(format:String, key:CryptoKey, wrappingKey:CryptoKey, wrapAlgorithm:String):Promise<Dynamic>;

	function unwrapKey(format:String, wrappedKey:haxe.extern.EitherType<js.lib.ArrayBufferView, ArrayBuffer>, unwrappingKey:CryptoKey, unwrapAlgorithm:haxe.extern.EitherType<Dynamic, String>, unwrappedKeyAlgorithm:haxe.extern.EitherType<Dynamic, String>, extractable:Bool, keyUsages:Array<String>):Promise<Dynamic>;
}
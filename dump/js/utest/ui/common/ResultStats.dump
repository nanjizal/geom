@:directlyUsed @:used
class utest.ui.common.ResultStats {

	public function new() {
		this.assertations = 0;
		this.successes = 0;
		this.failures = 0;
		this.errors = 0;
		this.warnings = 0;
		this.ignores = 0;
		this.isOk = true;
		this.hasFailures = false;
		this.hasErrors = false;
		this.hasWarnings = false;
		this.hasIgnores = false;
		this.onAddSuccesses = new utest.Dispatcher();
		this.onAddFailures = new utest.Dispatcher();
		this.onAddErrors = new utest.Dispatcher();
		this.onAddWarnings = new utest.Dispatcher();
		this.onAddIgnores = new utest.Dispatcher();
	}

	public var assertations(default,null):Int;

	public var successes(default,null):Int;

	public var failures(default,null):Int;

	public var errors(default,null):Int;

	public var warnings(default,null):Int;

	public var ignores(default,null):Int;

	public var onAddSuccesses(default,null):utest.Dispatcher<Int>;

	public var onAddFailures(default,null):utest.Dispatcher<Int>;

	public var onAddErrors(default,null):utest.Dispatcher<Int>;

	public var onAddWarnings(default,null):utest.Dispatcher<Int>;

	public var onAddIgnores(default,null):utest.Dispatcher<Int>;

	public var isOk(default,null):Bool;

	public var hasFailures(default,null):Bool;

	public var hasErrors(default,null):Bool;

	public var hasWarnings(default,null):Bool;

	public var hasIgnores(default,null):Bool;

	public function addSuccesses(v:Int) {
		if ((v == 0)) return;
		this.assertations += v;
		this.successes += v;
		this.onAddSuccesses.dispatch(v);
	}

	public function addFailures(v:Int) {
		if ((v == 0)) return;
		this.assertations += v;
		this.failures += v;
		this.hasFailures = this.failures > 0;
		this.isOk = ! (this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddFailures.dispatch(v);
	}

	public function addErrors(v:Int) {
		if ((v == 0)) return;
		this.assertations += v;
		this.errors += v;
		this.hasErrors = this.errors > 0;
		this.isOk = ! (this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddErrors.dispatch(v);
	}

	public function addIgnores(v:Int) {
		if ((v == 0)) return;
		this.assertations += v;
		this.ignores += v;
		this.hasIgnores = this.ignores > 0;
		this.onAddIgnores.dispatch(v);
	}

	public function addWarnings(v:Int) {
		if ((v == 0)) return;
		this.assertations += v;
		this.warnings += v;
		this.hasWarnings = this.warnings > 0;
		this.isOk = ! (this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddWarnings.dispatch(v);
	}

	public function sum(other:utest.ui.common.ResultStats) {
		this.addSuccesses(other.successes);
		this.addFailures(other.failures);
		this.addErrors(other.errors);
		this.addWarnings(other.warnings);
		this.addIgnores(other.ignores);
	}

	public function subtract(other:utest.ui.common.ResultStats) {
		this.addSuccesses(- other.successes);
		this.addFailures(- other.failures);
		this.addErrors(- other.errors);
		this.addWarnings(- other.warnings);
		this.addIgnores(- other.ignores);
	}

	public function wire(dependant:utest.ui.common.ResultStats) {
		dependant.onAddSuccesses.add(this.addSuccesses);
		dependant.onAddFailures.add(this.addFailures);
		dependant.onAddErrors.add(this.addErrors);
		dependant.onAddWarnings.add(this.addWarnings);
		dependant.onAddIgnores.add(this.addIgnores);
		this.sum(dependant);
	}

	public function unwire(dependant:utest.ui.common.ResultStats) {
		dependant.onAddSuccesses.remove(this.addSuccesses);
		dependant.onAddFailures.remove(this.addFailures);
		dependant.onAddErrors.remove(this.addErrors);
		dependant.onAddWarnings.remove(this.addWarnings);
		dependant.onAddIgnores.remove(this.addIgnores);
		this.subtract(dependant);
	}
}
@:realPath("js.html.InputElement") @:native("HTMLInputElement")
extern class HTMLInputElement extends HTMLElement {

	var accept:String;

	var alt:String;

	var autocomplete:String;

	var autofocus:Bool;

	var defaultChecked:Bool;

	var checked:Bool;

	var disabled:Bool;

	var form(default,null):HTMLFormElement;

	var files:FileList;

	var formAction:String;

	var formEnctype:String;

	var formMethod:String;

	var formNoValidate:Bool;

	var formTarget:String;

	var height:Int;

	var indeterminate:Bool;

	var list(default,null):HTMLElement;

	var max:String;

	var maxLength:Int;

	var min:String;

	var minLength:Int;

	var multiple:Bool;

	var name:String;

	var pattern:String;

	var placeholder:String;

	var readOnly:Bool;

	var required:Bool;

	var size:Int;

	var src:String;

	var step:String;

	var type:String;

	var defaultValue:String;

	var value:String;

	var valueAsDate:Date;

	var valueAsNumber:Float;

	var width:Int;

	var willValidate(default,null):Bool;

	var validity(default,null):ValidityState;

	var validationMessage(default,null):String;

	var labels(default,null):NodeList;

	var selectionStart:Int;

	var selectionEnd:Int;

	var selectionDirection:String;

	var align:String;

	var useMap:String;

	var textLength(default,null):Int;

	@:value({ n : 1 })
	function stepUp(n:Int):Void;

	@:value({ n : 1 })
	function stepDown(n:Int):Void;

	function checkValidity():Bool;

	function reportValidity():Bool;

	function setCustomValidity(error:String):Void;

	function select():Void;

	@:value({ selectionMode : PRESERVE })
	function setRangeText(replacement:String, start:Int, end:Int, selectionMode:js.html.SelectionMode):Void;

	function setRangeText(replacement:String):Void;

	function setSelectionRange(start:Int, end:Int, direction:Null<String>):Void;
}
private class haxe._Int32.Int32_Impl_ {

	@:impl @:op(-A)
	static inline function negate(this:Int) return (~ this + 1)

	@:impl @:op(++A)
	static inline function preIncrement(this:Int) return this = {
		var x = ++ this;
		(x);
	}

	@:impl @:op(A++)
	static inline function postIncrement(this:Int) {
		var ret = this ++;
		this = (this);
		return ret;
	}

	@:impl @:op(--A)
	static inline function preDecrement(this:Int) return this = {
		var x = -- this;
		(x);
	}

	@:impl @:op(A--)
	static inline function postDecrement(this:Int) {
		var ret = this --;
		this = (this);
		return ret;
	}

	@:op(A + B)
	static inline function add(a:haxe.Int32, b:haxe.Int32) return (cast a + cast b)

	@:op(A + B) @:commutative
	static inline function addInt(a:haxe.Int32, b:Int) return (cast a + b)

	@:op(A - B)
	static inline function sub(a:haxe.Int32, b:haxe.Int32) return (cast a - cast b)

	@:op(A - B)
	static inline function subInt(a:haxe.Int32, b:Int) return (cast a - b)

	@:op(A - B)
	static inline function intSub(a:Int, b:haxe.Int32) return (a - cast b)

	@:impl @:to
	static inline function toFloat(this:Int) return this

	public static function ucompare(a:haxe.Int32, b:haxe.Int32) {
		if (cast a < 0) {
			return if (cast b < 0) {
				(cast (cast ~ b - cast ~ a));
			} else {
				1;
			};
		};
		return if (cast b < 0) {
			-1;
		} else {
			(cast (cast a - cast b));
		};
	}

	static inline function clamp(x:Int) {
		return (x);
	}
}
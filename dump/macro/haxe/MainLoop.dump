@:access(haxe.MainEvent)
class haxe.MainLoop {

	static var pending:haxe.MainEvent;

	public static var threadCount(get,never):Int;

	static function get_threadCount() return haxe.EntryPoint.threadCount

	public static function hasEvents() {
		var p = haxe.MainLoop.pending;
		while (p != null) {
			if (p.isBlocking) {
				return true;
			};
			p = p.next;
		};
		return false;
	}

	public static function addThread(f:Void -> Void) {
		haxe.EntryPoint.addThread(f);
	}

	public static function runInMainThread(f:Void -> Void) {
		haxe.EntryPoint.runInMainThread(f);
	}

	@:value({ priority : 0 })
	public static function add(f:Void -> Void, priority:Int = 0) {
		if (f == null) {
			throw throw haxe.Exception.thrown("Event function is null");
		};
		var e = new haxe.MainEvent(f, priority);
		var head = haxe.MainLoop.pending;
		if (head != null) {
			head.prev = e;
		};
		e.next = head;
		haxe.MainLoop.pending = e;
		return e;
	}

	static function sortEvents() {
		var list = haxe.MainLoop.pending;
		if (list == null) {
			return;
		};
		var insize = 1;
		var nmerges;
		var psize = 0;
		var qsize = 0;
		var p;
		var q;
		var e;
		var tail;
		while (true) {
			p = list;
			list = null;
			tail = null;
			nmerges = 0;
			while (p != null) {
				nmerges ++;
				q = p;
				psize = 0;
				{
					var ` = 0;
					var `1 = insize;
					while (` < `1) {
						var i = ` ++;
						psize ++;
						q = q.next;
						if (q == null) {
							break;
						};
					};
				};
				qsize = insize;
				while (psize > 0 || (qsize > 0 && q != null)) {
					if (psize == 0) {
						e = q;
						q = q.next;
						qsize --;
					} else {
						if (qsize == 0 || q == null || (p.priority > q.priority || (p.priority == q.priority && p.nextRun <= q.nextRun))) {
							e = p;
							p = p.next;
							psize --;
						} else {
							e = q;
							q = q.next;
							qsize --;
						};
					};
					if (tail != null) {
						tail.next = e;
					} else {
						list = e;
					};
					e.prev = tail;
					tail = e;
				};
				p = q;
			};
			tail.next = null;
			if (nmerges <= 1) {
				break;
			};
			insize *= 2;
		};
		list.prev = null;
		haxe.MainLoop.pending = list;
	}

	static function tick() {
		haxe.MainLoop.sortEvents();
		var e = haxe.MainLoop.pending;
		var now = haxe.Timer.stamp();
		var wait = 1e9;
		while (e != null) {
			var next = e.next;
			var wt = e.nextRun - now;
			if (wt <= 0) {
				wait = 0;
				e.call();
			} else {
				if (wait > wt) {
					wait = wt;
				};
			};
			e = next;
		};
		return wait;
	}
}
@:using(haxe.CallStack) @:allow(haxe.Exception)
private class haxe._CallStack.CallStack_Impl_ {

	@:impl
	public static var length(get,never):Int;

	@:impl
	static inline function get_length(this:Array<haxe.StackItem>) return this.length

	public static function callStack() {
		return haxe.NativeStackTrace.toHaxe(haxe.NativeStackTrace.callStack(), null);
	}

	public static function exceptionStack() {
		var eStack = haxe.NativeStackTrace.toHaxe(haxe.NativeStackTrace.exceptionStack(), null);
		return {
			var this = haxe._CallStack.CallStack_Impl_.subtract(eStack, haxe._CallStack.CallStack_Impl_.callStack());
			cast this;
		};
	}

	public static function toString(stack:haxe.CallStack) {
		var b = new StringBuf();
		{
			var ` = 0;
			var `1 = cast stack;
			while (` < `1.length) {
				var s = `1[`];
				++ `;
				b.add("\nCalled from ");
				haxe._CallStack.CallStack_Impl_.itemToString(b, s);
			};
		};
		return b.toString();
	}

	@:impl
	public static function subtract(this:Array<haxe.StackItem>, stack:haxe.CallStack) {
		var startIndex = -1;
		var i = -1;
		while (++ i < this.length) {
			{
				var ` = 0;
				var `1 = cast stack.length;
				while (` < `1) {
					var j = ` ++;
					if (haxe._CallStack.CallStack_Impl_.equalItems(this[i], cast stack[j])) {
						if (startIndex < 0) {
							startIndex = i;
						};
						++ i;
						if (i >= this.length) {
							break;
						};
					} else {
						startIndex = -1;
					};
				};
			};
			if (startIndex >= 0) {
				break;
			};
		};
		return if (startIndex >= 0) {
			this.slice(0, startIndex);
		} else {
			this;
		};
	}

	@:impl
	public static inline function copy(this:Array<haxe.StackItem>) {
		return this.copy();
	}

	@:impl @:arrayAccess
	public static inline function get(this:Array<haxe.StackItem>, index:Int) {
		return this[index];
	}

	@:impl
	static inline function asArray(this:Array<haxe.StackItem>) {
		return this;
	}

	static function equalItems(item1:Null<haxe.StackItem>, item2:Null<haxe.StackItem>) {
		return @:ast(switch ([item1, item2]) {
	case [null, null]:
		true;	
	case [CFunction, CFunction]:
		true;	
	case [Module(m1), Module(m2)]:
		m1 == m2;	
	case [FilePos(item1, file1, line1, col1), FilePos(item2, file2, line2, col2)]:
		file1 == file2 && line1 == line2 && col1 == col2 && equalItems(item1, item2);	
	case [Method(class1, method1), Method(class2, method2)]:
		class1 == class2 && method1 == method2;	
	case [LocalFunction(v1), LocalFunction(v2)]:
		v1 == v2;	
	case _:
		false;	
}) if (item1 == null) if (item2 == null) {
			true;
		} else {
			false;
		} else switch (@:exhaustive enumIndex item1) {
			case 0: {
				if (item2 == null) {
					false;
				} else if (enumIndex item2 == 0) {
					{
						true;
					};
				} else {
					false;
				};
			};
			case 1: {
				var ` = item1[0];
				if (item2 == null) {
					false;
				} else if (enumIndex item2 == 1) {
					var `1 = item2[0];
					{
						var m1 = `;
						var m2 = `1;
						{
							m1 == m2;
						};
					};
				} else {
					false;
				};
			};
			case 2: {
				var `5 = item1[3];
				var `4 = item1[2];
				var `3 = item1[1];
				var `2 = item1[0];
				if (item2 == null) {
					false;
				} else if (enumIndex item2 == 2) {
					var `9 = item2[3];
					var `8 = item2[2];
					var `7 = item2[1];
					var `6 = item2[0];
					{
						var item1 = `2;
						var file1 = `3;
						var line1 = `4;
						var col1 = `5;
						var col2 = `9;
						var line2 = `8;
						var file2 = `7;
						var item2 = `6;
						{
							file1 == file2 && line1 == line2 && col1 == col2 && haxe._CallStack.CallStack_Impl_.equalItems(item1, item2);
						};
					};
				} else {
					false;
				};
			};
			case 3: {
				var `13 = item1[1];
				var `12 = item1[0];
				if (item2 == null) {
					false;
				} else if (enumIndex item2 == 3) {
					var `15 = item2[1];
					var `14 = item2[0];
					{
						var class1 = `12;
						var method1 = `13;
						var method2 = `15;
						var class2 = `14;
						{
							class1 == class2 && method1 == method2;
						};
					};
				} else {
					false;
				};
			};
			case 4: {
				var `10 = item1[0];
				if (item2 == null) {
					false;
				} else if (enumIndex item2 == 4) {
					var `11 = item2[0];
					{
						var v1 = `10;
						var v2 = `11;
						{
							v1 == v2;
						};
					};
				} else {
					false;
				};
			};
		};
	}

	static function exceptionToString(e:haxe.Exception) {
		if (e.get_previous() == null) {
			return "Exception: " + e.get_message() + {
				var tmp = e.get_stack();
				if (tmp == null) "null" else haxe._CallStack.CallStack_Impl_.toString(tmp);
			};
		};
		var result = "";
		var e = e;
		var prev = null;
		while (e != null) {
			if (prev == null) {
				result = "Exception: " + e.get_message() + {
					var tmp = e.get_stack();
					if (tmp == null) "null" else haxe._CallStack.CallStack_Impl_.toString(tmp);
				} + result;
			} else {
				var prevStack = haxe._CallStack.CallStack_Impl_.subtract(e.get_stack(), prev.get_stack());
				result = "Exception: " + e.get_message() + if (prevStack == null) "null" else haxe._CallStack.CallStack_Impl_.toString(prevStack) + "\n\nNext " + result;
			};
			prev = e;
			e = e.get_previous();
		};
		return result;
	}

	static function itemToString(b:StringBuf, s:haxe.StackItem) {
		@:ast(switch (s) {
	case CFunction:
		b.add("a C function");	
	case Module(m):
		b.add("module ");
		b.add(m);	
	case FilePos(s, file, line, col):
		if (s != null) {
			itemToString(b, s);
			b.add(" (");
		};
		b.add(file);
		b.add(" line ");
		b.add(line);
		if (col != null) {
			b.add(" column ");
			b.add(col);
		};
		if (s != null) b.add(")");	
	case Method(cname, meth):
		b.add(cname == null ? "<unknown>" : cname);
		b.add(".");
		b.add(meth);	
	case LocalFunction(n):
		b.add("local function #");
		b.add(n);	
}) switch (@:exhaustive enumIndex s) {
			case 0: {
				{
					b.add("a C function");
				};
			};
			case 1: {
				var ` = s[0];
				{
					var m = `;
					{
						b.add("module ");
						b.add(m);
					};
				};
			};
			case 2: {
				var `4 = s[3];
				var `3 = s[2];
				var `2 = s[1];
				var `1 = s[0];
				{
					var col = `4;
					var line = `3;
					var file = `2;
					var s = `1;
					{
						if (s != null) {
							haxe._CallStack.CallStack_Impl_.itemToString(b, s);
							b.add(" (");
						};
						b.add(file);
						b.add(" line ");
						b.add(line);
						if (col != null) {
							b.add(" column ");
							b.add(col);
						};
						if (s != null) {
							b.add(")");
						};
					};
				};
			};
			case 3: {
				var `7 = s[1];
				var `6 = s[0];
				{
					var meth = `7;
					var cname = `6;
					{
						b.add(if (cname == null) {
							"<unknown>";
						} else {
							cname;
						});
						b.add(".");
						b.add(meth);
					};
				};
			};
			case 4: {
				var `5 = s[0];
				{
					var n = `5;
					{
						b.add("local function #");
						b.add(n);
					};
				};
			};
		};
	}
}
class haxe.SysTools {

	@:value([" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code])
	public static var winMetaCharacters(default,never):haxe.ds.ReadOnlyArray<Int> = cast [32, 40, 41, 37, 33, 94, 34, 60, 62, 38, 124, 10, 13, 44, 59];

	public static function quoteUnixArg(argument:String) {
		if (argument == "") {
			return "''";
		};
		if (! new EReg("[^a-zA-Z0-9_@%+=:,./-]", "").match(argument)) {
			return argument;
		};
		return "'" + StringTools.replace(argument, "'", "'\"'\"'") + "'";
	}

	public static function quoteWinArg(argument:String, escapeMetaCharacters:Bool) {
		if (! new EReg("^[^ \t\\\\\"]+$", "").match(argument)) {
			var result = new StringBuf();
			var needquote = argument.indexOf(" ", null) != -1 || argument.indexOf("\t", null) != -1 || argument == "";
			if (needquote) {
				result.add("\"");
			};
			var bs_buf = new StringBuf();
			{
				var ` = 0;
				var `1 = argument.length;
				while (` < `1) {
					var i = ` ++;
					@:ast(switch (argument.charCodeAt(i)) {
	case "\\".code:
		bs_buf.add("\\");	
	case "\"".code:
		var bs = bs_buf.toString();
		result.add(bs);
		result.add(bs);
		bs_buf = new StringBuf();
		result.add("\\\"");	
	case var c:
		if (bs_buf.length > 0) {
			result.add(bs_buf.toString());
			bs_buf = new StringBuf();
		};
		result.addChar(c);	
}) {
						var ` = argument.charCodeAt(i);
						if (` == null) {
							var c = `;
							{
								if (bs_buf.get_length() > 0) {
									result.add(bs_buf.toString());
									bs_buf = new StringBuf();
								};
								result.addChar(c);
							};
						} else switch (`) {
							case 34: {
								{
									var bs = bs_buf.toString();
									result.add(bs);
									result.add(bs);
									bs_buf = new StringBuf();
									result.add("\\\"");
								};
							};
							case 92: {
								{
									bs_buf.add("\\");
								};
							};
							default: {
								var c = `;
								{
									if (bs_buf.get_length() > 0) {
										result.add(bs_buf.toString());
										bs_buf = new StringBuf();
									};
									result.addChar(c);
								};
							}
						};
					};
				};
			};
			result.add(bs_buf.toString());
			if (needquote) {
				result.add(bs_buf.toString());
				result.add("\"");
			};
			argument = result.toString();
		};
		if (escapeMetaCharacters) {
			var result = new StringBuf();
			{
				var ` = 0;
				var `1 = argument.length;
				while (` < `1) {
					var i = ` ++;
					var c = argument.charCodeAt(i);
					if (haxe.SysTools.winMetaCharacters.indexOf(c, null) >= 0) {
						result.addChar(94);
					};
					result.addChar(c);
				};
			};
			return result.toString();
		} else {
			return argument;
		};
	}
}
class haxe.io.BytesInput extends haxe.io.Input {

	public function new(b:haxe.io.Bytes, pos:Null<Int> = null, len:Null<Int> = null) {
		if (pos == null) {
			pos = 0;
		};
		if (len == null) {
			len = b.length - pos;
		};
		if (pos < 0 || len < 0 || pos + len > b.length) {
			throw throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		};
		this.b = b.getData();
		this.pos = pos;
		this.len = len;
		this.totlen = len;
	}

	var b:haxe.io.BytesData;

	var pos:Int;

	var len:Int;

	var totlen:Int;

	public var position(get,set):Int;

	public var length(get,never):Int;

	function get_position() {
		return this.pos;
	}

	function get_length() {
		return this.totlen;
	}

	function set_position(p:Int) {
		if (p < 0) {
			p = 0;
		} else {
			if (p > this.get_length()) {
				p = this.get_length();
			};
		};
		this.len = this.totlen - p;
		return this.pos = p;
	}

	public function readByte() {
		if (this.len == 0) {
			throw throw haxe.Exception.thrown(new haxe.io.Eof());
		};
		this.len --;
		return {
			var this = this.b;
			var i = this.pos ++;
			cast this.get(i);
		};
	}

	public function readBytes(buf:haxe.io.Bytes, pos:Int, len:Int) {
		if (pos < 0 || len < 0 || pos + len > buf.length) {
			throw throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		};
		if (this.len == 0 && len > 0) {
			throw throw haxe.Exception.thrown(new haxe.io.Eof());
		};
		if (this.len < len) {
			len = this.len;
		};
		var b1 = this.b;
		var b2 = buf.getData();
		{
			var ` = 0;
			var `1 = len;
			while (` < `1) {
				var i = ` ++;
				{
					var v = cast {
						var i = this.pos + i;
						cast b1.get(i);
					};
					cast b2.set(pos + i, v);
				};
			};
		};
		this.pos += len;
		this.len -= len;
		return len;
	}
}
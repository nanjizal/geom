class haxe.io.FPHelper {

	@:value(Int64.ofInt(0))
	static var i64tmp:haxe.Int64 = {
		var x = new haxe._Int64.___Int64(0 >> 31, 0);
		var this;
		this = x;
		cast this;
	};

	@:value(0.6931471805599453)
	static inline var LN2:Float = 0.6931471805599453;

	static function _i32ToFloat(i:Int) {
		var sign = 1 - ((i >>> 31) << 1);
		var e = (i >> 23) & 255;
		if (e == 255) {
			return if (i & 8388607 == 0) {
				(if (sign > 0) {
					Math.POSITIVE_INFINITY;
				} else {
					Math.NEGATIVE_INFINITY;
				});
			} else {
				Math.NaN;
			};
		};
		var m = if (e == 0) {
			(i & 8388607) << 1;
		} else {
			(i & 8388607) | 8388608;
		};
		return sign * m * Math.pow(2, e - 150);
	}

	static function _i64ToDouble(lo:Int, hi:Int) {
		var sign = 1 - ((hi >>> 31) << 1);
		var e = (hi >> 20) & 2047;
		if (e == 2047) {
			return if (lo == 0 && (hi & 1048575) == 0) {
				(if (sign > 0) {
					Math.POSITIVE_INFINITY;
				} else {
					Math.NEGATIVE_INFINITY;
				});
			} else {
				Math.NaN;
			};
		};
		var m = 2.220446049250313e-16 * ((hi & 1048575) * 4294967296. + (lo >>> 31) * 2147483648. + (lo & 2147483647));
		m = if (e == 0) {
			m * 2.0;
		} else {
			m + 1.0;
		};
		return sign * m * Math.pow(2, e - 1023);
	}

	static function _floatToI32(f:Float) {
		if (f == 0) {
			return 0;
		};
		var af = if (f < 0) {
			- f;
		} else {
			f;
		};
		var exp = Math.floor(Math.log(af) / 0.6931471805599453);
		if (exp > 127) {
			return 2139095040;
		} else {
			if (exp <= -127) {
				exp = -127;
				af *= 7.1362384635298e+44;
			} else {
				af = (af / Math.pow(2, exp) - 1.0) * 8388608;
			};
			return (if (f < 0) {
				-2147483648;
			} else {
				0;
			}) | ((exp + 127) << 23) | Math.round(af);
		};
	}

	static function _doubleToI64(v:Float) {
		var i64 = haxe.io.FPHelper.i64tmp;
		if (v == 0) {
			cast i64.low = 0;
			cast i64.high = 0;
		} else {
			if (! Math.isFinite(v)) {
				cast i64.low = 0;
				cast i64.high = if ((v > 0)) 2146435072 else -1048576;
			} else {
				var av = if (v < 0) {
					- v;
				} else {
					v;
				};
				var exp = Math.floor(Math.log(av) / 0.6931471805599453);
				if (exp > 1023) {
					cast i64.low = -1;
					cast i64.high = 2146435071;
				} else {
					if (exp <= -1023) {
						exp = -1023;
						av = av / 2.2250738585072014e-308;
					} else {
						av = av / Math.pow(2, exp) - 1.0;
					};
					var sig = Math.fround(av * 4503599627370496.);
					var sig_l = Std.int(sig);
					var sig_h = Std.int(sig / 4294967296.0);
					cast i64.low = sig_l;
					cast i64.high = (if ((v < 0)) -2147483648 else 0) | exp + 1023 << 20 | sig_h;
				};
			};
		};
		return i64;
	}

	public static function i32ToFloat(i:Int) {
		return haxe.io.FPHelper._i32ToFloat(i);
	}

	public static function floatToI32(f:Float) {
		return haxe.io.FPHelper._floatToI32(f);
	}

	public static function i64ToDouble(low:Int, high:Int) {
		return haxe.io.FPHelper._i64ToDouble(low, high);
	}

	public static function doubleToI64(v:Float) {
		return haxe.io.FPHelper._doubleToI64(v);
	}
}
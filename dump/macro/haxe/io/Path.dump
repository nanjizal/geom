class haxe.io.Path {

	public function new(path:String) {
		@:ast(switch (path) {
	case "." | "..":
		dir = path;
		file = "";
		return;	
}) switch (path) {
			case ".", "..": {
				{
					this.dir = path;
					this.file = "";
					return;
				};
			};
		};
		var c1 = path.lastIndexOf("/", null);
		var c2 = path.lastIndexOf("\\", null);
		if (c1 < c2) {
			this.dir = path.substr(0, c2);
			path = path.substr(c2 + 1, null);
			this.backslash = true;
		} else {
			if (c2 < c1) {
				this.dir = path.substr(0, c1);
				path = path.substr(c1 + 1, null);
			} else {
				this.dir = null;
			};
		};
		var cp = path.lastIndexOf(".", null);
		if (cp != -1) {
			this.ext = path.substr(cp + 1, null);
			this.file = path.substr(0, cp);
		} else {
			this.ext = null;
			this.file = path;
		};
	}

	public var dir:Null<String>;

	public var file:String;

	public var ext:Null<String>;

	public var backslash:Bool;

	public function toString() {
		return (if (this.dir == null) {
			"";
		} else {
			this.dir + if (this.backslash) {
				"\\";
			} else {
				"/";
			};
		}) + this.file + (if (this.ext == null) {
			"";
		} else {
			"." + this.ext;
		});
	}

	public static function withoutExtension(path:String) {
		var s = new haxe.io.Path(path);
		s.ext = null;
		return s.toString();
	}

	public static function withoutDirectory(path:String) {
		var s = new haxe.io.Path(path);
		s.dir = null;
		return s.toString();
	}

	public static function directory(path:String) {
		var s = new haxe.io.Path(path);
		if (s.dir == null) {
			return "";
		};
		return s.dir;
	}

	public static function extension(path:String) {
		var s = new haxe.io.Path(path);
		if (s.ext == null) {
			return "";
		};
		return s.ext;
	}

	public static function withExtension(path:String, ext:Null<String>) {
		var s = new haxe.io.Path(path);
		s.ext = ext;
		return s.toString();
	}

	public static function join(paths:Array<String>) {
		var paths = {
			var ` = [];
			{
				var `1 = 0;
				var `2 = paths;
				while (`1 < `2.length) {
					var v = `2[`1];
					++ `1;
					if (function(s:String) {
						return s != null && s != "";
					}(v)) {
						`.push(v);
					};
				};
			};
			`;
		};
		if (paths.length == 0) {
			return "";
		};
		var path = paths[0];
		{
			var ` = 1;
			var `1 = paths.length;
			while (` < `1) {
				var i = ` ++;
				path = haxe.io.Path.addTrailingSlash(path);
				path += paths[i];
			};
		};
		return haxe.io.Path.normalize(path);
	}

	public static function normalize(path:String) {
		var slash = "/";
		path = path.split("\\").join(slash);
		if (path == slash) {
			return slash;
		};
		var target = [];
		{
			var ` = 0;
			var `1 = path.split(slash);
			while (` < `1.length) {
				var token = `1[`];
				++ `;
				if (token == ".." && target.length > 0 && target[target.length - 1] != "..") {
					target.pop();
				} else {
					if (token == "") {
						if (target.length > 0 || path.charCodeAt(0) == 47) {
							target.push(token);
						};
					} else {
						if (token != ".") {
							target.push(token);
						};
					};
				};
			};
		};
		var tmp = target.join(slash);
		var acc = new StringBuf();
		var colon = false;
		var slashes = false;
		for (c in haxe.iterators.StringIteratorUnicode.unicodeIterator(tmp)) {
			@:ast(switch (c) {
	case ":".code:
		acc.add(":");
		colon = true;	
	case "/".code if (!colon):
		slashes = true;	
	case var i:
		colon = false;
		if (slashes) {
			acc.add("/");
			slashes = false;
		};
		acc.addChar(i);	
}) switch (c) {
				case 47: {
					if (! colon) {
						slashes = true;
					} else {
						var i = c;
						{
							colon = false;
							if (slashes) {
								acc.add("/");
								slashes = false;
							};
							acc.addChar(i);
						};
					};
				};
				case 58: {
					{
						acc.add(":");
						colon = true;
					};
				};
				default: {
					var i = c;
					{
						colon = false;
						if (slashes) {
							acc.add("/");
							slashes = false;
						};
						acc.addChar(i);
					};
				}
			};
		};
		return acc.toString();
	}

	public static function addTrailingSlash(path:String) {
		if (path.length == 0) {
			return "/";
		};
		var c1 = path.lastIndexOf("/", null);
		var c2 = path.lastIndexOf("\\", null);
		return if (c1 < c2) {
			if (c2 != path.length - 1) {
				path + "\\";
			} else {
				path;
			};
		} else {
			if (c1 != path.length - 1) {
				path + "/";
			} else {
				path;
			};
		};
	}

	public static function removeTrailingSlashes(path:String) {
		while (true) {
			@:ast(switch (path.charCodeAt(path.length - 1)) {
	case "/".code | "\\".code:
		path = path.substr(0, -1);	
	case _:
		break;	
}) {
				var ` = path.charCodeAt(path.length - 1);
				if (` == null) {
					break;
				} else switch (`) {
					case 47, 92: {
						{
							path = path.substr(0, -1);
						};
					};
					default: {
						break;
					}
				};
			};
		};
		return path;
	}

	public static function isAbsolute(path:String) {
		if (StringTools.startsWith(path, "/")) {
			return true;
		};
		if (path.charAt(1) == ":") {
			return true;
		};
		if (StringTools.startsWith(path, "\\\\")) {
			return true;
		};
		return false;
	}

	static function unescape(path:String) {
		var regex = new EReg("-x([0-9][0-9])", "g");
		return regex.map(path, function(regex:EReg) return String.fromCharCode(Std.parseInt(regex.matched(1))));
	}

	@:value({ allowSlashes : false })
	static function escape(path:String, allowSlashes:Bool = false) {
		var regex = if (allowSlashes) {
			new EReg("[^A-Za-z0-9_/\\\\\\.]", "g");
		} else {
			new EReg("[^A-Za-z0-9_\\.]", "g");
		};
		return regex.map(path, function(v:EReg) return "-x" + v.matched(0).charCodeAt(0));
	}
}
class haxe.io.Output {

	public var bigEndian(default,set):Bool;

	public function writeByte(c:Int) {
		throw throw haxe.Exception.thrown("Not implemented");
	}

	@:has_untyped
	public function writeBytes(s:haxe.io.Bytes, pos:Int, len:Int) {
		if (pos < 0 || len < 0 || pos + len > s.length) {
			throw throw haxe.Exception.thrown(haxe.io.Error.OutsideBounds);
		};
		var b = s.getData();
		var k = len;
		while (k > 0) {
			this.writeByte(cast b.get(pos));
			pos ++;
			k --;
		};
		return len;
	}

	public function flush() {}

	public function close() {}

	function set_bigEndian(b:Bool) {
		this.bigEndian = b;
		return b;
	}

	public function write(s:haxe.io.Bytes) {
		var l = s.length;
		var p = 0;
		while (l > 0) {
			var k = this.writeBytes(s, p, l);
			if (k == 0) {
				throw throw haxe.Exception.thrown(haxe.io.Error.Blocked);
			};
			p += k;
			l -= k;
		};
	}

	public function writeFullBytes(s:haxe.io.Bytes, pos:Int, len:Int) {
		while (len > 0) {
			var k = this.writeBytes(s, pos, len);
			pos += k;
			len -= k;
		};
	}

	public function writeFloat(x:Float) {
		this.writeInt32(haxe.io.FPHelper.floatToI32(x));
	}

	public function writeDouble(x:Float) {
		var i64 = haxe.io.FPHelper.doubleToI64(x);
		if (this.bigEndian) {
			this.writeInt32(cast i64.high);
			this.writeInt32(cast i64.low);
		} else {
			this.writeInt32(cast i64.low);
			this.writeInt32(cast i64.high);
		};
	}

	public function writeInt8(x:Int) {
		if (x < -128 || x >= 128) {
			throw throw haxe.Exception.thrown(haxe.io.Error.Overflow);
		};
		this.writeByte(x & 255);
	}

	public function writeInt16(x:Int) {
		if (x < -32768 || x >= 32768) {
			throw throw haxe.Exception.thrown(haxe.io.Error.Overflow);
		};
		this.writeUInt16(x & 65535);
	}

	public function writeUInt16(x:Int) {
		if (x < 0 || x >= 65536) {
			throw throw haxe.Exception.thrown(haxe.io.Error.Overflow);
		};
		if (this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		};
	}

	public function writeInt24(x:Int) {
		if (x < -8388608 || x >= 8388608) {
			throw throw haxe.Exception.thrown(haxe.io.Error.Overflow);
		};
		this.writeUInt24(x & 16777215);
	}

	public function writeUInt24(x:Int) {
		if (x < 0 || x >= 16777216) {
			throw throw haxe.Exception.thrown(haxe.io.Error.Overflow);
		};
		if (this.bigEndian) {
			this.writeByte(x >> 16);
			this.writeByte((x >> 8) & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte((x >> 8) & 255);
			this.writeByte(x >> 16);
		};
	}

	public function writeInt32(x:Int) {
		if (this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte((x >> 16) & 255);
			this.writeByte((x >> 8) & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte((x >> 8) & 255);
			this.writeByte((x >> 16) & 255);
			this.writeByte(x >>> 24);
		};
	}

	public function prepare(nbytes:Int) {}

	public function writeInput(i:haxe.io.Input, bufsize:Null<Int> = null) {
		if (bufsize == null) {
			bufsize = 4096;
		};
		var buf = haxe.io.Bytes.alloc(bufsize);
		try {
			while (true) {
				var len = i.readBytes(buf, 0, bufsize);
				if (len == 0) {
					throw throw haxe.Exception.thrown(haxe.io.Error.Blocked);
				};
				var p = 0;
				while (len > 0) {
					var k = this.writeBytes(buf, p, len);
					if (k == 0) {
						throw throw haxe.Exception.thrown(haxe.io.Error.Blocked);
					};
					p += k;
					len -= k;
				};
			};
		} catch (`12:Dynamic) {
			var `13 = haxe.Exception.caught(`12);
			var `14 = `13.unwrap();
			if (Std.isOfType(`14, haxe.io.Eof)) {
				{};
				{};
			} else throw `12;
		};
	}

	public function writeString(s:String, encoding:Null<haxe.io.Encoding> = null) {
		var b = haxe.io.Bytes.ofString(s, encoding);
		this.writeFullBytes(b, 0, b.length);
	}
}
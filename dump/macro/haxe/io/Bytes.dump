extern class haxe.io.Bytes {

	function new(length:Int, b:haxe.io.BytesData):Void;

	var length(default,null):Int;

	function get(pos:Int):Int;

	function set(pos:Int, v:Int):Void;

	function blit(pos:Int, src:haxe.io.Bytes, srcpos:Int, len:Int):Void;

	function fill(pos:Int, len:Int, value:Int):Void;

	function sub(pos:Int, len:Int):haxe.io.Bytes;

	function compare(other:haxe.io.Bytes):Int;

	function getDouble(pos:Int):Float;

	function getFloat(pos:Int):Float;

	function setDouble(pos:Int, v:Float):Void;

	function setFloat(pos:Int, v:Float):Void;

	function getUInt16(pos:Int):Int;

	function setUInt16(pos:Int, v:Int):Void;

	function getInt32(pos:Int):Int;

	function getInt64(pos:Int):haxe.Int64;

	function setInt32(pos:Int, v:Int):Void;

	function setInt64(pos:Int, v:haxe.Int64):Void;

	function getString(pos:Int, len:Int, encoding:Null<haxe.io.Encoding>):String;

	function toString():String;

	function toHex():String;

	function getData():haxe.io.BytesData;

	static function alloc(length:Int):haxe.io.Bytes;

	@:pure
	static function ofString(s:String, encoding:Null<haxe.io.Encoding>):haxe.io.Bytes;

	static function ofData(b:haxe.io.BytesData):haxe.io.Bytes;

	static function ofHex(s:String):haxe.io.Bytes;

	static function fastGet(b:haxe.io.BytesData, pos:Int):Int;

	static function __init__() {
		haxe.io.Error;
	}
}
class haxe.ds.List<T : haxe.ds.List.T> {

	public function new() {
		this.length = 0;
	}

	var h:haxe.ds._List.ListNode<haxe.ds.List.T>;

	var q:haxe.ds._List.ListNode<haxe.ds.List.T>;

	public var length(default,null):Int;

	public function add(item:haxe.ds.List.T) {
		var x = {
			var next = null;
			new haxe.ds._List.ListNode(item, next);
		};
		if (this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		};
		this.q = x;
		this.length ++;
	}

	public function push(item:haxe.ds.List.T) {
		var x = {
			var next = this.h;
			new haxe.ds._List.ListNode(item, next);
		};
		this.h = x;
		if (this.q == null) {
			this.q = x;
		};
		this.length ++;
	}

	public function first() {
		return if (this.h == null) {
			null;
		} else {
			this.h.item;
		};
	}

	public function last() {
		return if (this.q == null) {
			null;
		} else {
			this.q.item;
		};
	}

	public function pop() {
		if (this.h == null) {
			return null;
		};
		var x = this.h.item;
		this.h = this.h.next;
		if (this.h == null) {
			this.q = null;
		};
		this.length --;
		return x;
	}

	public function isEmpty() {
		return (this.h == null);
	}

	public function clear() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}

	public function remove(v:haxe.ds.List.T) {
		var prev = null;
		var l = this.h;
		while (l != null) {
			if (l.item == v) {
				if (prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				};
				if (this.q == l) {
					this.q = prev;
				};
				this.length --;
				return true;
			};
			prev = l;
			l = l.next;
		};
		return false;
	}

	public function iterator() {
		return new haxe.ds._List.ListIterator(this.h);
	}

	@:pure @:runtime
	public function keyValueIterator() {
		return new haxe.ds._List.ListKeyValueIterator(this.h);
	}

	public function toString() {
		var s = new StringBuf();
		var first = true;
		var l = this.h;
		s.add("{");
		while (l != null) {
			if (first) {
				first = false;
			} else {
				s.add(", ");
			};
			s.add(Std.string(l.item));
			l = l.next;
		};
		s.add("}");
		return s.toString();
	}

	public function join(sep:String) {
		var s = new StringBuf();
		var first = true;
		var l = this.h;
		while (l != null) {
			if (first) {
				first = false;
			} else {
				s.add(sep);
			};
			s.add(l.item);
			l = l.next;
		};
		return s.toString();
	}

	public function filter(f:haxe.ds.List.T -> Bool) {
		var l2 = new haxe.ds.List();
		var l = this.h;
		while (l != null) {
			var v = l.item;
			l = l.next;
			if (f(v)) {
				l2.add(v);
			};
		};
		return l2;
	}

	public function map<X : map.X>(f:haxe.ds.List.T -> map.X) {
		var b = new haxe.ds.List();
		var l = this.h;
		while (l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		};
		return b;
	}
}
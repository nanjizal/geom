class haxe.ds.EnumValueMap<K : haxe.ds.EnumValueMap.K,V : haxe.ds.EnumValueMap.V> extends haxe.ds.BalancedTree<haxe.ds.EnumValueMap.K, haxe.ds.EnumValueMap.V> implements haxe.IMap<haxe.ds.EnumValueMap.K, haxe.ds.EnumValueMap.V> {

	public function new() super()

	function compare(k1:EnumValue, k2:EnumValue) {
		var d = Type.enumIndex(k1) - Type.enumIndex(k2);
		if (d != 0) {
			return d;
		};
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if (p1.length == 0 && p2.length == 0) {
			return 0;
		};
		return this.compareArgs(p1, p2);
	}

	function compareArgs(a1:Array<Dynamic>, a2:Array<Dynamic>) {
		var ld = a1.length - a2.length;
		if (ld != 0) {
			return ld;
		};
		{
			var ` = 0;
			var `1 = a1.length;
			while (` < `1) {
				var i = ` ++;
				var d = this.compareArg(a1[i], a2[i]);
				if (d != 0) {
					return d;
				};
			};
		};
		return 0;
	}

	function compareArg(v1:Dynamic, v2:Dynamic) {
		return if (Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			this.compare(v1, v2);
		} else {
			if (Std.isOfType(v1, Array) && Std.isOfType(v2, Array)) {
				this.compareArgs(v1, v2);
			} else {
				Reflect.compare(v1, v2);
			};
		};
	}

	public function copy() {
		var copied = new haxe.ds.EnumValueMap();
		copied.root = this.root;
		return copied;
	}
}
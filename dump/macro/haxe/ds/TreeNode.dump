class haxe.ds.TreeNode<K : haxe.ds.TreeNode.K,V : haxe.ds.TreeNode.V> {

	@:value({ h : -1 })
	public function new(l:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>, k:haxe.ds.TreeNode.K, v:haxe.ds.TreeNode.V, r:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>, h:Int = -1) {
		this.left = l;
		this.key = k;
		this.value = v;
		this.right = r;
		if (h == -1) {
			this._height = (if ({
				var _this = this.left;
				if (_this == null) {
					0;
				} else {
					_this._height;
				};
			} > {
				var _this = this.right;
				if (_this == null) {
					0;
				} else {
					_this._height;
				};
			}) {
				{
					var _this = this.left;
					if (_this == null) {
						0;
					} else {
						_this._height;
					};
				};
			} else {
				{
					var _this = this.right;
					if (_this == null) {
						0;
					} else {
						_this._height;
					};
				};
			}) + 1;
		} else {
			this._height = h;
		};
	}

	public var left:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>;

	public var right:haxe.ds.TreeNode<haxe.ds.TreeNode.K, haxe.ds.TreeNode.V>;

	public var key:haxe.ds.TreeNode.K;

	public var value:haxe.ds.TreeNode.V;

	var _height:Int;

	public inline function get_height() return if (this == null) {
		0;
	} else {
		this._height;
	}

	public function toString() {
		return (if (this.left == null) {
			"";
		} else {
			this.left.toString() + ", ";
		}) + "" + Std.string(this.key) + "=" + Std.string(this.value) + (if (this.right == null) {
			"";
		} else {
			", " + this.right.toString();
		});
	}
}
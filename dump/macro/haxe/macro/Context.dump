class haxe.macro.Context {

	public static function error(msg:String, pos:haxe.macro.Position) {
		return haxe.macro.Context.load("error", 2)(msg, pos);
	}

	public static function fatalError(msg:String, pos:haxe.macro.Position) {
		return haxe.macro.Context.load("fatal_error", 2)(msg, pos);
	}

	public static function warning(msg:String, pos:haxe.macro.Position) {
		haxe.macro.Context.load("warning", 2)(msg, pos);
	}

	public static function info(msg:String, pos:haxe.macro.Position) {
		haxe.macro.Context.load("info", 2)(msg, pos);
	}

	public static function getMessages() {
		return haxe.macro.Context.load("get_messages", 0)();
	}

	public static function filterMessages(predicate:haxe.macro.Message -> Bool) {
		haxe.macro.Context.load("filter_messages", 1)(predicate);
	}

	public static function resolvePath(file:String) {
		return haxe.macro.Context.load("resolve_path", 1)(file);
	}

	public static function getClassPath() {
		return haxe.macro.Context.load("class_path", 0)();
	}

	public static function containsDisplayPosition(pos:haxe.macro.Position) {
		return haxe.macro.Context.load("contains_display_position", 1)(pos);
	}

	public static function currentPos() {
		return haxe.macro.Context.load("current_pos", 0)();
	}

	public static function getExpectedType() {
		return haxe.macro.Context.load("get_expected_type", 0)();
	}

	public static function getCallArguments() {
		return haxe.macro.Context.load("get_call_arguments", 0)();
	}

	public static function getLocalClass() {
		var l = haxe.macro.Context.load("get_local_type", 0)();
		if (l == null) {
			return null;
		};
		return @:ast(switch (l) {
	case TInst(c, _):
		c;	
	default:
		null;	
}) if (enumIndex l == 2) {
			var `1 = l[1];
			var ` = l[0];
			{
				var c = `;
				{
					c;
				};
			};
		} else {
			null;
		};
	}

	public static function getLocalModule() {
		return haxe.macro.Context.load("get_local_module", 0)();
	}

	public static function getLocalType() {
		return haxe.macro.Context.load("get_local_type", 0)();
	}

	public static function getLocalMethod() {
		return haxe.macro.Context.load("get_local_method", 0)();
	}

	public static function getLocalUsing() {
		return haxe.macro.Context.load("get_local_using", 0)();
	}

	public static function getLocalImports() {
		return haxe.macro.Context.load("get_local_imports", 0)();
	}

	@:deprecated("Use Context.getLocalTVars() instead")
	public static function getLocalVars() {
		return haxe.macro.Context.load("local_vars", 1)(false);
	}

	public static function getLocalTVars() {
		return haxe.macro.Context.load("local_vars", 1)(true);
	}

	public static function defined(s:String) {
		return haxe.macro.Context.load("defined", 1)(s);
	}

	public static function definedValue(key:String) {
		return haxe.macro.Context.load("defined_value", 1)(key);
	}

	public static function getDefines() {
		return haxe.macro.Context.load("get_defines", 0)();
	}

	public static function getType(name:String) {
		return haxe.macro.Context.load("get_type", 1)(name);
	}

	public static function getModule(name:String) {
		return haxe.macro.Context.load("get_module", 1)(name);
	}

	public static function parse(expr:String, pos:haxe.macro.Position) {
		return haxe.macro.Context.load("do_parse", 3)(expr, pos, false);
	}

	public static function parseInlineString(expr:String, pos:haxe.macro.Position) {
		return haxe.macro.Context.load("do_parse", 3)(expr, pos, true);
	}

	public static function makeExpr(v:Dynamic, pos:haxe.macro.Position) {
		return haxe.macro.Context.load("make_expr", 2)(v, pos);
	}

	public static function signature(v:Dynamic) {
		return haxe.macro.Context.load("signature", 1)(v);
	}

	@:value({ persistent : true })
	public static function onGenerate(callback:Array<haxe.macro.Type> -> Void, persistent:Bool = true) {
		haxe.macro.Context.load("on_generate", 2)(callback, persistent);
	}

	public static function onAfterGenerate(callback:Void -> Void) {
		haxe.macro.Context.load("on_after_generate", 1)(callback);
	}

	public static function onAfterTyping(callback:Array<haxe.macro.ModuleType> -> Void) {
		haxe.macro.Context.load("on_after_typing", 1)(callback);
	}

	public static function onTypeNotFound(callback:String -> haxe.macro.TypeDefinition) {
		haxe.macro.Context.load("on_type_not_found", 1)(callback);
	}

	public static function typeof(e:haxe.macro.Expr) {
		return haxe.macro.Context.load("typeof", 1)(e);
	}

	public static function typeExpr(e:haxe.macro.Expr) {
		return haxe.macro.Context.load("type_expr", 1)(e);
	}

	public static function resolveType(t:haxe.macro.ComplexType, p:haxe.macro.Position) {
		return haxe.macro.Context.load("resolve_type", 2)(t, p);
	}

	public static function toComplexType(t:haxe.macro.Type) {
		return haxe.macro.Context.load("to_complex_type", 1)(t);
	}

	public static function unify(t1:haxe.macro.Type, t2:haxe.macro.Type) {
		return haxe.macro.Context.load("unify", 2)(t1, t2);
	}

	public static function follow(t:haxe.macro.Type, once:Null<Bool> = null) {
		return haxe.macro.Context.load("follow", 2)(t, once);
	}

	@:value({ once : false })
	public static function followWithAbstracts(t:haxe.macro.Type, once:Bool = false) {
		return haxe.macro.Context.load("follow_with_abstracts", 2)(t, once);
	}

	public static function getPosInfos(p:haxe.macro.Position) {
		return haxe.macro.Context.load("get_pos_infos", 1)(p);
	}

	public static function makePosition(inf:{ min : Int, max : Int, file : String }) {
		return haxe.macro.Context.load("make_position", 3)(inf.min, inf.max, inf.file);
	}

	public static function getResources() {
		return haxe.macro.Context.load("get_resources", 0)();
	}

	public static function addResource(name:String, data:haxe.io.Bytes) {
		haxe.macro.Context.load("add_resource", 2)(name, data);
	}

	public static function getBuildFields() {
		return haxe.macro.Context.load("get_build_fields", 0)();
	}

	public static function defineType(t:haxe.macro.TypeDefinition, moduleDependency:Null<String> = null) {
		haxe.macro.Context.load("define_type", 2)(t, moduleDependency);
	}

	public static function defineModule(modulePath:String, types:Array<haxe.macro.TypeDefinition>, imports:Null<Array<haxe.macro.ImportExpr>> = null, usings:Null<Array<haxe.macro.TypePath>> = null) {
		if (imports == null) {
			imports = [];
		};
		if (usings == null) {
			usings = [];
		};
		haxe.macro.Context.load("define_module", 4)(modulePath, types, imports, usings);
	}

	public static function getTypedExpr(t:haxe.macro.TypedExpr) {
		return haxe.macro.Context.load("get_typed_expr", 1)(t);
	}

	public static function storeTypedExpr(t:haxe.macro.TypedExpr) {
		return haxe.macro.Context.load("store_typed_expr", 1)(t);
	}

	public static function storeExpr(e:haxe.macro.Expr) {
		return haxe.macro.Context.load("store_expr", 1)(e);
	}

	public static function registerModuleDependency(modulePath:String, externFile:String) {
		haxe.macro.Context.load("register_module_dependency", 2)(modulePath, externFile);
	}

	public static function timer(id:String) {
		return haxe.macro.Context.load("timer", 1)(id);
	}

	@:deprecated
	public static function registerModuleReuseCall(modulePath:String, macroCall:String) {
		throw throw haxe.Exception.thrown("This method is no longer supported. See https://github.com/HaxeFoundation/haxe/issues/5746");
	}

	@:deprecated
	public static function onMacroContextReused(callb:Void -> Bool) {
		throw throw haxe.Exception.thrown("This method is no longer supported. See https://github.com/HaxeFoundation/haxe/issues/5746");
	}

	@:allow(haxe.macro.TypeTools) @:allow(haxe.macro.MacroStringTools) @:allow(haxe.macro.TypedExprTools) @:allow(haxe.macro.PositionTools)
	static function load(f:String, nargs:Int) {
		return eval.vm.Context.callMacroApi(f);
	}

	static function includeFile(file:String, position:String) {
		haxe.macro.Context.load("include_file", 2)(file, position);
	}

	static function sExpr(e:haxe.macro.TypedExpr, pretty:Bool) {
		return haxe.macro.Context.load("s_expr", 2)(e, pretty);
	}
}
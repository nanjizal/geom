class haxe.macro.Compiler {

	@:has_untyped
	public static macro function getDefine(key:String) {
		return cast haxe.macro.Context.makeExpr(haxe.macro.Context.definedValue(key), $__mk_pos__("/usr/local/lib/haxe/std/haxe/macro/Compiler.hx", 1929, 1967));
	}

	@:value(~/^[A-Za-z_][A-Za-z0-9_]*$/)
	static var ident:EReg = new EReg("^[A-Za-z_][A-Za-z0-9_]*$", "");

	@:value(~/^[A-Za-z_][A-Za-z0-9_.]*$/)
	static var path:EReg = new EReg("^[A-Za-z_][A-Za-z0-9_.]*$", "");

	public static function allowPackage(v:String) {
		haxe.macro.Compiler.load("allow_package", 1)(v);
	}

	public static function define(flag:String, value:Null<String> = null) {
		haxe.macro.Compiler.load("define", 2)(flag, value);
	}

	public static function removeField(className:String, field:String, isStatic:Null<Bool> = null) {
		if (! haxe.macro.Compiler.path.match(className)) {
			throw throw haxe.Exception.thrown("Invalid " + className);
		};
		if (! haxe.macro.Compiler.ident.match(field)) {
			throw throw haxe.Exception.thrown("Invalid " + field);
		};
		haxe.macro.Compiler.load("type_patch", 4)(className, field, isStatic == true, null);
	}

	public static function setFieldType(className:String, field:String, type:String, isStatic:Null<Bool> = null) {
		if (! haxe.macro.Compiler.path.match(className)) {
			throw throw haxe.Exception.thrown("Invalid " + className);
		};
		if (! haxe.macro.Compiler.ident.match(if ((field.charAt(0) == "$")) {
			field.substr(1, null);
		} else {
			field;
		})) {
			throw throw haxe.Exception.thrown("Invalid " + field);
		};
		haxe.macro.Compiler.load("type_patch", 4)(className, field, isStatic == true, type);
	}

	public static function addMetadata(meta:String, className:String, field:Null<String> = null, isStatic:Null<Bool> = null) {
		if (! haxe.macro.Compiler.path.match(className)) {
			throw throw haxe.Exception.thrown("Invalid " + className);
		};
		if (field != null && ! haxe.macro.Compiler.ident.match(field)) {
			throw throw haxe.Exception.thrown("Invalid " + field);
		};
		haxe.macro.Compiler.load("meta_patch", 4)(meta, className, field, isStatic == true);
	}

	public static function addClassPath(path:String) {
		haxe.macro.Compiler.load("add_class_path", 1)(path);
	}

	public static function getOutput() {
		return haxe.macro.Compiler.load("get_output", 0)();
	}

	public static function setOutput(fileOrDir:String) {
		haxe.macro.Compiler.load("set_output", 1)(fileOrDir);
	}

	public static function getDisplayPos() {
		return haxe.macro.Compiler.load("get_display_pos", 0)();
	}

	public static function addNativeLib(name:String) {
		haxe.macro.Compiler.load("add_native_lib", 1)(name);
	}

	public static function addNativeArg(argument:String) {
		haxe.macro.Compiler.load("add_native_arg", 1)(argument);
	}

	@:value({ strict : false, rec : true })
	public static function include(pack:String, rec:Null<Bool> = true, ignore:Null<Array<String>> = null, classPaths:Null<Array<String>> = null, strict:Bool = false) {
		var ignoreWildcard = [];
		var ignoreString = [];
		if (ignore != null) {
			{
				var ` = 0;
				while (` < ignore.length) {
					var ignoreRule = ignore[`];
					++ `;
					if (StringTools.endsWith(ignoreRule, "*")) {
						ignoreWildcard.push(ignoreRule.substr(0, ignoreRule.length - 1));
					} else {
						ignoreString.push(ignoreRule);
					};
				};
			};
		};
		var skip = if (ignore == null) {
			function(c:String) return false;
		} else {
			function(c:String) {
				if (Lambda.has(ignoreString, c)) {
					return true;
				};
				{
					var ` = 0;
					while (` < ignoreWildcard.length) {
						var ignoreRule = ignoreWildcard[`];
						++ `;
						if (StringTools.startsWith(c, ignoreRule)) {
							return true;
						};
					};
				};
				return false;
			};
		};
		var displayValue = haxe.macro.Context.definedValue("display");
		if (classPaths == null) {
			classPaths = haxe.macro.Context.getClassPath();
			@:ast(switch (displayValue) {
	case null:
	case "usage":
	case _:
		return;	
}) if (displayValue == null) {} else if (displayValue == "usage") {
				{};
			} else {
				return;
			};
			{
				var ` = 0;
				var `1 = classPaths.length;
				while (` < `1) {
					var i = ` ++;
					var cp = StringTools.replace(classPaths[i], "\\", "/");
					if (StringTools.endsWith(cp, "/")) {
						cp = cp.substr(0, -1);
					};
					if (cp == "") {
						cp = ".";
					};
					classPaths[i] = cp;
				};
			};
		};
		var prefix = if (pack == "") {
			"";
		} else {
			pack + ".";
		};
		var found = false;
		{
			var ` = 0;
			while (` < classPaths.length) {
				var cp = classPaths[`];
				++ `;
				var path = if (pack == "") {
					cp;
				} else {
					cp + "/" + pack.split(".").join("/");
				};
				if (! sys.FileSystem.exists(path) || ! sys.FileSystem.isDirectory(path)) {
					continue;
				};
				found = true;
				{
					var ` = 0;
					var `1 = sys.FileSystem.readDirectory(path);
					while (` < `1.length) {
						var file = `1[`];
						++ `;
						if (StringTools.endsWith(file, ".hx") && file.substr(0, file.length - 3).indexOf(".", null) < 0) {
							if (file == "import.hx") {
								continue;
							};
							var cl = prefix + file.substr(0, file.length - 3);
							if (skip(cl)) {
								continue;
							};
							haxe.macro.Context.getModule(cl);
						} else {
							if (rec && sys.FileSystem.isDirectory(path + "/" + file) && ! skip(prefix + file)) {
								haxe.macro.Compiler.include(prefix + file, true, ignore, classPaths, null);
							};
						};
					};
				};
			};
		};
		if (strict && ! found) {
			haxe.macro.Context.error("Package \"" + pack + "\" was not found in any of class paths", haxe.macro.Context.currentPos());
		};
	}

	static function excludeBaseType(baseType:haxe.macro.BaseType) {
		if (! baseType.isExtern) {
			var meta = baseType.meta;
			if (! meta.has(":nativeGen")) {
				meta.add(":hxGen", [], baseType.pos);
			};
			baseType.exclude();
		};
	}

	@:value({ rec : true })
	public static function exclude(pack:String, rec:Null<Bool> = true) {
		haxe.macro.Context.onGenerate(function(types:Array<haxe.macro.Type>) {
			{
				var ` = 0;
				while (` < types.length) {
					var t = types[`];
					++ `;
					var b;
					var name;
					@:ast(switch (t) {
	case TInst(c, _):
		name = c.toString();
		b = c.get();	
	case TEnum(e, _):
		name = e.toString();
		b = e.get();	
	default:
		continue;	
}) switch (enumIndex t) {
						case 1: {
							var `3 = t[1];
							var `2 = t[0];
							{
								var e = `2;
								{
									name = e.toString();
									b = e.get();
								};
							};
						};
						case 2: {
							var `1 = t[1];
							var ` = t[0];
							{
								var c = `;
								{
									name = c.toString();
									b = c.get();
								};
							};
						};
						default: {
							continue;
						}
					};
					var p = b.pack.join(".");
					if ((p == pack || name == pack) || (rec && StringTools.startsWith(p, pack + "."))) {
						haxe.macro.Compiler.excludeBaseType(b);
					};
				};
			};
		}, false);
	}

	public static function excludeFile(fileName:String) {
		fileName = haxe.macro.Context.resolvePath(fileName);
		var f = sys.io.File.read(fileName, true);
		var classes = new haxe.ds.StringMap();
		try {
			while (true) {
				var l = StringTools.trim(f.readLine());
				if (l == "" || ! new EReg("[A-Za-z0-9._]", "").match(l)) {
					continue;
				};
				classes.set(l, true);
			};
		} catch (`15:Dynamic) {
			var `16 = haxe.Exception.caught(`15);
			var `17 = `16.unwrap();
			if (Std.isOfType(`17, haxe.io.Eof)) {
				{};
				{};
			} else throw `15;
		};
		haxe.macro.Context.onGenerate(function(types:Array<haxe.macro.Type>) {
			{
				var ` = 0;
				while (` < types.length) {
					var t = types[`];
					++ `;
					@:ast(switch (t) {
	case TInst(c, _):
		if (classes.exists(c.toString())) excludeBaseType(c.get());	
	case TEnum(e, _):
		if (classes.exists(e.toString())) excludeBaseType(e.get());	
	default:
}) switch (enumIndex t) {
						case 1: {
							var `3 = t[1];
							var `2 = t[0];
							{
								var e = `2;
								{
									if (classes.exists(e.toString())) {
										haxe.macro.Compiler.excludeBaseType(e.get());
									};
								};
							};
						};
						case 2: {
							var `1 = t[1];
							var ` = t[0];
							{
								var c = `;
								{
									if (classes.exists(c.toString())) {
										haxe.macro.Compiler.excludeBaseType(c.get());
									};
								};
							};
						};
						default: {}
					};
				};
			};
		}, null);
	}

	public static function patchTypes(file:String) {
		var file = haxe.macro.Context.resolvePath(file);
		var f = sys.io.File.read(file, true);
		try {
			while (true) {
				var r = StringTools.trim(f.readLine());
				if (r == "" || r.substr(0, 2) == "//") {
					continue;
				};
				if (StringTools.endsWith(r, ";")) {
					r = r.substr(0, -1);
				};
				if (r.charAt(0) == "-") {
					r = r.substr(1, null);
					var isStatic = StringTools.startsWith(r, "static ");
					if (isStatic) {
						r = r.substr(7, null);
					};
					var p = r.split(".");
					var field = p.pop();
					haxe.macro.Compiler.removeField(p.join("."), field, isStatic);
					continue;
				};
				if (r.charAt(0) == "@") {
					var rp = r.split(" ");
					var type = rp.pop();
					var isStatic = rp[rp.length - 1] == "static";
					if (isStatic) {
						rp.pop();
					};
					var meta = rp.join(" ");
					var p = type.split(".");
					var field = if (p.length > 1 && p[p.length - 2].charAt(0) >= "a") {
						null;
					} else {
						p.pop();
					};
					haxe.macro.Compiler.addMetadata(meta, p.join("."), field, isStatic);
					continue;
				};
				if (StringTools.startsWith(r, "enum ")) {
					haxe.macro.Compiler.define("enumAbstract:" + r.substr(5, null), null);
					continue;
				};
				var rp = r.split(" : ");
				if (rp.length > 1) {
					r = rp.shift();
					var isStatic = StringTools.startsWith(r, "static ");
					if (isStatic) {
						r = r.substr(7, null);
					};
					var p = r.split(".");
					var field = p.pop();
					haxe.macro.Compiler.setFieldType(p.join("."), field, rp.join(" : "), isStatic);
					continue;
				};
				throw throw haxe.Exception.thrown("Invalid type patch " + r);
			};
		} catch (`18:Dynamic) {
			var `19 = haxe.Exception.caught(`18);
			var `20 = `19.unwrap();
			if (Std.isOfType(`20, haxe.io.Eof)) {
				{};
				{};
			} else throw `18;
		};
	}

	@:value({ recursive : true })
	public static function keep(path:Null<String> = null, paths:Null<Array<String>> = null, recursive:Null<Bool> = true) {
		if (null == paths) {
			paths = [];
		};
		if (null != path) {
			paths.push(path);
		};
		{
			var ` = 0;
			while (` < paths.length) {
				var path = paths[`];
				++ `;
				haxe.macro.Compiler.addGlobalMetadata(path, "@:keep", recursive, true, true);
			};
		};
	}

	@:value({ recursive : true, mode : Loose })
	public static function nullSafety(path:String, mode:haxe.macro.NullSafetyMode = "Loose", recursive:Bool = true) {
		haxe.macro.Compiler.addGlobalMetadata(path, "@:nullSafety(" + mode + ")", recursive, null, null);
	}

	@:value({ toFields : false, toTypes : true, recursive : true })
	public static function addGlobalMetadata(pathFilter:String, meta:String, recursive:Null<Bool> = true, toTypes:Null<Bool> = true, toFields:Null<Bool> = false) {
		haxe.macro.Compiler.load("add_global_metadata_impl", 5)(pathFilter, meta, recursive, toTypes, toFields);
	}

	public static function setCustomJSGenerator(callb:haxe.macro.JSGenApi -> Void) {
		haxe.macro.Compiler.load("set_custom_js_generator", 1)(callb);
	}

	static function load(f:String, nargs:Int) {
		return haxe.macro.Context.load(f, nargs);
	}

	public static function flushDiskCache() {
		haxe.macro.Compiler.load("flush_disk_cache", 0)();
	}

	@:has_untyped @:value({ position : Top })
	public static function includeFile(file:String, position:haxe.macro.IncludePosition = "top") {
		return @:ast(switch (((position : String)).toLowerCase()) {
	case Inline:
		if (Context.getLocalModule() == "") Context.error("Cannot use inline mode when includeFile is called by `--macro`", Context.currentPos());
		var f = try sys.io.File.getContent(Context.resolvePath(file)) catch(e:Dynamic) Context.error(Std.string(e), Context.currentPos());
		var p = Context.currentPos();
		if (Context.defined("js")) {
			({ expr : ECall({ expr : EField({ expr : EField({ expr : EConst(CIdent("js")), pos : p }, "Syntax"), pos : p }, "plainCode"), pos : p }, [haxe.macro.Context.makeExpr(@$v f, p)]), pos : p } : haxe.macro.Expr);
		} else {
			({ expr : EUntyped({ expr : ECall({ expr : EConst(CIdent("__lua__")), pos : p }, [haxe.macro.Context.makeExpr(@$v f, p)]), pos : p }), pos : p } : haxe.macro.Expr);
		};	
	case Top | Closure:
		@:privateAccess Context.includeFile(file, position);
		({ expr : EBlock([]), pos : untyped $__mk_pos__("/usr/local/lib/haxe/std/haxe/macro/Compiler.hx", 15664, 15666) } : haxe.macro.Expr);	
	case _:
		Context.error("unknown includeFile position: " + position, Context.currentPos());	
}) {
			var ` = (cast position).toLowerCase();
			switch (`) {
				case "closure", "top": {
					{
						haxe.macro.Context.includeFile(file, position);
						cast {expr : haxe.macro.ExprDef.EBlock([]), pos : $__mk_pos__("/usr/local/lib/haxe/std/haxe/macro/Compiler.hx", 15664, 15666)};
					};
				};
				case "inline": {
					{
						if (haxe.macro.Context.getLocalModule() == "") {
							haxe.macro.Context.error("Cannot use inline mode when includeFile is called by `--macro`", haxe.macro.Context.currentPos());
						};
						var f = try {
							sys.io.File.getContent(haxe.macro.Context.resolvePath(file));
						} catch (`21:Dynamic) {
							var `22 = haxe.Exception.caught(`21);
							var `23 = `22.unwrap();
							if (true) {
								var e = `23;
								haxe.macro.Context.error(Std.string(e), haxe.macro.Context.currentPos());
							} else throw `21;
						};
						var p = haxe.macro.Context.currentPos();
						if (haxe.macro.Context.defined("js")) {
							cast {expr : haxe.macro.ExprDef.ECall({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("js")), pos : p}, "Syntax"), pos : p}, "plainCode"), pos : p}, [haxe.macro.Context.makeExpr(f, p)]), pos : p};
						} else {
							cast {expr : haxe.macro.ExprDef.EUntyped({expr : haxe.macro.ExprDef.ECall({expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("__lua__")), pos : p}, [haxe.macro.Context.makeExpr(f, p)]), pos : p}), pos : p};
						};
					};
				};
				default: {
					haxe.macro.Context.error("unknown includeFile position: " + position, haxe.macro.Context.currentPos());
				}
			};
		};
	}
}
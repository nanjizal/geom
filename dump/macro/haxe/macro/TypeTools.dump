class haxe.macro.TypeTools {

	static function nullable(complexType:haxe.macro.ComplexType) return cast haxe.macro.ComplexType.TPath({pack : [], name : "Null", params : [haxe.macro.TypeParam.TPType(complexType)]})

	static function toField(cf:haxe.macro.ClassField) return {
		var varAccessToString = function(va:haxe.macro.VarAccess, getOrSet:String) return {
			@:ast(switch (va) {
	case AccNormal | AccCtor:
		"default";	
	case AccNo:
		"null";	
	case AccNever:
		"never";	
	case AccResolve:
		throw "Invalid TAnonymous";	
	case AccCall:
		getOrSet;	
	case AccInline:
		"default";	
	case AccRequire(_, _):
		"default";	
}) switch (@:exhaustive enumIndex va) {
				case 0, 7: {
					{
						"default";
					};
				};
				case 1: {
					{
						"null";
					};
				};
				case 2: {
					{
						"never";
					};
				};
				case 3: {
					{
						throw throw haxe.Exception.thrown("Invalid TAnonymous");
					};
				};
				case 4: {
					{
						getOrSet;
					};
				};
				case 5: {
					{
						"default";
					};
				};
				case 6: {
					var `1 = va[1];
					var ` = va[0];
					{
						"default";
					};
				};
			};
		};
		var access = if (cf.isPublic) {
			[haxe.macro.Access.APublic];
		} else {
			[haxe.macro.Access.APrivate];
		};
		if (cf.meta.has(":final")) {
			access.push(haxe.macro.Access.AFinal);
		};
		if (cf.params.length == 0) {
			{name : cf.name, doc : cf.doc, access : access, kind : @:ast(switch ([cf.kind, cf.type]) {
	case [FVar(read, write), ret]:
		FProp(varAccessToString(read, "get"), varAccessToString(write, "set"), toComplexType(ret), null);	
	case [FMethod(_), TFun(args, ret)]:
		FFun({ args : [for (a  in  args) { name : a.name, opt : a.opt, type : toComplexType(a.t) }], ret : toComplexType(ret), expr : null });	
	default:
		throw "Invalid TAnonymous";	
}) {
				var ` = cf.type;
				var `1 = cf.kind;
				switch (@:exhaustive enumIndex `1) {
					case 0: {
						var `6 = `1[1];
						var `5 = `1[0];
						{
							var ret = `;
							var write = `6;
							var read = `5;
							{
								haxe.macro.FieldType.FProp(varAccessToString(read, "get"), varAccessToString(write, "set"), haxe.macro.TypeTools.toComplexType(ret), null);
							};
						};
					};
					case 1: {
						var `2 = `1[0];
						if (enumIndex ` == 4) {
							var `4 = `[1];
							var `3 = `[0];
							{
								var ret = `4;
								var args = `3;
								{
									haxe.macro.FieldType.FFun({args : {
										var ` = [];
										{
											var `1 = 0;
											while (`1 < args.length) {
												var a = args[`1];
												++ `1;
												`.push({name : a.name, opt : cast a.opt, type : haxe.macro.TypeTools.toComplexType(a.t)});
											};
										};
										`;
									}, ret : haxe.macro.TypeTools.toComplexType(ret), expr : null});
								};
							};
						} else {
							throw throw haxe.Exception.thrown("Invalid TAnonymous");
						};
					};
				};
			}, pos : cf.pos, meta : cf.meta.get()};
		} else {
			throw throw haxe.Exception.thrown("Invalid TAnonymous");
		};
	}

	public static function toComplexType(type:Null<haxe.macro.Type>) return {
		haxe.macro.Context.toComplexType(type);
	}

	static function toTypeParam(type:haxe.macro.Type) return {
		@:ast(switch (type) {
	case TInst(_.get() => { kind : KExpr(e) }, _):
		TPExpr(e);	
	case _:
		TPType(toComplexType(type));	
}) if (enumIndex type == 2) {
			var `1 = type[1];
			var ` = type[0];
			{
				var _hx_tmp;
				{
					var `20 = (_hx_tmp = `.get()).superClass;
					var `19 = _hx_tmp.statics;
					var `18 = _hx_tmp.pos;
					var `17 = _hx_tmp.params;
					var `16 = _hx_tmp.pack;
					var `15 = _hx_tmp.overrides;
					var `14 = _hx_tmp.name;
					var `13 = _hx_tmp.module;
					var `12 = _hx_tmp.meta;
					var `11 = _hx_tmp.kind;
					var `10 = _hx_tmp.isPrivate;
					var `9 = _hx_tmp.isInterface;
					var `8 = _hx_tmp.isFinal;
					var `7 = _hx_tmp.isExtern;
					var `6 = _hx_tmp.interfaces;
					var `5 = _hx_tmp.init;
					var `4 = _hx_tmp.fields;
					var `3 = _hx_tmp.doc;
					var `2 = _hx_tmp.constructor;
					if (enumIndex `11 == 3) {
						var `21 = `11[0];
						{
							var e = `21;
							{
								haxe.macro.TypeParam.TPExpr(e);
							};
						};
					} else {
						haxe.macro.TypeParam.TPType(haxe.macro.TypeTools.toComplexType(type));
					};
				};
			};
		} else {
			haxe.macro.TypeParam.TPType(haxe.macro.TypeTools.toComplexType(type));
		};
	}

	static function toTypePath(baseType:haxe.macro.BaseType, params:Array<haxe.macro.Type>) return {
		var module = baseType.module;
		{pack : baseType.pack, name : module.substring(module.lastIndexOf(".", null) + 1, null), sub : baseType.name, params : {
			var ` = [];
			{
				var `1 = 0;
				while (`1 < params.length) {
					var t = params[`1];
					++ `1;
					`.push(haxe.macro.TypeTools.toTypeParam(t));
				};
			};
			`;
		}};
	}

	public static function follow(t:haxe.macro.Type, once:Null<Bool> = null) return haxe.macro.Context.follow(t, once)

	@:value({ once : false })
	public static function followWithAbstracts(t:haxe.macro.Type, once:Bool = false) return haxe.macro.Context.followWithAbstracts(t, once)

	public static function unify(t1:haxe.macro.Type, t2:haxe.macro.Type) return haxe.macro.Context.unify(t1, t2)

	public static function getClass(t:haxe.macro.Type) return if (t == null) {
		null;
	} else {
		@:ast(switch (follow(t)) {
	case TInst(c, _):
		c.get();	
	case _:
		throw "Class instance expected";	
}) {
			var ` = haxe.macro.TypeTools.follow(t, null);
			if (enumIndex ` == 2) {
				var `2 = `[1];
				var `1 = `[0];
				{
					var c = `1;
					{
						c.get();
					};
				};
			} else {
				throw throw haxe.Exception.thrown("Class instance expected");
			};
		};
	}

	public static function getEnum(t:haxe.macro.Type) return if (t == null) {
		null;
	} else {
		@:ast(switch (follow(t)) {
	case TEnum(e, _):
		e.get();	
	case _:
		throw "Enum instance expected";	
}) {
			var ` = haxe.macro.TypeTools.follow(t, null);
			if (enumIndex ` == 1) {
				var `2 = `[1];
				var `1 = `[0];
				{
					var e = `1;
					{
						e.get();
					};
				};
			} else {
				throw throw haxe.Exception.thrown("Enum instance expected");
			};
		};
	}

	public static function applyTypeParameters(t:haxe.macro.Type, typeParameters:Array<haxe.macro.TypeParameter>, concreteTypes:Array<haxe.macro.Type>) {
		if (typeParameters.length != concreteTypes.length) {
			throw throw haxe.Exception.thrown("Incompatible arguments: " + typeParameters.length + " type parameters and " + concreteTypes.length + " concrete types");
		} else {
			if (typeParameters.length == 0) {
				return t;
			};
		};
		return haxe.macro.Context.load("apply_params", 3)(typeParameters, concreteTypes, t);
	}

	static function applyParams(typeParameters:Array<haxe.macro.TypeParameter>, concreteTypes:Array<haxe.macro.Type>, t:haxe.macro.Type) {
		return null;
	}

	public static function map(t:haxe.macro.Type, f:haxe.macro.Type -> haxe.macro.Type) {
		return @:ast(switch (t) {
	case TMono(tm):
		switch (tm.get()) {
			case null:
				t;			
			case var t:
				f(t);			
		};	
	case TEnum(_, []) | TInst(_, []) | TType(_, []):
		t;	
	case TEnum(en, tl):
		TEnum(en, tl.map(f));	
	case TInst(cl, tl):
		TInst(cl, tl.map(f));	
	case TType(t2, tl):
		TType(t2, tl.map(f));	
	case TAbstract(a, tl):
		TAbstract(a, tl.map(f));	
	case TFun(args, ret):
		TFun(args.map(function(arg) return { name : arg.name, opt : arg.opt, t : f(arg.t) }), f(ret));	
	case TAnonymous(an):
		TAnonymous(Context.load("map_anon_ref", 2)(an, f));	
	case TDynamic(t2):
		t == t2 ? t : TDynamic(f(t2));	
	case TLazy(ft):
		var ft = ft();
		var ft2 = f(ft);
		ft == ft2 ? t : ft2;	
}) switch (@:exhaustive enumIndex t) {
			case 0: {
				var ` = t[0];
				{
					var tm = `;
					{
						@:ast(switch (tm.get()) {
	case null:
		t;	
	case var t:
		f(t);	
}) {
							var ` = tm.get();
							if (` == null) {
								t;
							} else {
								var t = `;
								{
									f(t);
								};
							};
						};
					};
				};
			};
			case 1: {
				var `11 = t[1];
				var `10 = t[0];
				if (`11.length == 0) {
					{
						t;
					};
				} else {
					var en = `10;
					var tl = `11;
					{
						haxe.macro.Type.TEnum(en, {
							var ` = [];
							{
								var `1 = 0;
								var `2 = tl;
								while (`1 < `2.length) {
									var v = `2[`1];
									++ `1;
									`.push(f(v));
								};
							};
							`;
						});
					};
				};
			};
			case 2: {
				var `9 = t[1];
				var `8 = t[0];
				if (`9.length == 0) {
					{
						t;
					};
				} else {
					var cl = `8;
					var tl = `9;
					{
						haxe.macro.Type.TInst(cl, {
							var ` = [];
							{
								var `1 = 0;
								var `2 = tl;
								while (`1 < `2.length) {
									var v = `2[`1];
									++ `1;
									`.push(f(v));
								};
							};
							`;
						});
					};
				};
			};
			case 3: {
				var `7 = t[1];
				var `6 = t[0];
				if (`7.length == 0) {
					{
						t;
					};
				} else {
					var t2 = `6;
					var tl = `7;
					{
						haxe.macro.Type.TType(t2, {
							var ` = [];
							{
								var `1 = 0;
								var `2 = tl;
								while (`1 < `2.length) {
									var v = `2[`1];
									++ `1;
									`.push(f(v));
								};
							};
							`;
						});
					};
				};
			};
			case 4: {
				var `2 = t[1];
				var `1 = t[0];
				{
					var ret = `2;
					var args = `1;
					{
						haxe.macro.Type.TFun({
							var ` = [];
							{
								var `1 = 0;
								var `2 = args;
								while (`1 < `2.length) {
									var v = `2[`1];
									++ `1;
									`.push(function(arg:{ t : haxe.macro.Type, opt : Bool, name : String }) {
										return {name : arg.name, opt : arg.opt, t : f(arg.t)};
									}(v));
								};
							};
							`;
						}, f(ret));
					};
				};
			};
			case 5: {
				var `12 = t[0];
				{
					var an = `12;
					{
						haxe.macro.Type.TAnonymous(haxe.macro.Context.load("map_anon_ref", 2)(an, f));
					};
				};
			};
			case 6: {
				var `13 = t[0];
				{
					var t2 = `13;
					{
						if (t == t2) {
							t;
						} else {
							haxe.macro.Type.TDynamic(f(t2));
						};
					};
				};
			};
			case 7: {
				var `5 = t[0];
				{
					var ft = `5;
					{
						var ft = ft();
						var ft2 = f(ft);
						if (ft == ft2) {
							t;
						} else {
							ft2;
						};
					};
				};
			};
			case 8: {
				var `4 = t[1];
				var `3 = t[0];
				{
					var tl = `4;
					var a = `3;
					{
						haxe.macro.Type.TAbstract(a, {
							var ` = [];
							{
								var `1 = 0;
								var `2 = tl;
								while (`1 < `2.length) {
									var v = `2[`1];
									++ `1;
									`.push(f(v));
								};
							};
							`;
						});
					};
				};
			};
		};
	}

	public static function iter(t:haxe.macro.Type, f:haxe.macro.Type -> Void) {
		@:ast(switch (t) {
	case TMono(tm):
		var t = tm.get();
		if (t != null) f(t);	
	case TEnum(_, tl) | TInst(_, tl) | TType(_, tl) | TAbstract(_, tl):
		for (t  in  tl) f(t);	
	case TDynamic(t2):
		if (t != t2) f(t2);	
	case TLazy(ft):
		f(ft());	
	case TAnonymous(an):
		for (field  in  an.get().fields) f(field.type);	
	case TFun(args, ret):
		for (arg  in  args) f(arg.t);
		f(ret);	
}) switch (@:exhaustive enumIndex t) {
			case 0: {
				var ` = t[0];
				{
					var tm = `;
					{
						var t = tm.get();
						if (t != null) {
							f(t);
						};
					};
				};
			};
			case 1: {
				var `11 = t[1];
				var `10 = t[0];
				{
					var tl = `11;
					{
						{
							var ` = 0;
							while (` < tl.length) {
								var t = tl[`];
								++ `;
								f(t);
							};
						};
					};
				};
			};
			case 2: {
				var `9 = t[1];
				var `8 = t[0];
				{
					var tl = `9;
					{
						{
							var ` = 0;
							while (` < tl.length) {
								var t = tl[`];
								++ `;
								f(t);
							};
						};
					};
				};
			};
			case 3: {
				var `7 = t[1];
				var `6 = t[0];
				{
					var tl = `7;
					{
						{
							var ` = 0;
							while (` < tl.length) {
								var t = tl[`];
								++ `;
								f(t);
							};
						};
					};
				};
			};
			case 4: {
				var `2 = t[1];
				var `1 = t[0];
				{
					var ret = `2;
					var args = `1;
					{
						{
							var ` = 0;
							while (` < args.length) {
								var arg = args[`];
								++ `;
								f(arg.t);
							};
						};
						f(ret);
					};
				};
			};
			case 5: {
				var `13 = t[0];
				{
					var an = `13;
					{
						{
							var ` = 0;
							var `1 = an.get().fields;
							while (` < `1.length) {
								var field = `1[`];
								++ `;
								f(field.type);
							};
						};
					};
				};
			};
			case 6: {
				var `12 = t[0];
				{
					var t2 = `12;
					{
						if (t != t2) {
							f(t2);
						};
					};
				};
			};
			case 7: {
				var `5 = t[0];
				{
					var ft = `5;
					{
						f(ft());
					};
				};
			};
			case 8: {
				var `4 = t[1];
				var `3 = t[0];
				{
					var tl = `4;
					{
						{
							var ` = 0;
							while (` < tl.length) {
								var t = tl[`];
								++ `;
								f(t);
							};
						};
					};
				};
			};
		};
	}

	public static function toString(t:haxe.macro.Type) {
		return haxe.macro.Context.load("s_type", 1)(t);
	}

	@:value({ isStatic : false })
	public static function findField(c:haxe.macro.ClassType, name:String, isStatic:Bool = false) {
		var field = Lambda.find((if (isStatic) {
			c.statics;
		} else {
			c.fields;
		}).get(), function(field:haxe.macro.ClassField) return field.name == name);
		return if (field != null) {
			field;
		} else {
			if (c.superClass != null) {
				haxe.macro.TypeTools.findField(c.superClass.t.get(), name, isStatic);
			} else {
				null;
			};
		};
	}
}
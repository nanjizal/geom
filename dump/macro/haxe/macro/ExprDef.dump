enum haxe.macro.ExprDef {
	EConst(c:haxe.macro.Constant);
	EArray(e1:haxe.macro.Expr, e2:haxe.macro.Expr);
	EBinop(op:haxe.macro.Binop, e1:haxe.macro.Expr, e2:haxe.macro.Expr);
	EField(e:haxe.macro.Expr, field:String);
	EParenthesis(e:haxe.macro.Expr);
	EObjectDecl(fields:Array<haxe.macro.ObjectField>);
	EArrayDecl(values:Array<haxe.macro.Expr>);
	ECall(e:haxe.macro.Expr, params:Array<haxe.macro.Expr>);
	ENew(t:haxe.macro.TypePath, params:Array<haxe.macro.Expr>);
	EUnop(op:haxe.macro.Unop, postFix:Bool, e:haxe.macro.Expr);
	EVars(vars:Array<haxe.macro.Var>);
	EFunction(kind:Null<haxe.macro.FunctionKind>, f:haxe.macro.Function);
	EBlock(exprs:Array<haxe.macro.Expr>);
	EFor(it:haxe.macro.Expr, expr:haxe.macro.Expr);
	EIf(econd:haxe.macro.Expr, eif:haxe.macro.Expr, eelse:Null<haxe.macro.Expr>);
	EWhile(econd:haxe.macro.Expr, e:haxe.macro.Expr, normalWhile:Bool);
	ESwitch(e:haxe.macro.Expr, cases:Array<haxe.macro.Case>, edef:Null<haxe.macro.Expr>);
	ETry(e:haxe.macro.Expr, catches:Array<haxe.macro.Catch>);
	EReturn(?e:Null<haxe.macro.Expr>);
	EBreak;
	EContinue;
	EUntyped(e:haxe.macro.Expr);
	EThrow(e:haxe.macro.Expr);
	ECast(e:haxe.macro.Expr, t:Null<haxe.macro.ComplexType>);
	EDisplay(e:haxe.macro.Expr, displayKind:haxe.macro.DisplayKind);
	EDisplayNew(t:haxe.macro.TypePath);
	ETernary(econd:haxe.macro.Expr, eif:haxe.macro.Expr, eelse:haxe.macro.Expr);
	ECheckType(e:haxe.macro.Expr, t:haxe.macro.ComplexType);
	EMeta(s:haxe.macro.MetadataEntry, e:haxe.macro.Expr);
}
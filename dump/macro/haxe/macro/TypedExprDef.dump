enum haxe.macro.TypedExprDef {
	TConst(c:haxe.macro.TConstant);
	TLocal(v:haxe.macro.TVar);
	TArray(e1:haxe.macro.TypedExpr, e2:haxe.macro.TypedExpr);
	TBinop(op:haxe.macro.Binop, e1:haxe.macro.TypedExpr, e2:haxe.macro.TypedExpr);
	TField(e:haxe.macro.TypedExpr, fa:haxe.macro.FieldAccess);
	TTypeExpr(m:haxe.macro.ModuleType);
	TParenthesis(e:haxe.macro.TypedExpr);
	TObjectDecl(fields:Array<{ name : String, expr : haxe.macro.TypedExpr }>);
	TArrayDecl(el:Array<haxe.macro.TypedExpr>);
	TCall(e:haxe.macro.TypedExpr, el:Array<haxe.macro.TypedExpr>);
	TNew(c:haxe.macro.Ref<haxe.macro.ClassType>, params:Array<haxe.macro.Type>, el:Array<haxe.macro.TypedExpr>);
	TUnop(op:haxe.macro.Unop, postFix:Bool, e:haxe.macro.TypedExpr);
	TFunction(tfunc:haxe.macro.TFunc);
	TVar(v:haxe.macro.TVar, expr:Null<haxe.macro.TypedExpr>);
	TBlock(el:Array<haxe.macro.TypedExpr>);
	TFor(v:haxe.macro.TVar, e1:haxe.macro.TypedExpr, e2:haxe.macro.TypedExpr);
	TIf(econd:haxe.macro.TypedExpr, eif:haxe.macro.TypedExpr, eelse:Null<haxe.macro.TypedExpr>);
	TWhile(econd:haxe.macro.TypedExpr, e:haxe.macro.TypedExpr, normalWhile:Bool);
	TSwitch(e:haxe.macro.TypedExpr, cases:Array<{ values : Array<haxe.macro.TypedExpr>, expr : haxe.macro.TypedExpr }>, edef:Null<haxe.macro.TypedExpr>);
	TTry(e:haxe.macro.TypedExpr, catches:Array<{ v : haxe.macro.TVar, expr : haxe.macro.TypedExpr }>);
	TReturn(e:Null<haxe.macro.TypedExpr>);
	TBreak;
	TContinue;
	TThrow(e:haxe.macro.TypedExpr);
	TCast(e:haxe.macro.TypedExpr, m:Null<haxe.macro.ModuleType>);
	TMeta(m:haxe.macro.MetadataEntry, e1:haxe.macro.TypedExpr);
	TEnumParameter(e1:haxe.macro.TypedExpr, ef:haxe.macro.EnumField, index:Int);
	TEnumIndex(e1:haxe.macro.TypedExpr);
	TIdent(s:String);
}
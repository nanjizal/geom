class haxe.macro.TypedExprTools {

	static function with(e:haxe.macro.TypedExpr, edef:Null<haxe.macro.TypedExprDef> = null, t:Null<haxe.macro.Type> = null) {
		return {expr : if (edef == null) {
			e.expr;
		} else {
			edef;
		}, pos : e.pos, t : if (t == null) {
			e.t;
		} else {
			t;
		}};
	}

	public static function map(e:haxe.macro.TypedExpr, f:haxe.macro.TypedExpr -> haxe.macro.TypedExpr) {
		return @:ast(switch (e.expr) {
	case TConst(_) | TLocal(_) | TBreak | TContinue | TTypeExpr(_) | TIdent(_):
		e;	
	case TArray(e1, e2):
		with(e, TArray(f(e1), f(e2)));	
	case TBinop(op, e1, e2):
		with(e, TBinop(op, f(e1), f(e2)));	
	case TFor(v, e1, e2):
		with(e, TFor(v, f(e1), f(e2)));	
	case TWhile(e1, e2, flag):
		with(e, TWhile(f(e1), f(e2), flag));	
	case TThrow(e1):
		with(e, TThrow(f(e1)));	
	case TEnumParameter(e1, ef, i):
		with(e, TEnumParameter(f(e1), ef, i));	
	case TEnumIndex(e1):
		with(e, TEnumIndex(f(e1)));	
	case TField(e1, fa):
		with(e, TField(f(e1), fa));	
	case TParenthesis(e1):
		with(e, TParenthesis(f(e1)));	
	case TUnop(op, pre, e1):
		with(e, TUnop(op, pre, f(e1)));	
	case TArrayDecl(el):
		with(e, TArrayDecl(el.map(f)));	
	case TNew(t, pl, el):
		with(e, TNew(t, pl, el.map(f)));	
	case TBlock(el):
		with(e, TBlock(el.map(f)));	
	case TObjectDecl(fl):
		with(e, TObjectDecl(fl.map(function(field) return { name : field.name, expr : f(field.expr) })));	
	case TCall(e1, el):
		with(e, TCall(f(e1), el.map(f)));	
	case TVar(v, eo):
		with(e, TVar(v, eo == null ? null : f(eo)));	
	case TFunction(fu):
		with(e, TFunction({ t : fu.t, args : fu.args, expr : f(fu.expr) }));	
	case TIf(e1, e2, e3):
		with(e, TIf(f(e1), f(e2), e3 == null ? null : f(e3)));	
	case TSwitch(e1, cases, e2):
		with(e, TSwitch(f(e1), cases.map(function(c) return { values : c.values.map(f), expr : f(c.expr) }), e2 == null ? null : f(e2)));	
	case TTry(e1, catches):
		with(e, TTry(f(e1), catches.map(function(c) return { v : c.v, expr : f(c.expr) })));	
	case TReturn(e1):
		with(e, TReturn(e1 == null ? null : f(e1)));	
	case TCast(e1, mt):
		with(e, TCast(f(e1), mt));	
	case TMeta(m, e1):
		with(e, TMeta(m, f(e1)));	
}) {
			var ` = e.expr;
			switch (@:exhaustive enumIndex `) {
				case 0: {
					var `27 = `[0];
					{
						e;
					};
				};
				case 1: {
					var `48 = `[0];
					{
						e;
					};
				};
				case 2: {
					var `29 = `[1];
					var `28 = `[0];
					{
						var e2 = `29;
						var e1 = `28;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TArray(f(e1), f(e2)), null);
						};
					};
				};
				case 3: {
					var `13 = `[2];
					var `12 = `[1];
					var `11 = `[0];
					{
						var e2 = `13;
						var e1 = `12;
						var op = `11;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TBinop(op, f(e1), f(e2)), null);
						};
					};
				};
				case 4: {
					var `32 = `[1];
					var `31 = `[0];
					{
						var fa = `32;
						var e1 = `31;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TField(f(e1), fa), null);
						};
					};
				};
				case 5: {
					var `10 = `[0];
					{
						e;
					};
				};
				case 6: {
					var `14 = `[0];
					{
						var e1 = `14;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TParenthesis(f(e1)), null);
						};
					};
				};
				case 7: {
					var `4 = `[0];
					{
						var fl = `4;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TObjectDecl({
								var ` = [];
								{
									var `1 = 0;
									var `2 = fl;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(function(field:{ name : String, expr : haxe.macro.TypedExpr }) {
											return {name : field.name, expr : f(field.expr)};
										}(v));
									};
								};
								`;
							}), null);
						};
					};
				};
				case 8: {
					var `49 = `[0];
					{
						var el = `49;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TArrayDecl({
								var ` = [];
								{
									var `1 = 0;
									var `2 = el;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(f(v));
									};
								};
								`;
							}), null);
						};
					};
				};
				case 9: {
					var `40 = `[1];
					var `39 = `[0];
					{
						var el = `40;
						var e1 = `39;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TCall(f(e1), {
								var ` = [];
								{
									var `1 = 0;
									var `2 = el;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(f(v));
									};
								};
								`;
							}), null);
						};
					};
				};
				case 10: {
					var `7 = `[2];
					var `6 = `[1];
					var `5 = `[0];
					{
						var el = `7;
						var pl = `6;
						var t = `5;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TNew(t, pl, {
								var ` = [];
								{
									var `1 = 0;
									var `2 = el;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(f(v));
									};
								};
								`;
							}), null);
						};
					};
				};
				case 11: {
					var `38 = `[2];
					var `37 = `[1];
					var `36 = `[0];
					{
						var e1 = `38;
						var pre = `37;
						var op = `36;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TUnop(op, pre, f(e1)), null);
						};
					};
				};
				case 12: {
					var `50 = `[0];
					{
						var fu = `50;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TFunction({t : fu.t, args : fu.args, expr : f(fu.expr)}), null);
						};
					};
				};
				case 13: {
					var `9 = `[1];
					var `8 = `[0];
					{
						var eo = `9;
						var v = `8;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TVar(v, if (eo == null) {
								null;
							} else {
								f(eo);
							}), null);
						};
					};
				};
				case 14: {
					var `47 = `[0];
					{
						var el = `47;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TBlock({
								var ` = [];
								{
									var `1 = 0;
									var `2 = el;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(f(v));
									};
								};
								`;
							}), null);
						};
					};
				};
				case 15: {
					var `25 = `[2];
					var `24 = `[1];
					var `23 = `[0];
					{
						var e2 = `25;
						var e1 = `24;
						var v = `23;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TFor(v, f(e1), f(e2)), null);
						};
					};
				};
				case 16: {
					var `20 = `[2];
					var `19 = `[1];
					var `18 = `[0];
					{
						var e3 = `20;
						var e2 = `19;
						var e1 = `18;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TIf(f(e1), f(e2), if (e3 == null) {
								null;
							} else {
								f(e3);
							}), null);
						};
					};
				};
				case 17: {
					var `35 = `[2];
					var `34 = `[1];
					var `33 = `[0];
					{
						var flag = `35;
						var e2 = `34;
						var e1 = `33;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TWhile(f(e1), f(e2), flag), null);
						};
					};
				};
				case 18: {
					var `43 = `[2];
					var `42 = `[1];
					var `41 = `[0];
					{
						var e2 = `43;
						var cases = `42;
						var e1 = `41;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TSwitch(f(e1), {
								var ` = [];
								{
									var `1 = 0;
									var `2 = cases;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(function(c:{ values : Array<haxe.macro.TypedExpr>, expr : haxe.macro.TypedExpr }) {
											return {values : {
												var _this = c.values;
												{
													var ` = [];
													{
														var `1 = 0;
														var `2 = _this;
														while ((`1 < `2.length)) {
															var v = `2[`1];
															++ `1;
															`.push(f(v));
														};
													};
													`;
												};
											}, expr : f(c.expr)};
										}(v));
									};
								};
								`;
							}, if (e2 == null) {
								null;
							} else {
								f(e2);
							}), null);
						};
					};
				};
				case 19: {
					var `22 = `[1];
					var `21 = `[0];
					{
						var catches = `22;
						var e1 = `21;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TTry(f(e1), {
								var ` = [];
								{
									var `1 = 0;
									var `2 = catches;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(function(c:{ v : haxe.macro.TVar, expr : haxe.macro.TypedExpr }) {
											return {v : c.v, expr : f(c.expr)};
										}(v));
									};
								};
								`;
							}), null);
						};
					};
				};
				case 20: {
					var `44 = `[0];
					{
						var e1 = `44;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TReturn(if (e1 == null) {
								null;
							} else {
								f(e1);
							}), null);
						};
					};
				};
				case 21, 22: {
					{
						e;
					};
				};
				case 23: {
					var `30 = `[0];
					{
						var e1 = `30;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TThrow(f(e1)), null);
						};
					};
				};
				case 24: {
					var `16 = `[1];
					var `15 = `[0];
					{
						var mt = `16;
						var e1 = `15;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TCast(f(e1), mt), null);
						};
					};
				};
				case 25: {
					var `46 = `[1];
					var `45 = `[0];
					{
						var e1 = `46;
						var m = `45;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TMeta(m, f(e1)), null);
						};
					};
				};
				case 26: {
					var `3 = `[2];
					var `2 = `[1];
					var `1 = `[0];
					{
						var i = `3;
						var ef = `2;
						var e1 = `1;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TEnumParameter(f(e1), ef, i), null);
						};
					};
				};
				case 27: {
					var `26 = `[0];
					{
						var e1 = `26;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TEnumIndex(f(e1)), null);
						};
					};
				};
				case 28: {
					var `17 = `[0];
					{
						e;
					};
				};
			};
		};
	}

	public static function iter(e:haxe.macro.TypedExpr, f:haxe.macro.TypedExpr -> Void) {
		@:ast(switch (e.expr) {
	case TConst(_) | TLocal(_) | TBreak | TContinue | TTypeExpr(_) | TIdent(_):
	case TArray(e1, e2) | TBinop(_, e1, e2) | TFor(_, e1, e2) | TWhile(e1, e2, _):
		f(e1);
		f(e2);	
	case TThrow(e1) | TEnumParameter(e1, _, _) | TEnumIndex(e1) | TField(e1, _) | TParenthesis(e1) | TUnop(_, _, e1) | TCast(e1, _) | TMeta(_, e1):
		f(e1);	
	case TArrayDecl(el) | TNew(_, _, el) | TBlock(el):
		for (e  in  el) f(e);	
	case TObjectDecl(fl):
		for (field  in  fl) f(field.expr);	
	case TCall(e1, el):
		f(e1);
		for (e  in  el) f(e);	
	case TVar(_, e1) | TReturn(e1):
		if (e1 != null) f(e1);	
	case TFunction(fu):
		f(fu.expr);	
	case TIf(e1, e2, e3):
		f(e1);
		f(e2);
		if (e3 != null) f(e3);	
	case TSwitch(e1, cases, e2):
		f(e1);
		for (c  in  cases) {
			for (v  in  c.values) f(v);
			f(c.expr);
		};
		if (e2 != null) f(e2);	
	case TTry(e1, catches):
		f(e1);
		for (c  in  catches) f(c.expr);	
}) {
			var ` = e.expr;
			switch (@:exhaustive enumIndex `) {
				case 0: {
					var `27 = `[0];
					{};
				};
				case 1: {
					var `48 = `[0];
					{};
				};
				case 2: {
					var `29 = `[1];
					var `28 = `[0];
					{
						var e2 = `29;
						var e1 = `28;
						{
							f(e1);
							f(e2);
						};
					};
				};
				case 3: {
					var `13 = `[2];
					var `12 = `[1];
					var `11 = `[0];
					{
						var e2 = `13;
						var e1 = `12;
						{
							f(e1);
							f(e2);
						};
					};
				};
				case 4: {
					var `32 = `[1];
					var `31 = `[0];
					{
						var e1 = `31;
						{
							f(e1);
						};
					};
				};
				case 5: {
					var `10 = `[0];
					{};
				};
				case 6: {
					var `14 = `[0];
					{
						var e1 = `14;
						{
							f(e1);
						};
					};
				};
				case 7: {
					var `4 = `[0];
					{
						var fl = `4;
						{
							{
								var ` = 0;
								while (` < fl.length) {
									var field = fl[`];
									++ `;
									f(field.expr);
								};
							};
						};
					};
				};
				case 8: {
					var `49 = `[0];
					{
						var el = `49;
						{
							{
								var ` = 0;
								while (` < el.length) {
									var e = el[`];
									++ `;
									f(e);
								};
							};
						};
					};
				};
				case 9: {
					var `42 = `[1];
					var `41 = `[0];
					{
						var el = `42;
						var e1 = `41;
						{
							f(e1);
							{
								var ` = 0;
								while (` < el.length) {
									var e = el[`];
									++ `;
									f(e);
								};
							};
						};
					};
				};
				case 10: {
					var `7 = `[2];
					var `6 = `[1];
					var `5 = `[0];
					{
						var el = `7;
						{
							{
								var ` = 0;
								while (` < el.length) {
									var e = el[`];
									++ `;
									f(e);
								};
							};
						};
					};
				};
				case 11: {
					var `38 = `[2];
					var `37 = `[1];
					var `36 = `[0];
					{
						var e1 = `38;
						{
							f(e1);
						};
					};
				};
				case 12: {
					var `50 = `[0];
					{
						var fu = `50;
						{
							f(fu.expr);
						};
					};
				};
				case 13: {
					var `9 = `[1];
					var `8 = `[0];
					{
						var e1 = `9;
						{
							if (e1 != null) {
								f(e1);
							};
						};
					};
				};
				case 14: {
					var `47 = `[0];
					{
						var el = `47;
						{
							{
								var ` = 0;
								while (` < el.length) {
									var e = el[`];
									++ `;
									f(e);
								};
							};
						};
					};
				};
				case 15: {
					var `25 = `[2];
					var `24 = `[1];
					var `23 = `[0];
					{
						var e2 = `25;
						var e1 = `24;
						{
							f(e1);
							f(e2);
						};
					};
				};
				case 16: {
					var `20 = `[2];
					var `19 = `[1];
					var `18 = `[0];
					{
						var e3 = `20;
						var e2 = `19;
						var e1 = `18;
						{
							f(e1);
							f(e2);
							if (e3 != null) {
								f(e3);
							};
						};
					};
				};
				case 17: {
					var `35 = `[2];
					var `34 = `[1];
					var `33 = `[0];
					{
						var e2 = `34;
						var e1 = `33;
						{
							f(e1);
							f(e2);
						};
					};
				};
				case 18: {
					var `46 = `[2];
					var `45 = `[1];
					var `44 = `[0];
					{
						var e2 = `46;
						var cases = `45;
						var e1 = `44;
						{
							f(e1);
							{
								var ` = 0;
								while (` < cases.length) {
									var c = cases[`];
									++ `;
									{
										var ` = 0;
										var `1 = c.values;
										while (` < `1.length) {
											var v = `1[`];
											++ `;
											f(v);
										};
									};
									f(c.expr);
								};
							};
							if (e2 != null) {
								f(e2);
							};
						};
					};
				};
				case 19: {
					var `22 = `[1];
					var `21 = `[0];
					{
						var catches = `22;
						var e1 = `21;
						{
							f(e1);
							{
								var ` = 0;
								while (` < catches.length) {
									var c = catches[`];
									++ `;
									f(c.expr);
								};
							};
						};
					};
				};
				case 20: {
					var `43 = `[0];
					{
						var e1 = `43;
						{
							if (e1 != null) {
								f(e1);
							};
						};
					};
				};
				case 21, 22: {
					{};
				};
				case 23: {
					var `30 = `[0];
					{
						var e1 = `30;
						{
							f(e1);
						};
					};
				};
				case 24: {
					var `16 = `[1];
					var `15 = `[0];
					{
						var e1 = `15;
						{
							f(e1);
						};
					};
				};
				case 25: {
					var `40 = `[1];
					var `39 = `[0];
					{
						var e1 = `40;
						{
							f(e1);
						};
					};
				};
				case 26: {
					var `3 = `[2];
					var `2 = `[1];
					var `1 = `[0];
					{
						var e1 = `1;
						{
							f(e1);
						};
					};
				};
				case 27: {
					var `26 = `[0];
					{
						var e1 = `26;
						{
							f(e1);
						};
					};
				};
				case 28: {
					var `17 = `[0];
					{};
				};
			};
		};
	}

	public static function mapWithType(e:haxe.macro.TypedExpr, f:haxe.macro.TypedExpr -> haxe.macro.TypedExpr, ft:haxe.macro.Type -> haxe.macro.Type, fv:haxe.macro.TVar -> haxe.macro.TVar) {
		return @:ast(switch (e.expr) {
	case TConst(_) | TBreak | TContinue | TTypeExpr(_) | TIdent(_):
		with(e, ft(e.t));	
	case TLocal(v):
		with(e, TLocal(fv(v)), ft(e.t));	
	case TArray(e1, e2):
		with(e, TArray(f(e1), f(e2)), ft(e.t));	
	case TBinop(op, e1, e2):
		with(e, TBinop(op, f(e1), f(e2)), ft(e.t));	
	case TFor(v, e1, e2):
		with(e, TFor(fv(v), f(e1), f(e2)), ft(e.t));	
	case TWhile(e1, e2, flag):
		with(e, TWhile(f(e1), f(e2), flag), ft(e.t));	
	case TThrow(e1):
		with(e, TThrow(f(e1)), ft(e.t));	
	case TEnumParameter(e1, ef, i):
		with(e, TEnumParameter(f(e1), ef, i), ft(e.t));	
	case TEnumIndex(e1):
		with(e, TEnumIndex(f(e1)), ft(e.t));	
	case TField(e1, fa):
		with(e, TField(f(e1), fa), ft(e.t));	
	case TParenthesis(e1):
		with(e, TParenthesis(e1), ft(e.t));	
	case TUnop(op, pre, e1):
		with(e, TUnop(op, pre, f(e1)), ft(e.t));	
	case TArrayDecl(el):
		with(e, TArrayDecl(el.map(f)), ft(e.t));	
	case TNew(t, pl, el):
		with(e, TNew(t, pl, el.map(f)), ft(e.t));	
	case TBlock(el):
		with(e, TBlock(el.map(f)), ft(e.t));	
	case TObjectDecl(fl):
		with(e, TObjectDecl(fl.map(function(field) return { name : field.name, expr : f(field.expr) })), ft(e.t));	
	case TCall(e1, el):
		with(e, TCall(f(e1), el.map(f)), ft(e.t));	
	case TVar(v, eo):
		with(e, TVar(fv(v), eo == null ? null : f(eo)), ft(e.t));	
	case TFunction(fu):
		with(e, TFunction({ t : ft(fu.t), args : fu.args.map(function(arg) return { v : fv(arg.v), value : arg.value }), expr : f(fu.expr) }), ft(e.t));	
	case TIf(e1, e2, e3):
		with(e, TIf(f(e1), f(e2), e3 == null ? null : f(e3)), ft(e.t));	
	case TSwitch(e1, cases, e2):
		with(e, TSwitch(f(e1), cases.map(function(c) return { values : c.values.map(f), expr : f(c.expr) }), e2 == null ? null : f(e2)), ft(e.t));	
	case TTry(e1, catches):
		with(e, TTry(f(e1), catches.map(function(c) return { v : fv(c.v), expr : f(c.expr) })), ft(e.t));	
	case TReturn(e1):
		with(e, TReturn(e1 == null ? null : f(e1)), ft(e.t));	
	case TCast(e1, mt):
		with(e, TCast(f(e1), mt), ft(e.t));	
	case TMeta(m, e1):
		with(e, TMeta(m, f(e1)), ft(e.t));	
}) {
			var ` = e.expr;
			switch (@:exhaustive enumIndex `) {
				case 0: {
					var `27 = `[0];
					{
						haxe.macro.TypedExprTools.with(e, null, ft(e.t));
					};
				};
				case 1: {
					var `48 = `[0];
					{
						var v = `48;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TLocal(fv(v)), ft(e.t));
						};
					};
				};
				case 2: {
					var `29 = `[1];
					var `28 = `[0];
					{
						var e2 = `29;
						var e1 = `28;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TArray(f(e1), f(e2)), ft(e.t));
						};
					};
				};
				case 3: {
					var `13 = `[2];
					var `12 = `[1];
					var `11 = `[0];
					{
						var e2 = `13;
						var e1 = `12;
						var op = `11;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TBinop(op, f(e1), f(e2)), ft(e.t));
						};
					};
				};
				case 4: {
					var `32 = `[1];
					var `31 = `[0];
					{
						var fa = `32;
						var e1 = `31;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TField(f(e1), fa), ft(e.t));
						};
					};
				};
				case 5: {
					var `10 = `[0];
					{
						haxe.macro.TypedExprTools.with(e, null, ft(e.t));
					};
				};
				case 6: {
					var `14 = `[0];
					{
						var e1 = `14;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TParenthesis(e1), ft(e.t));
						};
					};
				};
				case 7: {
					var `4 = `[0];
					{
						var fl = `4;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TObjectDecl({
								var ` = [];
								{
									var `1 = 0;
									var `2 = fl;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(function(field:{ name : String, expr : haxe.macro.TypedExpr }) {
											return {name : field.name, expr : f(field.expr)};
										}(v));
									};
								};
								`;
							}), ft(e.t));
						};
					};
				};
				case 8: {
					var `49 = `[0];
					{
						var el = `49;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TArrayDecl({
								var ` = [];
								{
									var `1 = 0;
									var `2 = el;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(f(v));
									};
								};
								`;
							}), ft(e.t));
						};
					};
				};
				case 9: {
					var `40 = `[1];
					var `39 = `[0];
					{
						var el = `40;
						var e1 = `39;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TCall(f(e1), {
								var ` = [];
								{
									var `1 = 0;
									var `2 = el;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(f(v));
									};
								};
								`;
							}), ft(e.t));
						};
					};
				};
				case 10: {
					var `7 = `[2];
					var `6 = `[1];
					var `5 = `[0];
					{
						var el = `7;
						var pl = `6;
						var t = `5;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TNew(t, pl, {
								var ` = [];
								{
									var `1 = 0;
									var `2 = el;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(f(v));
									};
								};
								`;
							}), ft(e.t));
						};
					};
				};
				case 11: {
					var `38 = `[2];
					var `37 = `[1];
					var `36 = `[0];
					{
						var e1 = `38;
						var pre = `37;
						var op = `36;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TUnop(op, pre, f(e1)), ft(e.t));
						};
					};
				};
				case 12: {
					var `50 = `[0];
					{
						var fu = `50;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TFunction({t : ft(fu.t), args : {
								var _this = fu.args;
								{
									var ` = [];
									{
										var `1 = 0;
										var `2 = _this;
										while (`1 < `2.length) {
											var v = `2[`1];
											++ `1;
											`.push(function(arg:{ value : Null<haxe.macro.TypedExpr>, v : haxe.macro.TVar }) {
												return {v : fv(arg.v), value : arg.value};
											}(v));
										};
									};
									`;
								};
							}, expr : f(fu.expr)}), ft(e.t));
						};
					};
				};
				case 13: {
					var `9 = `[1];
					var `8 = `[0];
					{
						var eo = `9;
						var v = `8;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TVar(fv(v), if (eo == null) {
								null;
							} else {
								f(eo);
							}), ft(e.t));
						};
					};
				};
				case 14: {
					var `47 = `[0];
					{
						var el = `47;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TBlock({
								var ` = [];
								{
									var `1 = 0;
									var `2 = el;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(f(v));
									};
								};
								`;
							}), ft(e.t));
						};
					};
				};
				case 15: {
					var `25 = `[2];
					var `24 = `[1];
					var `23 = `[0];
					{
						var e2 = `25;
						var e1 = `24;
						var v = `23;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TFor(fv(v), f(e1), f(e2)), ft(e.t));
						};
					};
				};
				case 16: {
					var `20 = `[2];
					var `19 = `[1];
					var `18 = `[0];
					{
						var e3 = `20;
						var e2 = `19;
						var e1 = `18;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TIf(f(e1), f(e2), if (e3 == null) {
								null;
							} else {
								f(e3);
							}), ft(e.t));
						};
					};
				};
				case 17: {
					var `35 = `[2];
					var `34 = `[1];
					var `33 = `[0];
					{
						var flag = `35;
						var e2 = `34;
						var e1 = `33;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TWhile(f(e1), f(e2), flag), ft(e.t));
						};
					};
				};
				case 18: {
					var `43 = `[2];
					var `42 = `[1];
					var `41 = `[0];
					{
						var e2 = `43;
						var cases = `42;
						var e1 = `41;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TSwitch(f(e1), {
								var ` = [];
								{
									var `1 = 0;
									var `2 = cases;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(function(c:{ values : Array<haxe.macro.TypedExpr>, expr : haxe.macro.TypedExpr }) {
											return {values : {
												var _this = c.values;
												{
													var ` = [];
													{
														var `1 = 0;
														var `2 = _this;
														while ((`1 < `2.length)) {
															var v = `2[`1];
															++ `1;
															`.push(f(v));
														};
													};
													`;
												};
											}, expr : f(c.expr)};
										}(v));
									};
								};
								`;
							}, if (e2 == null) {
								null;
							} else {
								f(e2);
							}), ft(e.t));
						};
					};
				};
				case 19: {
					var `22 = `[1];
					var `21 = `[0];
					{
						var catches = `22;
						var e1 = `21;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TTry(f(e1), {
								var ` = [];
								{
									var `1 = 0;
									var `2 = catches;
									while (`1 < `2.length) {
										var v = `2[`1];
										++ `1;
										`.push(function(c:{ v : haxe.macro.TVar, expr : haxe.macro.TypedExpr }) {
											return {v : fv(c.v), expr : f(c.expr)};
										}(v));
									};
								};
								`;
							}), ft(e.t));
						};
					};
				};
				case 20: {
					var `44 = `[0];
					{
						var e1 = `44;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TReturn(if (e1 == null) {
								null;
							} else {
								f(e1);
							}), ft(e.t));
						};
					};
				};
				case 21, 22: {
					{
						haxe.macro.TypedExprTools.with(e, null, ft(e.t));
					};
				};
				case 23: {
					var `30 = `[0];
					{
						var e1 = `30;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TThrow(f(e1)), ft(e.t));
						};
					};
				};
				case 24: {
					var `16 = `[1];
					var `15 = `[0];
					{
						var mt = `16;
						var e1 = `15;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TCast(f(e1), mt), ft(e.t));
						};
					};
				};
				case 25: {
					var `46 = `[1];
					var `45 = `[0];
					{
						var e1 = `46;
						var m = `45;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TMeta(m, f(e1)), ft(e.t));
						};
					};
				};
				case 26: {
					var `3 = `[2];
					var `2 = `[1];
					var `1 = `[0];
					{
						var i = `3;
						var ef = `2;
						var e1 = `1;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TEnumParameter(f(e1), ef, i), ft(e.t));
						};
					};
				};
				case 27: {
					var `26 = `[0];
					{
						var e1 = `26;
						{
							haxe.macro.TypedExprTools.with(e, haxe.macro.TypedExprDef.TEnumIndex(f(e1)), ft(e.t));
						};
					};
				};
				case 28: {
					var `17 = `[0];
					{
						haxe.macro.TypedExprTools.with(e, null, ft(e.t));
					};
				};
			};
		};
	}

	@:value({ pretty : false })
	public static function toString(t:haxe.macro.TypedExpr, pretty:Null<Bool> = false) {
		return haxe.macro.Context.sExpr(t, pretty);
	}
}
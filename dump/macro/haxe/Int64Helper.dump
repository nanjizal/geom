class haxe.Int64Helper {

	public static function parseString(sParam:String) {
		var base = {
			var x = new haxe._Int64.___Int64(10 >> 31, 10);
			var this;
			this = x;
			cast this;
		};
		var current = {
			var x = new haxe._Int64.___Int64(0 >> 31, 0);
			var this;
			this = x;
			cast this;
		};
		var multiplier = {
			var x = new haxe._Int64.___Int64(1 >> 31, 1);
			var this;
			this = x;
			cast this;
		};
		var sIsNegative = false;
		var s = StringTools.trim(sParam);
		if (s.charAt(0) == "-") {
			sIsNegative = true;
			s = s.substring(1, s.length);
		};
		var len = s.length;
		{
			var ` = 0;
			var `1 = len;
			while (` < `1) {
				var i = ` ++;
				var digitInt = s.charCodeAt(len - 1 - i) - 48;
				if (digitInt < 0 || digitInt > 9) {
					throw throw haxe.Exception.thrown("NumberFormatError");
				};
				if (digitInt != 0) {
					var digit = {
						var x = new haxe._Int64.___Int64(digitInt >> 31, digitInt);
						var this;
						this = x;
						cast this;
					};
					if (sIsNegative) {
						current = {
							var b = {
								var mask = 65535;
								var al = cast multiplier.low & mask;
								var ah = cast multiplier.low >>> 16;
								var bl = cast digit.low & mask;
								var bh = cast digit.low >>> 16;
								var p00 = al * bl;
								var p10 = ah * bl;
								var p01 = al * bh;
								var p11 = ah * bh;
								var low = p00;
								var high = cast cast cast cast p11 + (cast p01 >>> 16) + (cast p10 >>> 16);
								p01 = p01 << 16;
								low = cast cast low + cast p01;
								if ((haxe._Int32.Int32_Impl_.ucompare(low, p01) < 0)) cast {
									var ret = high ++;
									high = cast high;
									ret;
								};
								p10 = p10 << 16;
								low = cast cast low + cast p10;
								if ((haxe._Int32.Int32_Impl_.ucompare(low, p10) < 0)) cast {
									var ret = high ++;
									high = cast high;
									ret;
								};
								high = cast cast high + (cast cast cast cast multiplier.low * cast digit.high + cast cast multiplier.high * cast digit.low);
								{
									var x = new haxe._Int64.___Int64(high, low);
									var this;
									this = x;
									cast this;
								};
							};
							var high = cast (cast cast current.high - cast cast b.high);
							var low = cast (cast cast current.low - cast cast b.low);
							if (haxe._Int32.Int32_Impl_.ucompare(cast current.low, cast b.low) < 0) {
								cast {
									var ret = high --;
									high = (cast high);
									ret;
								};
							};
							{
								var x = new haxe._Int64.___Int64(high, low);
								var this;
								this = x;
								cast this;
							};
						};
						if (! cast cast current.high < 0) {
							throw throw haxe.Exception.thrown("NumberFormatError: Underflow");
						};
					} else {
						current = {
							var b = {
								var mask = 65535;
								var al = cast multiplier.low & mask;
								var ah = cast multiplier.low >>> 16;
								var bl = cast digit.low & mask;
								var bh = cast digit.low >>> 16;
								var p00 = al * bl;
								var p10 = ah * bl;
								var p01 = al * bh;
								var p11 = ah * bh;
								var low = p00;
								var high = cast cast cast cast p11 + (cast p01 >>> 16) + (cast p10 >>> 16);
								p01 = p01 << 16;
								low = cast cast low + cast p01;
								if ((haxe._Int32.Int32_Impl_.ucompare(low, p01) < 0)) cast {
									var ret = high ++;
									high = cast high;
									ret;
								};
								p10 = p10 << 16;
								low = cast cast low + cast p10;
								if ((haxe._Int32.Int32_Impl_.ucompare(low, p10) < 0)) cast {
									var ret = high ++;
									high = cast high;
									ret;
								};
								high = cast cast high + (cast cast cast cast multiplier.low * cast digit.high + cast cast multiplier.high * cast digit.low);
								{
									var x = new haxe._Int64.___Int64(high, low);
									var this;
									this = x;
									cast this;
								};
							};
							var high = cast (cast cast current.high + cast cast b.high);
							var low = cast (cast cast current.low + cast cast b.low);
							if (haxe._Int32.Int32_Impl_.ucompare(low, cast current.low) < 0) {
								cast {
									var ret = high ++;
									high = (cast high);
									ret;
								};
							};
							{
								var x = new haxe._Int64.___Int64(high, low);
								var this;
								this = x;
								cast this;
							};
						};
						if (cast cast current.high < 0) {
							throw throw haxe.Exception.thrown("NumberFormatError: Overflow");
						};
					};
				};
				multiplier = {
					var mask = 65535;
					var al = cast cast multiplier.low & mask;
					var ah = cast cast multiplier.low >>> 16;
					var bl = cast cast base.low & mask;
					var bh = cast cast base.low >>> 16;
					var p00 = cast al * bl;
					var p10 = cast ah * bl;
					var p01 = cast al * bh;
					var p11 = cast ah * bh;
					var low = p00;
					var high = cast (cast cast cast p11 + (cast p01 >>> 16) + cast p10 >>> 16);
					p01 = cast p01 << 16;
					low = cast (cast low + cast p01);
					if (haxe._Int32.Int32_Impl_.ucompare(low, p01) < 0) {
						cast {
							var ret = high ++;
							high = (cast high);
							ret;
						};
					};
					p10 = cast p10 << 16;
					low = cast (cast low + cast p10);
					if (haxe._Int32.Int32_Impl_.ucompare(low, p10) < 0) {
						cast {
							var ret = high ++;
							high = (cast high);
							ret;
						};
					};
					high = cast (cast high + cast cast cast cast multiplier.low * cast base.high + cast cast multiplier.high * cast base.low);
					{
						var x = new haxe._Int64.___Int64(high, low);
						var this;
						this = x;
						cast this;
					};
				};
			};
		};
		return current;
	}

	public static function fromFloat(f:Float) {
		if (Math.isNaN(f) || ! Math.isFinite(f)) {
			throw throw haxe.Exception.thrown("Number is NaN or Infinite");
		};
		var noFractions = f - (f % 1);
		if (noFractions > 9007199254740991) {
			throw throw haxe.Exception.thrown("Conversion overflow");
		};
		if (noFractions < -9007199254740991) {
			throw throw haxe.Exception.thrown("Conversion underflow");
		};
		var result = {
			var x = new haxe._Int64.___Int64(0 >> 31, 0);
			var this;
			this = x;
			cast this;
		};
		var neg = noFractions < 0;
		var rest = if (neg) {
			- noFractions;
		} else {
			noFractions;
		};
		var i = 0;
		while (rest >= 1) {
			var curr = rest % 2;
			rest = rest / 2;
			if (curr >= 1) {
				result = {
					var b = {
						var a = {
							var x = new haxe._Int64.___Int64(0, 1);
							var this;
							this = x;
							cast this;
						};
						var b = i;
						b &= 63;
						if ((b == 0)) {
							var high = cast a.high;
							var low = cast a.low;
							var x = new haxe._Int64.___Int64(high, low);
							var this;
							this = x;
							cast this;
						} else if ((b < 32)) {
							var high = cast a.high << b | cast a.low >>> 32 - b;
							var low = cast a.low << b;
							var x = new haxe._Int64.___Int64(high, low);
							var this;
							this = x;
							cast this;
						} else {
							var high = cast a.low << b - 32;
							var x = new haxe._Int64.___Int64(high, 0);
							var this;
							this = x;
							cast this;
						};
					};
					var high = cast (cast cast result.high + cast cast b.high);
					var low = cast (cast cast result.low + cast cast b.low);
					if (haxe._Int32.Int32_Impl_.ucompare(low, cast result.low) < 0) {
						cast {
							var ret = high ++;
							high = (cast high);
							ret;
						};
					};
					{
						var x = new haxe._Int64.___Int64(high, low);
						var this;
						this = x;
						cast this;
					};
				};
			};
			i ++;
		};
		if (neg) {
			result = {
				var high = ~ cast result.high;
				var low = cast (~ cast cast result.low + 1);
				if (cast low == 0) {
					cast {
						var ret = high ++;
						high = (cast high);
						ret;
					};
				};
				{
					var x = new haxe._Int64.___Int64(high, low);
					var this;
					this = x;
					cast this;
				};
			};
		};
		return result;
	}
}
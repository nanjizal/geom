class hx.doctest.DocTestGenerator {

	@:value({ }) @:keep
	static var __static_init:{ } = {};

	@:value(Context.defined("lua") ? 30 : 100)
	static var MAX_ASSERTIONS_PER_TEST_METHOD(default,never):Int = if (haxe.macro.Context.defined("lua")) {
		30;
	} else {
		100;
	};

	@:has_untyped @:value({ docTestNextLineIdentifier : "* ...", docTestIdentifier : "* >>>", srcFilePathPattern : ".+\\.hx$", srcFolder : "src" })
	public static function generateDocTests(srcFolder:String = "src", srcFilePathPattern:String = ".+\\.hx$", docTestIdentifier:String = "* >>>", docTestNextLineIdentifier:String = "* ...") {
		var doctestAdapter = hx.doctest.DocTestGenerator.getDocTestAdapter();
		var contextFields = haxe.macro.Context.getBuildFields();
		haxe.macro.Context.getLocalClass().get().meta.add(":keep", [], haxe.macro.Context.currentPos());
		var totalAssertionsCount = [0];
		var parser = new hscript.Parser();
		var compilerConditions = new Array();
		hx.doctest.internal.Logger.log(hx.doctest.internal.Level.INFO, "Activated via @:build on [" + haxe.macro.Context.getLocalClass().get().module + "]", null, {fileName : "/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", lineNumber : 66, className : "hx.doctest.DocTestGenerator", methodName : "generateDocTests"});
		hx.doctest.internal.Logger.log(hx.doctest.internal.Level.INFO, "Generating test cases for test framework [" + doctestAdapter.getFrameworkName() + "]...", null, {fileName : "/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", lineNumber : 67, className : "hx.doctest.DocTestGenerator", methodName : "generateDocTests"});
		hx.doctest.internal.DocTestUtils.walkDirectory(srcFolder, new EReg(srcFilePathPattern, ""), function(srcFilePath:String) {
			var src = new hx.doctest.internal.SourceFile(srcFilePath, docTestIdentifier, docTestNextLineIdentifier);
			var testMethodsCount = 0;
			var testMethodAssertions = new Array();
			while (src.nextLine()) {
				@:ast(switch (src.currentLine) {
	case DocTestAssertion(assertion):
		if (compilerConditions.indexOf(false) > -1) continue;
		var doctestLineFQ = new EReg("(^|[\\s(=<>!:])" + src.haxeModuleName + "(\\s?[(.<=])", "g").replace(assertion.expression, "$1" + src.haxeModuleFQName + "$2");
		totalAssertionsCount++;
		if (assertion.expression.indexOf(" === ") > -1) {
			var left = doctestLineFQ.substringBeforeLast(" === ").trim();
			var right = doctestLineFQ.substringAfterLast(" === ").trim();
			var leftExpr:Expr = try {
				Context.parse(left, Context.currentPos());
			} catch(ex:Dynamic) {
				testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse left side: $ex"));
				continue;
			};
			var rightExpr:Expr = try {
				Context.parse(right, Context.currentPos());
			} catch(ex:Dynamic) {
				testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse right side: $ex"));
				continue;
			};
			var testSuccessExpr = doctestAdapter.generateTestSuccess(assertion);
			var testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` not same instance as `$right`.");
			testMethodAssertions.push(({ expr : EBlock([{ expr : EVars([{ name : "left", type : null, expr : leftExpr, isFinal : false }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4766, 4787) }, { expr : EVars([{ name : "right", type : null, expr : rightExpr, isFinal : false }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4820, 4843) }, { expr : EIf({ expr : EBinop(OpEq, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4880, 4884) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4888, 4893) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4880, 4893) }, testSuccessExpr, testFailedExpr), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4876, 5037) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4732, 5068) } : haxe.macro.Expr));
		} else if (assertion.expression.indexOf(" !== ") > -1) {
			var left = doctestLineFQ.substringBeforeLast(" !== ").trim();
			var right = doctestLineFQ.substringAfterLast(" !== ").trim();
			var leftExpr:Expr = try {
				Context.parse(left, Context.currentPos());
			} catch(ex:Dynamic) {
				testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse left side: $ex"));
				continue;
			};
			var rightExpr:Expr = try {
				Context.parse(right, Context.currentPos());
			} catch(ex:Dynamic) {
				testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse right side: $ex"));
				continue;
			};
			var testSuccessExpr = doctestAdapter.generateTestSuccess(assertion);
			var testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is same instance right side.");
			testMethodAssertions.push(({ expr : EBlock([{ expr : EVars([{ name : "left", type : null, expr : leftExpr, isFinal : false }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6528, 6549) }, { expr : EVars([{ name : "right", type : null, expr : rightExpr, isFinal : false }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6582, 6605) }, { expr : EIf({ expr : EBinop(OpNotEq, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6642, 6646) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6650, 6655) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6642, 6655) }, testSuccessExpr, testFailedExpr), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6638, 6799) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6494, 6830) } : haxe.macro.Expr));
		} else if (assertion.expression.indexOf(" throws ") > -1) {
			var left = doctestLineFQ.substringBeforeLast(" throws ").trim();
			var right = doctestLineFQ.substringAfterLast(" throws ").trim();
			var leftExpr:Expr = try {
				Context.parse(left, Context.currentPos());
			} catch(ex:Dynamic) {
				testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse left side: $ex"));
				continue;
			};
			var rightExpr:Expr = right == "nothing" ? ({ expr : EConst(CString("nothing", DoubleQuotes)), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 7649, 7658) } : haxe.macro.Expr) : try {
				Context.parse(right, Context.currentPos());
			} catch(ex:Dynamic) {
				testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse right side: $ex"));
				continue;
			};
			var testSuccessExpr = doctestAdapter.generateTestSuccess(assertion);
			var testFailedExpr = doctestAdapter.generateTestFail(assertion, "Expected `$right` but was `$left`.");
			testMethodAssertions.push(({ expr : EBlock([{ expr : EVars([{ name : "left", type : TPath({ pack : [], name : "Dynamic", params : [] }), expr : { expr : EConst(CString("nothing", DoubleQuotes)), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8346, 8355) }, isFinal : false }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8327, 8356) }, { expr : ETry({ expr : EBlock([leftExpr]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8393, 8407) }, [{ name : "ex", type : TPath({ pack : [], name : "Dynamic", params : [] }), expr : { expr : EBinop(OpAssign, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8427, 8431) }, { expr : EConst(CIdent("ex")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8434, 8436) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8427, 8436) } }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8389, 8436) }, { expr : EVars([{ name : "right", type : TPath({ pack : [], name : "Dynamic", params : [] }), expr : null, isFinal : false }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8470, 8488) }, { expr : ETry({ expr : EBlock([{ expr : EBinop(OpAssign, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8527, 8532) }, rightExpr), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8527, 8545) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8525, 8548) }, [{ name : "ex", type : TPath({ pack : [], name : "Dynamic", params : [] }), expr : { expr : EBinop(OpAssign, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8568, 8573) }, { expr : EBinop(OpAdd, { expr : EConst(CString("exception: ", DoubleQuotes)), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8576, 8589) }, { expr : EConst(CIdent("ex")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8592, 8594) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8576, 8594) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8568, 8594) } }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8521, 8594) }, { expr : EIf({ expr : ECall({ expr : EField({ expr : EField({ expr : EField({ expr : EField({ expr : EConst(CIdent("hx")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8635) }, "doctest"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8643) }, "internal"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8652) }, "DocTestUtils"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8665) }, "deepEquals"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8676) }, [{ expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8677, 8681) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8683, 8688) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8689) }, testSuccessExpr, testFailedExpr), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8629, 8833) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8293, 8864) } : haxe.macro.Expr));
		} else {
			var doctestExpr = try {
				Context.parse(doctestLineFQ, Context.currentPos());
			} catch(ex:Dynamic) {
				testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse assertion: $ex"));
				continue;
			};
			var leftExpr:Expr = null;
			var rightExpr:Expr = null;
			var comparator:Binop = null;
			switch (doctestExpr.expr) {
				case EBinop(op, l, r):
					switch (op) {
						case OpEq, OpNotEq, OpLte, OpLt, OpGt, OpGte:
							comparator = op;						
						default:
							testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Assertion is missing one of the valid comparison operators: == != <= < > =>"));
							continue;						
					};
					leftExpr = l;
					rightExpr = r;				
				default:
					testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Assertion is missing one of the valid comparison operators: == != <= < > =>"));
					continue;				
			};
			var comparisonExpr:Expr = null;
			var testSuccessExpr = doctestAdapter.generateTestSuccess(assertion);
			var testFailedExpr = null;
			switch (comparator) {
				case OpEq:
					comparisonExpr = ({ expr : ECall({ expr : EField({ expr : EField({ expr : EField({ expr : EField({ expr : EConst(CIdent("hx")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10932) }, "doctest"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10940) }, "internal"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10949) }, "DocTestUtils"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10962) }, "deepEquals"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10973) }, [{ expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10974, 10978) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10980, 10985) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10986) } : haxe.macro.Expr);
					testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` does not equal `$right`.");				
				case OpNotEq:
					comparisonExpr = ({ expr : EUnop(OpNot, false, { expr : ECall({ expr : EField({ expr : EField({ expr : EField({ expr : EField({ expr : EConst(CIdent("hx")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11239) }, "doctest"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11247) }, "internal"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11256) }, "DocTestUtils"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11269) }, "deepEquals"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11280) }, [{ expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11281, 11285) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11287, 11292) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11293) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11236, 11293) } : haxe.macro.Expr);
					testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` equals `$right`.");				
				case OpLte:
					comparisonExpr = ({ expr : EBinop(OpLte, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11533, 11537) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11541, 11546) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11533, 11546) } : haxe.macro.Expr);
					testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not lower than or equal `$right`.");				
				case OpLt:
					comparisonExpr = ({ expr : EBinop(OpLt, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11805, 11809) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11812, 11817) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11805, 11817) } : haxe.macro.Expr);
					testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not lower than `$right`.");				
				case OpGt:
					comparisonExpr = ({ expr : EBinop(OpGt, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12067, 12071) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12074, 12079) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12067, 12079) } : haxe.macro.Expr);
					testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not greater than `$right`.");				
				case OpGte:
					comparisonExpr = ({ expr : EBinop(OpGte, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12332, 12336) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12340, 12345) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12332, 12345) } : haxe.macro.Expr);
					testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not greater than or equal `$right`.");				
				default:
					throw "Should never be reached";				
			};
			testMethodAssertions.push(({ expr : EBlock([{ expr : EVars([{ name : "left", type : TPath({ pack : [], name : "Dynamic", params : [] }), expr : null, isFinal : false }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12703, 12720) }, { expr : ETry({ expr : EBlock([{ expr : EBinop(OpAssign, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12759, 12763) }, leftExpr), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12759, 12775) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12757, 12778) }, [{ name : "ex", type : TPath({ pack : [], name : "Dynamic", params : [] }), expr : { expr : EBinop(OpAssign, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12798, 12802) }, { expr : EBinop(OpAdd, { expr : EBinop(OpAdd, { expr : EConst(CString("exception: ", DoubleQuotes)), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12805, 12818) }, { expr : EConst(CIdent("ex")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12821, 12823) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12805, 12823) }, { expr : ECall({ expr : EField({ expr : EField({ expr : EField({ expr : EField({ expr : EConst(CIdent("hx")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12828) }, "doctest"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12836) }, "internal"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12845) }, "DocTestUtils"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12858) }, "exceptionStackAsString"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12881) }, []), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12883) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12805, 12883) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12798, 12883) } }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12753, 12883) }, { expr : EVars([{ name : "right", type : TPath({ pack : [], name : "Dynamic", params : [] }), expr : null, isFinal : false }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12917, 12935) }, { expr : ETry({ expr : EBlock([{ expr : EBinop(OpAssign, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12974, 12979) }, rightExpr), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12974, 12992) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12972, 12995) }, [{ name : "ex", type : TPath({ pack : [], name : "Dynamic", params : [] }), expr : { expr : EBinop(OpAssign, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13015, 13020) }, { expr : EBinop(OpAdd, { expr : EBinop(OpAdd, { expr : EConst(CString("exception: ", DoubleQuotes)), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13023, 13036) }, { expr : EConst(CIdent("ex")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13039, 13041) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13023, 13041) }, { expr : ECall({ expr : EField({ expr : EField({ expr : EField({ expr : EField({ expr : EConst(CIdent("hx")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13046) }, "doctest"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13054) }, "internal"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13063) }, "DocTestUtils"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13076) }, "exceptionStackAsString"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13099) }, []), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13101) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13023, 13101) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13015, 13101) } }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12968, 13101) }, { expr : EIf(comparisonExpr, { expr : EBlock([testSuccessExpr]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13157, 13246) }, { expr : EBlock([testFailedExpr]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13252, 13340) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13136, 13340) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12669, 13370) } : haxe.macro.Expr));
		};
		if (testMethodAssertions.length == 0) continue;
		if (testMethodAssertions.length == MAX_ASSERTIONS_PER_TEST_METHOD || Std.is(doctestAdapter, HaxeUnitDocTestAdapter) || Std.is(doctestAdapter, MUnitDocTestAdapter)) {
			testMethodsCount++;
			var testMethodName = "test${src.haxeModuleName}_$testMethodsCount";
			Logger.log(DEBUG, "|--> Generating function \"${testMethodName}()\"...");
			contextFields.push(doctestAdapter.generateTestMethod(testMethodName, "Doc Testing [${src.filePath}] #${testMethodsCount}", testMethodAssertions));
			testMethodAssertions = new Array<Expr>();
		};	
	case CompilerConditionStart(condition):
		if (condition.indexOf("#end") > -1) continue;
		var interp = new hscript.Interp();
		var reg = new EReg("[a-zA-Z]\\w*", "gi");
		var defines = haxe.macro.Context.getDefines();
		var pos = 0;
		while (reg.matchSub(condition, pos)) {
			var pos2 = reg.matchedPos();
			var define = reg.matched(0);
			var defineValue = defines.get(define);
			interp.variables.set(define, defineValue == null ? false : defineValue);
			pos = reg.matchedPos().pos + reg.matchedPos().len;
		};
		try {
			var result:Bool = interp.execute(parser.parseString(condition));
			compilerConditions.push(result);
		} catch(ex:Dynamic) {
			Logger.log(ERROR, "Failed to parse compiler condition \"#if $condition\" -> $ex");
		};
		continue;	
	case CompilerConditionElseIf(condition):
		var interp = new hscript.Interp();
		var reg = new EReg("[a-zA-Z]\\w*", "gi");
		var defines = haxe.macro.Context.getDefines();
		var pos = 0;
		while (reg.matchSub(condition, pos)) {
			var pos2 = reg.matchedPos();
			var define = reg.matched(0);
			var defineValue = defines.get(define);
			interp.variables.set(define, defineValue == null ? false : defineValue);
			pos = reg.matchedPos().pos + reg.matchedPos().len;
		};
		try {
			var result:Bool = interp.execute(parser.parseString(condition));
			if (compilerConditions.length > 0) compilerConditions.pop();
			compilerConditions.push(result);
		} catch(ex:Dynamic) {
			Logger.log(ERROR, "Failed to parse compiler condition \"#elseif $condition\" -> $ex");
		};
		continue;	
	case CompilerConditionElse:
		if (compilerConditions.length > 0) {
			compilerConditions.push(!compilerConditions.pop());
		};
		continue;	
	case CompilerConditionEnd:
		if (compilerConditions.length > 0) compilerConditions.pop();
		continue;	
}) {
					var ` = src.currentLine;
					switch (@:exhaustive enumIndex `) {
						case 0: {
							var `2 = `[0];
							{
								var assertion = `2;
								{
									if (compilerConditions.indexOf(false, null) > -1) {
										continue;
									};
									var doctestLineFQ = new EReg("(^|[\\s(=<>!:])" + src.haxeModuleName + "(\\s?[(.<=])", "g").replace(assertion.expression, "$1" + src.haxeModuleFQName + "$2");
									totalAssertionsCount[0] ++;
									if (assertion.expression.indexOf(" === ", null) > -1) {
										var left = StringTools.trim(hx.doctest.internal.DocTestUtils.substringBeforeLast(doctestLineFQ, " === "));
										var right = StringTools.trim(hx.doctest.internal.DocTestUtils.substringAfterLast(doctestLineFQ, " === "));
										var leftExpr = try {
											haxe.macro.Context.parse(left, haxe.macro.Context.currentPos());
										} catch (`60:Dynamic) {
											var `61 = haxe.Exception.caught(`60);
											var `62 = `61.unwrap();
											if (true) {
												var ex = `62;
												{
													testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse left side: " + Std.string(ex)));
													continue;
												};
											} else throw `60;
										};
										var rightExpr = try {
											haxe.macro.Context.parse(right, haxe.macro.Context.currentPos());
										} catch (`63:Dynamic) {
											var `64 = haxe.Exception.caught(`63);
											var `65 = `64.unwrap();
											if (true) {
												var ex = `65;
												{
													testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse right side: " + Std.string(ex)));
													continue;
												};
											} else throw `63;
										};
										var testSuccessExpr = doctestAdapter.generateTestSuccess(assertion);
										var testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` not same instance as `$right`.");
										testMethodAssertions.push(cast {expr : haxe.macro.ExprDef.EBlock([{expr : haxe.macro.ExprDef.EVars([{name : "left", type : null, expr : leftExpr, isFinal : cast false}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4766, 4787)}, {expr : haxe.macro.ExprDef.EVars([{name : "right", type : null, expr : rightExpr, isFinal : cast false}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4820, 4843)}, {expr : haxe.macro.ExprDef.EIf({expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpEq, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4880, 4884)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4888, 4893)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4880, 4893)}, testSuccessExpr, testFailedExpr), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4876, 5037)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 4732, 5068)});
									} else {
										if (assertion.expression.indexOf(" !== ", null) > -1) {
											var left = StringTools.trim(hx.doctest.internal.DocTestUtils.substringBeforeLast(doctestLineFQ, " !== "));
											var right = StringTools.trim(hx.doctest.internal.DocTestUtils.substringAfterLast(doctestLineFQ, " !== "));
											var leftExpr = try {
												haxe.macro.Context.parse(left, haxe.macro.Context.currentPos());
											} catch (`66:Dynamic) {
												var `67 = haxe.Exception.caught(`66);
												var `68 = `67.unwrap();
												if (true) {
													var ex = `68;
													{
														testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse left side: " + Std.string(ex)));
														continue;
													};
												} else throw `66;
											};
											var rightExpr = try {
												haxe.macro.Context.parse(right, haxe.macro.Context.currentPos());
											} catch (`69:Dynamic) {
												var `70 = haxe.Exception.caught(`69);
												var `71 = `70.unwrap();
												if (true) {
													var ex = `71;
													{
														testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse right side: " + Std.string(ex)));
														continue;
													};
												} else throw `69;
											};
											var testSuccessExpr = doctestAdapter.generateTestSuccess(assertion);
											var testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is same instance right side.");
											testMethodAssertions.push(cast {expr : haxe.macro.ExprDef.EBlock([{expr : haxe.macro.ExprDef.EVars([{name : "left", type : null, expr : leftExpr, isFinal : cast false}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6528, 6549)}, {expr : haxe.macro.ExprDef.EVars([{name : "right", type : null, expr : rightExpr, isFinal : cast false}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6582, 6605)}, {expr : haxe.macro.ExprDef.EIf({expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpNotEq, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6642, 6646)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6650, 6655)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6642, 6655)}, testSuccessExpr, testFailedExpr), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6638, 6799)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 6494, 6830)});
										} else {
											if (assertion.expression.indexOf(" throws ", null) > -1) {
												var left = StringTools.trim(hx.doctest.internal.DocTestUtils.substringBeforeLast(doctestLineFQ, " throws "));
												var right = StringTools.trim(hx.doctest.internal.DocTestUtils.substringAfterLast(doctestLineFQ, " throws "));
												var leftExpr = try {
													haxe.macro.Context.parse(left, haxe.macro.Context.currentPos());
												} catch (`72:Dynamic) {
													var `73 = haxe.Exception.caught(`72);
													var `74 = `73.unwrap();
													if (true) {
														var ex = `74;
														{
															testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse left side: " + Std.string(ex)));
															continue;
														};
													} else throw `72;
												};
												var rightExpr = if (right == "nothing") {
													cast {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CString("nothing", haxe.macro.StringLiteralKind.DoubleQuotes)), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 7649, 7658)};
												} else {
													try {
														haxe.macro.Context.parse(right, haxe.macro.Context.currentPos());
													} catch (`75:Dynamic) {
														var `76 = haxe.Exception.caught(`75);
														var `77 = `76.unwrap();
														if (true) {
															var ex = `77;
															{
																testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse right side: " + Std.string(ex)));
																continue;
															};
														} else throw `75;
													};
												};
												var testSuccessExpr = doctestAdapter.generateTestSuccess(assertion);
												var testFailedExpr = doctestAdapter.generateTestFail(assertion, "Expected `$right` but was `$left`.");
												testMethodAssertions.push(cast {expr : haxe.macro.ExprDef.EBlock([{expr : haxe.macro.ExprDef.EVars([{name : "left", type : haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []}), expr : {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CString("nothing", haxe.macro.StringLiteralKind.DoubleQuotes)), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8346, 8355)}, isFinal : cast false}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8327, 8356)}, {expr : haxe.macro.ExprDef.ETry({expr : haxe.macro.ExprDef.EBlock([leftExpr]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8393, 8407)}, [{name : "ex", type : haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []}), expr : {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAssign, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8427, 8431)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("ex")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8434, 8436)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8427, 8436)}}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8389, 8436)}, {expr : haxe.macro.ExprDef.EVars([{name : "right", type : haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []}), expr : null, isFinal : cast false}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8470, 8488)}, {expr : haxe.macro.ExprDef.ETry({expr : haxe.macro.ExprDef.EBlock([{expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAssign, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8527, 8532)}, rightExpr), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8527, 8545)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8525, 8548)}, [{name : "ex", type : haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []}), expr : {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAssign, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8568, 8573)}, {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAdd, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CString("exception: ", haxe.macro.StringLiteralKind.DoubleQuotes)), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8576, 8589)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("ex")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8592, 8594)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8576, 8594)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8568, 8594)}}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8521, 8594)}, {expr : haxe.macro.ExprDef.EIf({expr : haxe.macro.ExprDef.ECall({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("hx")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8635)}, "doctest"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8643)}, "internal"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8652)}, "DocTestUtils"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8665)}, "deepEquals"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8676)}, [{expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8677, 8681)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8683, 8688)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8633, 8689)}, testSuccessExpr, testFailedExpr), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8629, 8833)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 8293, 8864)});
											} else {
												var doctestExpr = try {
													haxe.macro.Context.parse(doctestLineFQ, haxe.macro.Context.currentPos());
												} catch (`78:Dynamic) {
													var `79 = haxe.Exception.caught(`78);
													var `80 = `79.unwrap();
													if (true) {
														var ex = `80;
														{
															testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Failed to parse assertion: " + Std.string(ex)));
															continue;
														};
													} else throw `78;
												};
												var leftExpr = null;
												var rightExpr = null;
												var comparator = null;
												@:ast(switch (doctestExpr.expr) {
	case EBinop(op, l, r):
		switch (op) {
			case OpEq, OpNotEq, OpLte, OpLt, OpGt, OpGte:
				comparator = op;			
			default:
				testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Assertion is missing one of the valid comparison operators: == != <= < > =>"));
				continue;			
		};
		leftExpr = l;
		rightExpr = r;	
	default:
		testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Assertion is missing one of the valid comparison operators: == != <= < > =>"));
		continue;	
}) {
													var ` = doctestExpr.expr;
													if (enumIndex ` == 2) {
														var `3 = `[2];
														var `2 = `[1];
														var `1 = `[0];
														{
															var r = `3;
															var l = `2;
															var op = `1;
															{
																@:ast(switch (op) {
	case OpEq, OpNotEq, OpLte, OpLt, OpGt, OpGte:
		comparator = op;	
	default:
		testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Assertion is missing one of the valid comparison operators: == != <= < > =>"));
		continue;	
}) switch (enumIndex op) {
																	case 5, 6, 7, 8, 9, 10: {
																		{
																			comparator = op;
																		};
																	};
																	default: {
																		testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Assertion is missing one of the valid comparison operators: == != <= < > =>"));
																		continue;
																	}
																};
																leftExpr = l;
																rightExpr = r;
															};
														};
													} else {
														testMethodAssertions.push(doctestAdapter.generateTestFail(assertion, "Assertion is missing one of the valid comparison operators: == != <= < > =>"));
														continue;
													};
												};
												var comparisonExpr = null;
												var testSuccessExpr = doctestAdapter.generateTestSuccess(assertion);
												var testFailedExpr = null;
												@:ast(switch (comparator) {
	case OpEq:
		comparisonExpr = ({ expr : ECall({ expr : EField({ expr : EField({ expr : EField({ expr : EField({ expr : EConst(CIdent("hx")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10932) }, "doctest"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10940) }, "internal"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10949) }, "DocTestUtils"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10962) }, "deepEquals"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10973) }, [{ expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10974, 10978) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10980, 10985) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10986) } : haxe.macro.Expr);
		testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` does not equal `$right`.");	
	case OpNotEq:
		comparisonExpr = ({ expr : EUnop(OpNot, false, { expr : ECall({ expr : EField({ expr : EField({ expr : EField({ expr : EField({ expr : EConst(CIdent("hx")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11239) }, "doctest"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11247) }, "internal"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11256) }, "DocTestUtils"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11269) }, "deepEquals"), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11280) }, [{ expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11281, 11285) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11287, 11292) }]), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11293) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11236, 11293) } : haxe.macro.Expr);
		testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` equals `$right`.");	
	case OpLte:
		comparisonExpr = ({ expr : EBinop(OpLte, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11533, 11537) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11541, 11546) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11533, 11546) } : haxe.macro.Expr);
		testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not lower than or equal `$right`.");	
	case OpLt:
		comparisonExpr = ({ expr : EBinop(OpLt, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11805, 11809) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11812, 11817) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11805, 11817) } : haxe.macro.Expr);
		testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not lower than `$right`.");	
	case OpGt:
		comparisonExpr = ({ expr : EBinop(OpGt, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12067, 12071) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12074, 12079) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12067, 12079) } : haxe.macro.Expr);
		testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not greater than `$right`.");	
	case OpGte:
		comparisonExpr = ({ expr : EBinop(OpGte, { expr : EConst(CIdent("left")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12332, 12336) }, { expr : EConst(CIdent("right")), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12340, 12345) }), pos : untyped $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12332, 12345) } : haxe.macro.Expr);
		testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not greater than or equal `$right`.");	
	default:
		throw "Should never be reached";	
}) switch (enumIndex comparator) {
													case 5: {
														{
															comparisonExpr = cast {expr : haxe.macro.ExprDef.ECall({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("hx")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10932)}, "doctest"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10940)}, "internal"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10949)}, "DocTestUtils"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10962)}, "deepEquals"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10973)}, [{expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10974, 10978)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10980, 10985)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 10930, 10986)};
															testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` does not equal `$right`.");
														};
													};
													case 6: {
														{
															comparisonExpr = cast {expr : haxe.macro.ExprDef.EUnop(haxe.macro.Unop.OpNot, false, {expr : haxe.macro.ExprDef.ECall({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("hx")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11239)}, "doctest"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11247)}, "internal"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11256)}, "DocTestUtils"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11269)}, "deepEquals"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11280)}, [{expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11281, 11285)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11287, 11292)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11237, 11293)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11236, 11293)};
															testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` equals `$right`.");
														};
													};
													case 7: {
														{
															comparisonExpr = cast {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpGt, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12067, 12071)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12074, 12079)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12067, 12079)};
															testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not greater than `$right`.");
														};
													};
													case 8: {
														{
															comparisonExpr = cast {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpGte, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12332, 12336)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12340, 12345)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12332, 12345)};
															testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not greater than or equal `$right`.");
														};
													};
													case 9: {
														{
															comparisonExpr = cast {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpLt, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11805, 11809)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11812, 11817)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11805, 11817)};
															testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not lower than `$right`.");
														};
													};
													case 10: {
														{
															comparisonExpr = cast {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpLte, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11533, 11537)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11541, 11546)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 11533, 11546)};
															testFailedExpr = doctestAdapter.generateTestFail(assertion, "Left side `$left` is not lower than or equal `$right`.");
														};
													};
													default: {
														throw throw haxe.Exception.thrown("Should never be reached");
													}
												};
												testMethodAssertions.push(cast {expr : haxe.macro.ExprDef.EBlock([{expr : haxe.macro.ExprDef.EVars([{name : "left", type : haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []}), expr : null, isFinal : cast false}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12703, 12720)}, {expr : haxe.macro.ExprDef.ETry({expr : haxe.macro.ExprDef.EBlock([{expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAssign, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12759, 12763)}, leftExpr), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12759, 12775)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12757, 12778)}, [{name : "ex", type : haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []}), expr : {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAssign, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("left")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12798, 12802)}, {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAdd, {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAdd, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CString("exception: ", haxe.macro.StringLiteralKind.DoubleQuotes)), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12805, 12818)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("ex")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12821, 12823)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12805, 12823)}, {expr : haxe.macro.ExprDef.ECall({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("hx")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12828)}, "doctest"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12836)}, "internal"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12845)}, "DocTestUtils"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12858)}, "exceptionStackAsString"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12881)}, []), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12826, 12883)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12805, 12883)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12798, 12883)}}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12753, 12883)}, {expr : haxe.macro.ExprDef.EVars([{name : "right", type : haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []}), expr : null, isFinal : cast false}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12917, 12935)}, {expr : haxe.macro.ExprDef.ETry({expr : haxe.macro.ExprDef.EBlock([{expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAssign, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12974, 12979)}, rightExpr), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12974, 12992)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12972, 12995)}, [{name : "ex", type : haxe.macro.ComplexType.TPath({pack : [], name : "Dynamic", params : []}), expr : {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAssign, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("right")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13015, 13020)}, {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAdd, {expr : haxe.macro.ExprDef.EBinop(haxe.macro.Binop.OpAdd, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CString("exception: ", haxe.macro.StringLiteralKind.DoubleQuotes)), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13023, 13036)}, {expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("ex")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13039, 13041)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13023, 13041)}, {expr : haxe.macro.ExprDef.ECall({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EField({expr : haxe.macro.ExprDef.EConst(haxe.macro.Constant.CIdent("hx")), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13046)}, "doctest"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13054)}, "internal"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13063)}, "DocTestUtils"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13076)}, "exceptionStackAsString"), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13099)}, []), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13044, 13101)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13023, 13101)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13015, 13101)}}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12968, 13101)}, {expr : haxe.macro.ExprDef.EIf(comparisonExpr, {expr : haxe.macro.ExprDef.EBlock([testSuccessExpr]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13157, 13246)}, {expr : haxe.macro.ExprDef.EBlock([testFailedExpr]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13252, 13340)}), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 13136, 13340)}]), pos : $__mk_pos__("/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", 12669, 13370)});
											};
										};
									};
									if (testMethodAssertions.length == 0) {
										continue;
									};
									if (testMethodAssertions.length == hx.doctest.DocTestGenerator.MAX_ASSERTIONS_PER_TEST_METHOD || Std.is(doctestAdapter, hx.doctest.internal.adapters.HaxeUnitDocTestAdapter) || Std.is(doctestAdapter, hx.doctest.internal.adapters.MUnitDocTestAdapter)) {
										testMethodsCount ++;
										var testMethodName = "test" + src.haxeModuleName + "_" + testMethodsCount;
										hx.doctest.internal.Logger.log(hx.doctest.internal.Level.DEBUG, "|--> Generating function \"" + testMethodName + "()\"...", null, {fileName : "/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", lineNumber : 264, className : "hx.doctest.DocTestGenerator", methodName : "generateDocTests"});
										contextFields.push(doctestAdapter.generateTestMethod(testMethodName, "Doc Testing [" + src.filePath + "] #" + testMethodsCount, testMethodAssertions));
										testMethodAssertions = new Array();
									};
								};
							};
						};
						case 1: {
							var `1 = `[0];
							{
								var condition = `1;
								{
									if (condition.indexOf("#end", null) > -1) {
										continue;
									};
									var interp = new hscript.Interp();
									var reg = new EReg("[a-zA-Z]\\w*", "gi");
									var defines = haxe.macro.Context.getDefines();
									var pos = 0;
									while (reg.matchSub(condition, pos, null)) {
										var pos2 = reg.matchedPos();
										var define = reg.matched(0);
										var defineValue = cast defines.get(define);
										{
											var this = interp.variables;
											cast this.set(define, cast if ((defineValue == null)) false else defineValue);
										};
										pos = reg.matchedPos().pos + reg.matchedPos().len;
									};
									try {
										var result = interp.execute(parser.parseString(condition, null));
										compilerConditions.push(result);
									} catch (`81:Dynamic) {
										var `82 = haxe.Exception.caught(`81);
										var `83 = `82.unwrap();
										if (true) {
											var ex = `83;
											{
												hx.doctest.internal.Logger.log(hx.doctest.internal.Level.ERROR, "Failed to parse compiler condition \"#if " + condition + "\" -> " + Std.string(ex), null, {fileName : "/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", lineNumber : 289, className : "hx.doctest.DocTestGenerator", methodName : "generateDocTests"});
											};
										} else throw `81;
									};
									continue;
								};
							};
						};
						case 2: {
							var `3 = `[0];
							{
								var condition = `3;
								{
									var interp = new hscript.Interp();
									var reg = new EReg("[a-zA-Z]\\w*", "gi");
									var defines = haxe.macro.Context.getDefines();
									var pos = 0;
									while (reg.matchSub(condition, pos, null)) {
										var pos2 = reg.matchedPos();
										var define = reg.matched(0);
										var defineValue = cast defines.get(define);
										{
											var this = interp.variables;
											cast this.set(define, cast if ((defineValue == null)) false else defineValue);
										};
										pos = reg.matchedPos().pos + reg.matchedPos().len;
									};
									try {
										var result = interp.execute(parser.parseString(condition, null));
										if (compilerConditions.length > 0) {
											compilerConditions.pop();
										};
										compilerConditions.push(result);
									} catch (`84:Dynamic) {
										var `85 = haxe.Exception.caught(`84);
										var `86 = `85.unwrap();
										if (true) {
											var ex = `86;
											{
												hx.doctest.internal.Logger.log(hx.doctest.internal.Level.ERROR, "Failed to parse compiler condition \"#elseif " + condition + "\" -> " + Std.string(ex), null, {fileName : "/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", lineNumber : 312, className : "hx.doctest.DocTestGenerator", methodName : "generateDocTests"});
											};
										} else throw `84;
									};
									continue;
								};
							};
						};
						case 3: {
							{
								if (compilerConditions.length > 0) {
									compilerConditions.push(! compilerConditions.pop());
								};
								continue;
							};
						};
						case 4: {
							{
								if (compilerConditions.length > 0) {
									compilerConditions.pop();
								};
								continue;
							};
						};
					};
				};
			};
			if (testMethodAssertions.length > 0) {
				testMethodsCount ++;
				var testMethodName = "test" + src.haxeModuleName + "_" + testMethodsCount;
				hx.doctest.internal.Logger.log(hx.doctest.internal.Level.DEBUG, "|--> Generating function \"" + testMethodName + "()\"...", null, {fileName : "/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", lineNumber : 334, className : "hx.doctest.DocTestGenerator", methodName : "generateDocTests"});
				contextFields.push(doctestAdapter.generateTestMethod(testMethodName, "Doc Testing [" + src.filePath + "] #" + testMethodsCount, testMethodAssertions));
				testMethodAssertions = new Array();
			};
		});
		doctestAdapter.onFinish(contextFields);
		hx.doctest.internal.Logger.log(hx.doctest.internal.Level.INFO, "Generated " + totalAssertionsCount[0] + " test assertions.", null, {fileName : "/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/DocTestGenerator.hx", lineNumber : 342, className : "hx.doctest.DocTestGenerator", methodName : "generateDocTests"});
		return contextFields;
	}

	static function getDocTestAdapter() {
		var clazz = haxe.macro.Context.getLocalClass().get();
		while (true) {
			if (clazz.module == "hx.doctest.DocTestRunner") {
				return new hx.doctest.internal.adapters.TestrunnerDocTestAdapter();
			};
			if (clazz.module == "haxe.unit.TestCase") {
				return new hx.doctest.internal.adapters.HaxeUnitDocTestAdapter();
			};
			if (hx.doctest.DocTestGenerator.implementsInterface(clazz, "utest.ITest")) {
				return new hx.doctest.internal.adapters.UTestDocTestAdapter();
			};
			if (clazz.superClass == null) {
				break;
			};
			clazz = clazz.superClass.t.get();
		};
		return new hx.doctest.internal.adapters.MUnitDocTestAdapter();
	}

	static function implementsInterface(clazz:haxe.macro.ClassType, interfaceName:String) {
		{
			var ` = 0;
			var `1 = clazz.interfaces;
			while (` < `1.length) {
				var iface = `1[`];
				++ `;
				if (iface.t.toString() == interfaceName) {
					return true;
				};
			};
		};
		return false;
	}
}
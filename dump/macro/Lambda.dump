class Lambda {

	public static function array<A : array.A>(it:Iterable<array.A>) {
		var a = new Array();
		for (i in it.iterator()) {
			a.push(i);
		};
		return a;
	}

	public static function list<A : list.A>(it:Iterable<list.A>) {
		var l = new haxe.ds.List();
		for (i in it.iterator()) {
			l.add(i);
		};
		return l;
	}

	public static function map<A : map.A,B : map.B>(it:Iterable<map.A>, f:(item : map.A) -> map.B) {
		return {
			var ` = [];
			for (x in it.iterator()) {
				`.push(f(x));
			};
			`;
		};
	}

	public static function mapi<A : mapi.A,B : mapi.B>(it:Iterable<mapi.A>, f:(index : Int, item : mapi.A) -> mapi.B) {
		var i = 0;
		return {
			var ` = [];
			for (x in it.iterator()) {
				`.push(f(i ++, x));
			};
			`;
		};
	}

	public static function flatten<A : flatten.A>(it:Iterable<Iterable<flatten.A>>) {
		return {
			var ` = [];
			for (e in it.iterator()) {
				for (x in e.iterator()) {
					`.push(x);
				};
			};
			`;
		};
	}

	public static function flatMap<A : flatMap.A,B : flatMap.B>(it:Iterable<flatMap.A>, f:(item : flatMap.A) -> Iterable<flatMap.B>) {
		return Lambda.flatten(Lambda.map(it, f));
	}

	public static function has<A : has.A>(it:Iterable<has.A>, elt:has.A) {
		for (x in it.iterator()) {
			if (x == elt) {
				return true;
			};
		};
		return false;
	}

	public static function exists<A : exists.A>(it:Iterable<exists.A>, f:(item : exists.A) -> Bool) {
		for (x in it.iterator()) {
			if (f(x)) {
				return true;
			};
		};
		return false;
	}

	public static function foreach<A : foreach.A>(it:Iterable<foreach.A>, f:(item : foreach.A) -> Bool) {
		for (x in it.iterator()) {
			if (! f(x)) {
				return false;
			};
		};
		return true;
	}

	public static function iter<A : iter.A>(it:Iterable<iter.A>, f:(item : iter.A) -> Void) {
		for (x in it.iterator()) {
			f(x);
		};
	}

	public static function filter<A : filter.A>(it:Iterable<filter.A>, f:(item : filter.A) -> Bool) {
		return {
			var ` = [];
			for (x in it.iterator()) {
				if (f(x)) {
					`.push(x);
				};
			};
			`;
		};
	}

	public static function fold<A : fold.A,B : fold.B>(it:Iterable<fold.A>, f:(item : fold.A, result : fold.B) -> fold.B, first:fold.B) {
		for (x in it.iterator()) {
			first = f(x, first);
		};
		return first;
	}

	public static function foldi<A : foldi.A,B : foldi.B>(it:Iterable<foldi.A>, f:(item : foldi.A, result : foldi.B, index : Int) -> foldi.B, first:foldi.B) {
		var i = 0;
		for (x in it.iterator()) {
			first = f(x, first, i);
			++ i;
		};
		return first;
	}

	public static function count<A : count.A>(it:Iterable<count.A>, pred:Null<(item : count.A) -> Bool> = null) {
		var n = 0;
		if (pred == null) {
			for (_ in it.iterator()) {
				n ++;
			};
		} else {
			for (x in it.iterator()) {
				if (pred(x)) {
					n ++;
				};
			};
		};
		return n;
	}

	public static function empty<T : empty.T>(it:Iterable<empty.T>) {
		return ! it.iterator().hasNext();
	}

	public static function indexOf<T : indexOf.T>(it:Iterable<indexOf.T>, v:indexOf.T) {
		var i = 0;
		for (v2 in it.iterator()) {
			if (v == v2) {
				return i;
			};
			i ++;
		};
		return -1;
	}

	public static function find<T : find.T>(it:Iterable<find.T>, f:(item : find.T) -> Bool) {
		for (v in it.iterator()) {
			if (f(v)) {
				return v;
			};
		};
		return null;
	}

	public static function findIndex<T : findIndex.T>(it:Iterable<findIndex.T>, f:(item : findIndex.T) -> Bool) {
		var i = 0;
		for (v in it.iterator()) {
			if (f(v)) {
				return i;
			};
			i ++;
		};
		return -1;
	}

	public static function concat<T : concat.T>(a:Iterable<concat.T>, b:Iterable<concat.T>) {
		var l = new Array();
		for (x in a.iterator()) {
			l.push(x);
		};
		for (x in b.iterator()) {
			l.push(x);
		};
		return l;
	}
}
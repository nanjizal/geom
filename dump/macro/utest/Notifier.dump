class utest.Notifier {

	public function new() this.handlers = new Array()

	var handlers:Array<Void -> Void>;

	public function add(h:Void -> Void) {
		this.handlers.push(h);
		return h;
	}

	public function remove(h:Void -> Void) {
		{
			var ` = 0;
			var `1 = this.handlers.length;
			while (` < `1) {
				var i = ` ++;
				if (Reflect.compareMethods(this.handlers[i], h)) {
					return this.handlers.splice(i, 1)[0];
				};
			};
		};
		return null;
	}

	public function clear() this.handlers = new Array()

	public function dispatch() {
		try {
			var list = this.handlers.copy();
			{
				var ` = 0;
				while (` < list.length) {
					var l = list[`];
					++ `;
					l();
				};
			};
			return true;
		} catch (`120:Dynamic) {
			var `121 = haxe.Exception.caught(`120);
			var `122 = `121.unwrap();
			if (Std.isOfType(`122, utest._Dispatcher.EventException)) {
				{};
				{
					return false;
				};
			} else throw `120;
		};
	}

	public function has() return this.handlers.length > 0

	public static function stop() throw throw haxe.Exception.thrown(utest._Dispatcher.EventException.StopPropagation)
}
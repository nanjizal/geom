@:allow(utest)
class utest.Async {

	@:value({ timeoutMs : 250 })
	function new(timeoutMs:Int = 250) {
		this.callbacks = [];
		this.timedOut = false;
		this.resolved = false;
		this.startTime = haxe.Timer.stamp();
		this.timer = haxe.Timer.delay(this.setTimedOutState, timeoutMs);
	}

	@:value(false)
	public var resolved(default,null):Bool;

	@:value(false)
	public var timedOut(default,null):Bool;

	@:value([])
	var callbacks:Array<Void -> Void>;

	var startTime:Float;

	var timer:haxe.Timer;

	public function done(pos:Null<haxe.PosInfos> = null) {
		if (this.resolved) {
			if (this.timedOut) {
				throw throw haxe.Exception.thrown("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
			} else {
				throw throw haxe.Exception.thrown("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is done already.");
			};
		};
		this.resolved = true;
		{
			var ` = 0;
			var `1 = this.callbacks;
			while (` < `1.length) {
				var cb = `1[`];
				++ `;
				cb();
			};
		};
	}

	public function setTimeout(timeoutMs:Int, pos:Null<haxe.PosInfos> = null) {
		if (this.resolved) {
			throw throw haxe.Exception.thrown("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is done.");
		};
		if (this.timedOut) {
			throw throw haxe.Exception.thrown("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
		};
		this.timer.stop();
		var delay = timeoutMs - Math.round(1000 * (haxe.Timer.stamp() - this.startTime));
		this.timer = haxe.Timer.delay(this.setTimedOutState, delay);
	}

	function then(cb:Void -> Void) {
		if (this.resolved) {
			cb();
		} else {
			this.callbacks.push(cb);
		};
	}

	function setTimedOutState() {
		if (this.resolved) {
			return;
		};
		this.timedOut = true;
		this.done({fileName : "/usr/local/lib/haxeLibrary/utest/1,9,6/src/utest/Async.hx", lineNumber : 78, className : "utest.Async", methodName : "setTimedOutState"});
	}

	static var resolvedInstance:utest.Async;

	static function getResolved() {
		if (utest.Async.resolvedInstance == null) {
			utest.Async.resolvedInstance = new utest.Async(null);
			utest.Async.resolvedInstance.done({fileName : "/usr/local/lib/haxeLibrary/utest/1,9,6/src/utest/Async.hx", lineNumber : 28, className : "utest.Async", methodName : "getResolved"});
		};
		return utest.Async.resolvedInstance;
	}
}
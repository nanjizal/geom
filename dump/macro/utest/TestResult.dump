class utest.TestResult {

	public function new() {}

	public var pack:String;

	public var cls:String;

	public var method:String;

	public var setup:String;

	public var setupAsync:String;

	public var teardown:String;

	public var teardownAsync:String;

	public var assertations:List<utest.Assertation>;

	public function allOk() {
		for (l in this.assertations.iterator()) {
			@:ast(switch (l) {
	case Success(_):
		break;	
	default:
		return false;	
}) if (enumIndex l == 0) {
				var ` = l[0];
				{
					break;
				};
			} else {
				return false;
			};
		};
		return true;
	}

	public static function ofHandler(handler:utest.TestHandler<Dynamic>) {
		var r = new utest.TestResult();
		var path = Type.getClassName(Type.getClass(handler.fixture.target)).split(".");
		r.cls = path.pop();
		r.pack = path.join(".");
		r.method = handler.fixture.method;
		r.setup = handler.fixture.setup;
		r.setupAsync = handler.fixture.setupAsync;
		r.teardown = handler.fixture.teardown;
		r.teardownAsync = handler.fixture.teardownAsync;
		r.assertations = handler.results;
		return r;
	}

	public static function ofFailedSetupClass(testCase:utest.ITest, assertation:utest.Assertation) {
		var r = new utest.TestResult();
		var path = Type.getClassName(Type.getClass(testCase)).split(".");
		r.cls = path.pop();
		r.pack = path.join(".");
		r.method = "setup";
		r.assertations = new haxe.ds.List();
		r.assertations.add(assertation);
		return r;
	}

	public static function ofFailedTeardownClass(testCase:utest.ITest, assertation:utest.Assertation) {
		var r = new utest.TestResult();
		var path = Type.getClassName(Type.getClass(testCase)).split(".");
		r.cls = path.pop();
		r.pack = path.join(".");
		r.method = "setup";
		r.assertations = new haxe.ds.List();
		r.assertations.add(assertation);
		return r;
	}
}
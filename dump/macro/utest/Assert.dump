class utest.Assert {

	public static var results:List<utest.Assertation>;

	static function processResult(cond:Bool, getMessage:Void -> String, pos:Null<haxe.PosInfos> = null) {
		if (utest.Assert.results == null) {
			throw throw haxe.Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		};
		if (cond) {
			utest.Assert.results.add(utest.Assertation.Success(pos));
		} else {
			utest.Assert.results.add(utest.Assertation.Failure(getMessage(), pos));
		};
	}

	public static function isTrue(cond:Bool, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(cond, function() return if (msg != null) {
			msg;
		} else {
			"expected true";
		}, pos);
	}

	public static function isFalse(value:Bool, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(value == false, function() return if (msg != null) {
			msg;
		} else {
			"expected false";
		}, pos);
	}

	public static function isNull(value:Dynamic, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(value == null, function() return if (msg != null) {
			msg;
		} else {
			"expected null but it is " + utest.Assert.q(value);
		}, pos);
	}

	public static function notNull(value:Dynamic, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(value != null, function() return if (msg != null) {
			msg;
		} else {
			"expected not null";
		}, pos);
	}

	public static function is(value:Dynamic, type:Dynamic, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(Std.is(value, type), function() return if (msg != null) {
			msg;
		} else {
			"expected type " + utest.Assert.typeToString(type) + " but it is " + utest.Assert.typeToString(value);
		}, pos);
	}

	public static function notEquals(expected:Dynamic, value:Dynamic, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(expected != value, function() return if (msg != null) {
			msg;
		} else {
			"expected " + utest.Assert.q(expected) + " and test value " + utest.Assert.q(value) + " should be different";
		}, pos);
	}

	public static function equals(expected:Dynamic, value:Dynamic, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(expected == value, function() return if (msg != null) {
			msg;
		} else {
			"expected " + utest.Assert.q(expected) + " but it is " + utest.Assert.q(value);
		}, pos);
	}

	public static function match(pattern:EReg, value:Dynamic, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(pattern.match(value), function() return if (msg != null) {
			msg;
		} else {
			"the value " + utest.Assert.q(value) + " does not match the provided pattern";
		}, pos);
	}

	public static function floatEquals(expected:Float, value:Float, approx:Null<Float> = null, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		utest.Assert.processResult(utest.Assert._floatEquals(expected, value, approx), function() return if (msg != null) {
			msg;
		} else {
			"expected " + utest.Assert.q(expected) + " but it is " + utest.Assert.q(value);
		}, pos);
	}

	static function _floatEquals(expected:Float, value:Float, approx:Null<Float> = null) {
		if (Math.isNaN(expected)) {
			return Math.isNaN(value);
		} else {
			if (Math.isNaN(value)) {
				return false;
			} else {
				if (! Math.isFinite(expected) && ! Math.isFinite(value)) {
					return (expected > 0) == (value > 0);
				};
			};
		};
		if (null == approx) {
			approx = 1e-5;
		};
		return Math.abs(value - expected) <= approx;
	}

	static function getTypeName(v:Dynamic) {
		@:ast(switch (Type.typeof(v)) {
	case TNull:
		return "`null`";	
	case TInt:
		return "Int";	
	case TFloat:
		return "Float";	
	case TBool:
		return "Bool";	
	case TFunction:
		return "function";	
	case TClass(c):
		return Type.getClassName(c);	
	case TEnum(e):
		return Type.getEnumName(e);	
	case TObject:
		return "Object";	
	case TUnknown:
		return "`Unknown`";	
}) {
			var ` = Type.typeof(v);
			switch (@:exhaustive enumIndex `) {
				case 0: {
					{
						return "`null`";
					};
				};
				case 1: {
					{
						return "Int";
					};
				};
				case 2: {
					{
						return "Float";
					};
				};
				case 3: {
					{
						return "Bool";
					};
				};
				case 4: {
					{
						return "Object";
					};
				};
				case 5: {
					{
						return "function";
					};
				};
				case 6: {
					var `1 = `[0];
					{
						var c = `1;
						{
							return Type.getClassName(c);
						};
					};
				};
				case 7: {
					var `2 = `[0];
					{
						var e = `2;
						{
							return Type.getEnumName(e);
						};
					};
				};
				case 8: {
					{
						return "`Unknown`";
					};
				};
			};
		};
	}

	static function isIterable(v:Dynamic, isAnonym:Bool) {
		var fields = if (isAnonym) {
			Reflect.fields(v);
		} else {
			Type.getInstanceFields(Type.getClass(v));
		};
		if (! Lambda.has(fields, "iterator")) {
			return false;
		};
		return Reflect.isFunction(Reflect.field(v, "iterator"));
	}

	static function isIterator(v:Dynamic, isAnonym:Bool) {
		var fields = if (isAnonym) {
			Reflect.fields(v);
		} else {
			Type.getInstanceFields(Type.getClass(v));
		};
		if (! Lambda.has(fields, "next") || ! Lambda.has(fields, "hasNext")) {
			return false;
		};
		return Reflect.isFunction(Reflect.field(v, "next")) && Reflect.isFunction(Reflect.field(v, "hasNext"));
	}

	static function sameAs(expected:Dynamic, value:Dynamic, status:utest._Assert.LikeStatus, approx:Float) {
		var texpected = utest.Assert.getTypeName(expected);
		var tvalue = utest.Assert.getTypeName(value);
		status.expectedValue = expected;
		status.actualValue = value;
		if (texpected != tvalue && ! ((texpected == "Int" && tvalue == "Float") || (texpected == "Float" && tvalue == "Int"))) {
			status.error = "expected type " + texpected + " but it is " + tvalue + (if (status.path == "") {
				"";
			} else {
				" for field " + status.path;
			});
			return false;
		};
		@:ast(switch (Type.typeof(expected)) {
	case TFloat, TInt:
		if (!_floatEquals(expected, value, approx)) {
			status.error = "expected " + q(expected) + " but it is " + q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		};
		return true;	
	case TNull, TBool:
		if (expected != value) {
			status.error = "expected " + q(expected) + " but it is " + q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		};
		return true;	
	case TFunction:
		if (!Reflect.compareMethods(expected, value)) {
			status.error = "expected same function reference" + (status.path == "" ? "" : " for field " + status.path);
			return false;
		};
		return true;	
	case TClass(c):
		var cexpected = Type.getClassName(c);
		var cvalue = Type.getClassName(Type.getClass(value));
		if (cexpected != cvalue) {
			status.error = "expected instance of " + q(cexpected) + " but it is " + q(cvalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		};
		if (Std.is(expected, String)) {
			if (expected == value) return true else {
				status.error = "expected string '" + expected + "' but it is '" + value + "'";
				return false;
			};
		};
		if (Std.is(expected, Array)) {
			if (status.recursive || status.path == "") {
				if (expected.length != value.length) {
					status.error = "expected " + expected.length + " elements but they are " + value.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				};
				var path = status.path;
				for (i  in  0 ... expected.length) {
					status.path = path == "" ? "array[" + i + "]" : path + "[" + i + "]";
					if (!sameAs(expected[i], value[i], status, approx)) {
						status.error = "expected array element at [" + i + "] to have " + q(status.expectedValue) + " but it is " + q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					};
				};
			};
			return true;
		};
		if (Std.is(expected, Date)) {
			if (expected.getTime() != value.getTime()) {
				status.error = "expected " + q(expected) + " but it is " + q(value) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			};
			return true;
		};
		if (Std.is(expected, Bytes)) {
			if (status.recursive || status.path == "") {
				var ebytes:Bytes = expected;
				var vbytes:Bytes = value;
				if (ebytes.length != vbytes.length) return false;
				for (i  in  0 ... ebytes.length) if (ebytes.get(i) != vbytes.get(i)) {
					status.error = "expected byte " + ebytes.get(i) + " but it is " + vbytes.get(i) + (status.path == "" ? "" : " for field " + status.path);
					return false;
				};
			};
			return true;
		};
		if (Std.is(expected, IMap)) {
			if (status.recursive || status.path == "") {
				var map = cast (expected, Map<Dynamic,Dynamic>);
				var vmap = cast (value, Map<Dynamic,Dynamic>);
				var keys:Array<Dynamic> = [for (k  in  map.keys()) k];
				var vkeys:Array<Dynamic> = [for (k  in  vmap.keys()) k];
				if (keys.length != vkeys.length) {
					status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				};
				var path = status.path;
				for (key  in  keys) {
					status.path = path == "" ? "hash[" + key + "]" : path + "[" + key + "]";
					if (!sameAs(map.get(key), vmap.get(key), status, approx)) {
						status.error = "expected " + q(status.expectedValue) + " but it is " + q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					};
				};
			};
			return true;
		};
		if (isIterator(expected, false)) {
			if (status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() return expected });
				var vvalues = Lambda.array({ iterator : function() return value });
				if (evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				};
				var path = status.path;
				for (i  in  0 ... evalues.length) {
					status.path = path == "" ? "iterator[" + i + "]" : path + "[" + i + "]";
					if (!sameAs(evalues[i], vvalues[i], status, approx)) {
						status.error = "expected " + q(status.expectedValue) + " but it is " + q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					};
				};
			};
			return true;
		};
		if (isIterable(expected, false)) {
			if (status.recursive || status.path == "") {
				var evalues = Lambda.array(expected);
				var vvalues = Lambda.array(value);
				if (evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				};
				var path = status.path;
				for (i  in  0 ... evalues.length) {
					status.path = path == "" ? "iterable[" + i + "]" : path + "[" + i + "]";
					if (!sameAs(evalues[i], vvalues[i], status, approx)) return false;
				};
			};
			return true;
		};
		if (status.recursive || status.path == "") {
			var fields = Type.getInstanceFields(Type.getClass(expected));
			var path = status.path;
			for (field  in  fields) {
				status.path = path == "" ? field : path + "." + field;
				var e = Reflect.field(expected, field);
				if (Reflect.isFunction(e)) continue;
				var v = Reflect.field(value, field);
				if (!sameAs(e, v, status, approx)) return false;
			};
		};
		return true;	
	case TEnum(e):
		var eexpected = Type.getEnumName(e);
		var evalue = Type.getEnumName(Type.getEnum(value));
		if (eexpected != evalue) {
			status.error = "expected enumeration of " + q(eexpected) + " but it is " + q(evalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		};
		if (status.recursive || status.path == "") {
			if (Type.enumIndex(expected) != Type.enumIndex(value)) {
				status.error = "expected enum constructor " + q(Type.enumConstructor(expected)) + " but it is " + q(Type.enumConstructor(value)) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			};
			var eparams = Type.enumParameters(expected);
			var vparams = Type.enumParameters(value);
			var path = status.path;
			for (i  in  0 ... eparams.length) {
				status.path = path == "" ? "enum[" + i + "]" : path + "[" + i + "]";
				if (!sameAs(eparams[i], vparams[i], status, approx)) {
					status.error = "expected enum param " + q(expected) + " but it is " + q(value) + (status.path == "" ? "" : " for field " + status.path) + " with " + status.error;
					return false;
				};
			};
		};
		return true;	
	case TObject:
		if (status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			for (field  in  fields) {
				tfields.remove(field);
				status.path = path == "" ? field : path + "." + field;
				if (!Reflect.hasField(value, field)) {
					status.error = "expected field " + status.path + " does not exist in " + q(value);
					return false;
				};
				var e = Reflect.field(expected, field);
				if (Reflect.isFunction(e)) continue;
				var v = Reflect.field(value, field);
				if (!sameAs(e, v, status, approx)) return false;
			};
			if (tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			};
		};
		if (isIterator(expected, true)) {
			if (!(isIterator(value, true))) {
				status.error = "expected Iterable but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			};
			if (status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() return expected });
				var vvalues = Lambda.array({ iterator : function() return value });
				if (evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				};
				var path = status.path;
				for (i  in  0 ... evalues.length) {
					status.path = path == "" ? "iterator[" + i + "]" : path + "[" + i + "]";
					if (!sameAs(evalues[i], vvalues[i], status, approx)) {
						status.error = "expected " + q(status.expectedValue) + " but it is " + q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					};
				};
			};
			return true;
		};
		if (isIterable(expected, true)) {
			if (!(isIterable(value, true))) {
				status.error = "expected Iterator but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			};
			if (status.recursive || status.path == "") {
				var evalues = Lambda.array(expected);
				var vvalues = Lambda.array(value);
				if (evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				};
				var path = status.path;
				for (i  in  0 ... evalues.length) {
					status.path = path == "" ? "iterable[" + i + "]" : path + "[" + i + "]";
					if (!sameAs(evalues[i], vvalues[i], status, approx)) return false;
				};
			};
			return true;
		};
		return true;	
	case TUnknown:
		return throw "Unable to compare two unknown types";	
}) {
			var ` = Type.typeof(expected);
			switch (@:exhaustive enumIndex `) {
				case 1, 2: {
					{
						if (! utest.Assert._floatEquals(expected, value, approx)) {
							status.error = "expected " + utest.Assert.q(expected) + " but it is " + utest.Assert.q(value) + (if (status.path == "") {
								"";
							} else {
								" for field " + status.path;
							});
							return false;
						};
						return true;
					};
				};
				case 0, 3: {
					{
						if (expected != value) {
							status.error = "expected " + utest.Assert.q(expected) + " but it is " + utest.Assert.q(value) + (if (status.path == "") {
								"";
							} else {
								" for field " + status.path;
							});
							return false;
						};
						return true;
					};
				};
				case 4: {
					{
						if (status.recursive || status.path == "") {
							var tfields = Reflect.fields(value);
							var fields = Reflect.fields(expected);
							var path = status.path;
							{
								var ` = 0;
								while (` < fields.length) {
									var field = fields[`];
									++ `;
									tfields.remove(field);
									status.path = if (path == "") {
										field;
									} else {
										path + "." + field;
									};
									if (! Reflect.hasField(value, field)) {
										status.error = "expected field " + status.path + " does not exist in " + utest.Assert.q(value);
										return false;
									};
									var e = Reflect.field(expected, field);
									if (Reflect.isFunction(e)) {
										continue;
									};
									var v = Reflect.field(value, field);
									if (! utest.Assert.sameAs(e, v, status, approx)) {
										return false;
									};
								};
							};
							if (tfields.length > 0) {
								status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
								return false;
							};
						};
						if (utest.Assert.isIterator(expected, true)) {
							if (! (utest.Assert.isIterator(value, true))) {
								status.error = "expected Iterable but it is not " + (if (status.path == "") {
									"";
								} else {
									" for field " + status.path;
								});
								return false;
							};
							if (status.recursive || status.path == "") {
								var evalues = Lambda.array({iterator : function() return expected});
								var vvalues = Lambda.array({iterator : function() return value});
								if (evalues.length != vvalues.length) {
									status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (if (status.path == "") {
										"";
									} else {
										" for field " + status.path;
									});
									return false;
								};
								var path = status.path;
								{
									var ` = 0;
									var `1 = evalues.length;
									while (` < `1) {
										var i = ` ++;
										status.path = if (path == "") {
											"iterator[" + i + "]";
										} else {
											path + "[" + i + "]";
										};
										if (! utest.Assert.sameAs(evalues[i], vvalues[i], status, approx)) {
											status.error = "expected " + utest.Assert.q(status.expectedValue) + " but it is " + utest.Assert.q(status.actualValue) + (if (status.path == "") {
												"";
											} else {
												" for field " + status.path;
											});
											return false;
										};
									};
								};
							};
							return true;
						};
						if (utest.Assert.isIterable(expected, true)) {
							if (! (utest.Assert.isIterable(value, true))) {
								status.error = "expected Iterator but it is not " + (if (status.path == "") {
									"";
								} else {
									" for field " + status.path;
								});
								return false;
							};
							if (status.recursive || status.path == "") {
								var evalues = Lambda.array(expected);
								var vvalues = Lambda.array(value);
								if (evalues.length != vvalues.length) {
									status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (if (status.path == "") {
										"";
									} else {
										" for field " + status.path;
									});
									return false;
								};
								var path = status.path;
								{
									var ` = 0;
									var `1 = evalues.length;
									while (` < `1) {
										var i = ` ++;
										status.path = if (path == "") {
											"iterable[" + i + "]";
										} else {
											path + "[" + i + "]";
										};
										if (! utest.Assert.sameAs(evalues[i], vvalues[i], status, approx)) {
											return false;
										};
									};
								};
							};
							return true;
						};
						return true;
					};
				};
				case 5: {
					{
						if (! Reflect.compareMethods(expected, value)) {
							status.error = "expected same function reference" + (if (status.path == "") {
								"";
							} else {
								" for field " + status.path;
							});
							return false;
						};
						return true;
					};
				};
				case 6: {
					var `1 = `[0];
					{
						var c = `1;
						{
							var cexpected = Type.getClassName(c);
							var cvalue = Type.getClassName(Type.getClass(value));
							if (cexpected != cvalue) {
								status.error = "expected instance of " + utest.Assert.q(cexpected) + " but it is " + utest.Assert.q(cvalue) + (if (status.path == "") {
									"";
								} else {
									" for field " + status.path;
								});
								return false;
							};
							if (Std.is(expected, String)) {
								if (expected == value) {
									return true;
								} else {
									status.error = "expected string '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
									return false;
								};
							};
							if (Std.is(expected, Array)) {
								if (status.recursive || status.path == "") {
									if (expected.length != value.length) {
										status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (if (status.path == "") {
											"";
										} else {
											" for field " + status.path;
										});
										return false;
									};
									var path = status.path;
									{
										var ` = 0;
										var `1 = cast expected.length;
										while (` < `1) {
											var i = ` ++;
											status.path = if (path == "") {
												"array[" + i + "]";
											} else {
												path + "[" + i + "]";
											};
											if (! utest.Assert.sameAs(expected[i], value[i], status, approx)) {
												status.error = "expected array element at [" + i + "] to have " + utest.Assert.q(status.expectedValue) + " but it is " + utest.Assert.q(status.actualValue) + (if (status.path == "") {
													"";
												} else {
													" for field " + status.path;
												});
												return false;
											};
										};
									};
								};
								return true;
							};
							if (Std.is(expected, Date)) {
								if (expected.getTime() != value.getTime()) {
									status.error = "expected " + utest.Assert.q(expected) + " but it is " + utest.Assert.q(value) + (if (status.path == "") {
										"";
									} else {
										" for field " + status.path;
									});
									return false;
								};
								return true;
							};
							if (Std.is(expected, haxe.io.Bytes)) {
								if (status.recursive || status.path == "") {
									var ebytes = expected;
									var vbytes = value;
									if (ebytes.length != vbytes.length) {
										return false;
									};
									{
										var ` = 0;
										var `1 = ebytes.length;
										while (` < `1) {
											var i = ` ++;
											if (ebytes.get(i) != vbytes.get(i)) {
												status.error = "expected byte " + ebytes.get(i) + " but it is " + vbytes.get(i) + (if (status.path == "") {
													"";
												} else {
													" for field " + status.path;
												});
												return false;
											};
										};
									};
								};
								return true;
							};
							if (Std.is(expected, haxe.IMap)) {
								if (status.recursive || status.path == "") {
									var map = cast (expected,haxe.IMap);
									var vmap = cast (value,haxe.IMap);
									var keys = {
										var ` = [];
										for (k in map.keys()) {
											`.push(k);
										};
										`;
									};
									var vkeys = {
										var `1 = [];
										for (k in vmap.keys()) {
											`1.push(k);
										};
										`1;
									};
									if (keys.length != vkeys.length) {
										status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (if (status.path == "") {
											"";
										} else {
											" for field " + status.path;
										});
										return false;
									};
									var path = status.path;
									{
										var `2 = 0;
										while (`2 < keys.length) {
											var key = keys[`2];
											++ `2;
											status.path = if (path == "") {
												"hash[" + Std.string(key) + "]";
											} else {
												path + "[" + Std.string(key) + "]";
											};
											if (! utest.Assert.sameAs(cast map.get(cast key), cast vmap.get(cast key), status, approx)) {
												status.error = "expected " + utest.Assert.q(status.expectedValue) + " but it is " + utest.Assert.q(status.actualValue) + (if (status.path == "") {
													"";
												} else {
													" for field " + status.path;
												});
												return false;
											};
										};
									};
								};
								return true;
							};
							if (utest.Assert.isIterator(expected, false)) {
								if (status.recursive || status.path == "") {
									var evalues = Lambda.array({iterator : function() return expected});
									var vvalues = Lambda.array({iterator : function() return value});
									if (evalues.length != vvalues.length) {
										status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (if (status.path == "") {
											"";
										} else {
											" for field " + status.path;
										});
										return false;
									};
									var path = status.path;
									{
										var ` = 0;
										var `1 = evalues.length;
										while (` < `1) {
											var i = ` ++;
											status.path = if (path == "") {
												"iterator[" + i + "]";
											} else {
												path + "[" + i + "]";
											};
											if (! utest.Assert.sameAs(evalues[i], vvalues[i], status, approx)) {
												status.error = "expected " + utest.Assert.q(status.expectedValue) + " but it is " + utest.Assert.q(status.actualValue) + (if (status.path == "") {
													"";
												} else {
													" for field " + status.path;
												});
												return false;
											};
										};
									};
								};
								return true;
							};
							if (utest.Assert.isIterable(expected, false)) {
								if (status.recursive || status.path == "") {
									var evalues = Lambda.array(expected);
									var vvalues = Lambda.array(value);
									if (evalues.length != vvalues.length) {
										status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (if (status.path == "") {
											"";
										} else {
											" for field " + status.path;
										});
										return false;
									};
									var path = status.path;
									{
										var ` = 0;
										var `1 = evalues.length;
										while (` < `1) {
											var i = ` ++;
											status.path = if (path == "") {
												"iterable[" + i + "]";
											} else {
												path + "[" + i + "]";
											};
											if (! utest.Assert.sameAs(evalues[i], vvalues[i], status, approx)) {
												return false;
											};
										};
									};
								};
								return true;
							};
							if (status.recursive || status.path == "") {
								var fields = Type.getInstanceFields(Type.getClass(expected));
								var path = status.path;
								{
									var ` = 0;
									while (` < fields.length) {
										var field = fields[`];
										++ `;
										status.path = if (path == "") {
											field;
										} else {
											path + "." + field;
										};
										var e = Reflect.field(expected, field);
										if (Reflect.isFunction(e)) {
											continue;
										};
										var v = Reflect.field(value, field);
										if (! utest.Assert.sameAs(e, v, status, approx)) {
											return false;
										};
									};
								};
							};
							return true;
						};
					};
				};
				case 7: {
					var `2 = `[0];
					{
						var e = `2;
						{
							var eexpected = Type.getEnumName(e);
							var evalue = Type.getEnumName(Type.getEnum(value));
							if (eexpected != evalue) {
								status.error = "expected enumeration of " + utest.Assert.q(eexpected) + " but it is " + utest.Assert.q(evalue) + (if (status.path == "") {
									"";
								} else {
									" for field " + status.path;
								});
								return false;
							};
							if (status.recursive || status.path == "") {
								if (Type.enumIndex(expected) != Type.enumIndex(value)) {
									status.error = "expected enum constructor " + utest.Assert.q(Type.enumConstructor(expected)) + " but it is " + utest.Assert.q(Type.enumConstructor(value)) + (if (status.path == "") {
										"";
									} else {
										" for field " + status.path;
									});
									return false;
								};
								var eparams = Type.enumParameters(expected);
								var vparams = Type.enumParameters(value);
								var path = status.path;
								{
									var ` = 0;
									var `1 = eparams.length;
									while (` < `1) {
										var i = ` ++;
										status.path = if (path == "") {
											"enum[" + i + "]";
										} else {
											path + "[" + i + "]";
										};
										if (! utest.Assert.sameAs(eparams[i], vparams[i], status, approx)) {
											status.error = "expected enum param " + utest.Assert.q(expected) + " but it is " + utest.Assert.q(value) + (if (status.path == "") {
												"";
											} else {
												" for field " + status.path;
											}) + " with " + status.error;
											return false;
										};
									};
								};
							};
							return true;
						};
					};
				};
				case 8: {
					{
						return throw throw haxe.Exception.thrown("Unable to compare two unknown types");
					};
				};
			};
		};
		return throw throw haxe.Exception.thrown("Unable to compare values: " + utest.Assert.q(expected) + " and " + utest.Assert.q(value));
	}

	static function q(v:Dynamic) {
		if (Std.is(v, String)) {
			return "\"" + StringTools.replace(v, "\"", "\\\"") + "\"";
		} else {
			return Std.string(v);
		};
	}

	public static function same(expected:Dynamic, value:Dynamic, recursive:Null<Bool> = null, msg:Null<String> = null, approx:Null<Float> = null, pos:Null<haxe.PosInfos> = null) {
		if (null == approx) {
			approx = 1e-5;
		};
		var status = {recursive : if (null == recursive) {
			true;
		} else {
			recursive;
		}, path : "", error : null, expectedValue : expected, actualValue : value};
		if (utest.Assert.sameAs(expected, value, status, approx)) {
			utest.Assert.pass(msg, pos);
		} else {
			utest.Assert.fail(if (msg == null) {
				status.error;
			} else {
				msg;
			}, pos);
		};
	}

	public static function raises(method:Void -> Void, type:Null<Class<Dynamic>> = null, msgNotThrown:Null<String> = null, msgWrongType:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		var name = if (type != null) {
			Type.getClassName(type);
		} else {
			"Dynamic";
		};
		try {
			method();
			if (null == msgNotThrown) {
				msgNotThrown = "exception of type " + name + " not raised";
			};
			utest.Assert.fail(msgNotThrown, pos);
		} catch (`96:Dynamic) {
			var `97 = haxe.Exception.caught(`96);
			var `98 = `97.unwrap();
			if (true) {
				var ex = `98;
				{
					if (null == type) {
						utest.Assert.pass(null, pos);
					} else {
						if (null == msgWrongType) {
							msgWrongType = "expected throw of type " + name + " but it is " + Std.string(ex);
						};
						utest.Assert.isTrue(Std.is(ex, type), msgWrongType, pos);
					};
				};
			} else throw `96;
		};
	}

	public static function allows<T : allows.T>(possibilities:Array<allows.T>, value:allows.T, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		if (Lambda.has(possibilities, value)) {
			utest.Assert.isTrue(true, msg, pos);
		} else {
			utest.Assert.fail(if (msg == null) {
				"value " + utest.Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities);
			} else {
				msg;
			}, pos);
		};
	}

	public static function contains<T : contains.T>(match:contains.T, values:Array<contains.T>, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		if (Lambda.has(values, match)) {
			utest.Assert.isTrue(true, msg, pos);
		} else {
			utest.Assert.fail(if (msg == null) {
				"values " + utest.Assert.q(values) + " do not contain " + Std.string(match);
			} else {
				msg;
			}, pos);
		};
	}

	public static function notContains<T : notContains.T>(match:notContains.T, values:Array<notContains.T>, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		if (! Lambda.has(values, match)) {
			utest.Assert.isTrue(true, msg, pos);
		} else {
			utest.Assert.fail(if (msg == null) {
				"values " + utest.Assert.q(values) + " do contain " + Std.string(match);
			} else {
				msg;
			}, pos);
		};
	}

	public static function stringContains(match:String, value:String, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		if (value != null && value.indexOf(match, null) >= 0) {
			utest.Assert.isTrue(true, msg, pos);
		} else {
			utest.Assert.fail(if (msg == null) {
				"value " + utest.Assert.q(value) + " does not contain " + utest.Assert.q(match);
			} else {
				msg;
			}, pos);
		};
	}

	public static function stringSequence(sequence:Array<String>, value:String, msg:Null<String> = null, pos:Null<haxe.PosInfos> = null) {
		if (null == value) {
			utest.Assert.fail(if (msg == null) {
				"null argument value";
			} else {
				msg;
			}, pos);
			return;
		};
		var p = 0;
		{
			var ` = 0;
			while (` < sequence.length) {
				var s = sequence[`];
				++ `;
				var p2 = value.indexOf(s, p);
				if (p2 < 0) {
					if (msg == null) {
						msg = "expected '" + s + "' after ";
						if (p > 0) {
							var cut = value.substr(0, p);
							if (cut.length > 30) {
								cut = "..." + cut.substr(-27, null);
							};
							msg += " '" + cut + "'";
						} else {
							msg += " begin";
						};
					};
					utest.Assert.fail(msg, pos);
					return;
				};
				p = p2 + s.length;
			};
		};
		utest.Assert.isTrue(true, msg, pos);
	}

	@:value({ msg : "pass expected" })
	public static function pass(msg:String = "pass expected", pos:Null<haxe.PosInfos> = null) {
		utest.Assert.isTrue(true, msg, pos);
	}

	@:value({ msg : "failure expected" })
	public static function fail(msg:String = "failure expected", pos:Null<haxe.PosInfos> = null) {
		utest.Assert.isTrue(false, msg, pos);
	}

	public static function warn(msg:String) {
		utest.Assert.results.add(utest.Assertation.Warning(msg));
	}

	public static dynamic function createAsync(f:Null<Void -> Void> = null, timeout:Null<Int> = null) {
		return function() {};
	}

	public static dynamic function createEvent<EventArg : createEvent.EventArg>(f:createEvent.EventArg -> Void, timeout:Null<Int> = null) {
		return function(e:Unknown<1>) {};
	}

	static function typeToString(t:Dynamic) {
		try {
			var _t = Type.getClass(t);
			if (_t != null) {
				t = _t;
			};
		} catch (`99:Dynamic) {
			{};
			{};
			if (true) {
				{};
				{};
			} else throw `99;
		};
		try {
			return Type.getClassName(t);
		} catch (`102:Dynamic) {
			{};
			{};
			if (true) {
				{};
				{};
			} else throw `102;
		};
		try {
			var _t = Type.getEnum(t);
			if (_t != null) {
				t = _t;
			};
		} catch (`105:Dynamic) {
			{};
			{};
			if (true) {
				{};
				{};
			} else throw `105;
		};
		try {
			return Type.getEnumName(t);
		} catch (`108:Dynamic) {
			{};
			{};
			if (true) {
				{};
				{};
			} else throw `108;
		};
		try {
			return Std.string(Type.typeof(t));
		} catch (`111:Dynamic) {
			{};
			{};
			if (true) {
				{};
				{};
			} else throw `111;
		};
		try {
			return Std.string(t);
		} catch (`114:Dynamic) {
			{};
			{};
			if (true) {
				{};
				{};
			} else throw `114;
		};
		return "<unable to retrieve type name>";
	}
}
extern class Array<T : Array.T> {

	function new():Void;

	var length(default,null):Int;

	function concat(a:Array<Array.T>):Array<Array.T>;

	function join(sep:String):String;

	function pop():Null<Array.T>;

	function push(x:Array.T):Int;

	function reverse():Void;

	function shift():Null<Array.T>;

	function slice(pos:Int, end:Null<Int>):Array<Array.T>;

	function sort(f:(Array.T, Array.T) -> Int):Void;

	function splice(pos:Int, len:Int):Array<Array.T>;

	function toString():String;

	function unshift(x:Array.T):Void;

	function insert(pos:Int, x:Array.T):Void;

	function remove(x:Array.T):Bool;

	@:pure
	function contains(x:Array.T):Bool;

	function indexOf(x:Array.T, fromIndex:Null<Int>):Int;

	function lastIndexOf(x:Array.T, fromIndex:Null<Int>):Int;

	function copy():Array<Array.T>;

	@:maybeUsed @:runtime
	inline function iterator():haxe.iterators.ArrayIterator<Array.T>;

	@:pure @:runtime
	inline function keyValueIterator():haxe.iterators.ArrayKeyValueIterator<Array.T>;

	@:runtime
	inline function map<S : map.S>(f:Array.T -> map.S):Array<map.S>;

	@:runtime
	inline function filter(f:Array.T -> Bool):Array<Array.T>;

	function resize(len:Int):Void;
}
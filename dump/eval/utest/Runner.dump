@:directlyUsed @:used
class utest.Runner {

	public function new() {
		this.executedFixtures = 0;
		this.pos = 0;
		this.complete = false;
		this.globalPattern = null;
		this.iTestFixtures = new haxe.ds.ObjectMap();
		this.fixtures = [];
		this.onProgress = new utest.Dispatcher();
		this.onStart = new utest.Dispatcher();
		this.onComplete = new utest.Dispatcher();
		this.onPrecheck = new utest.Dispatcher();
		this.onTestStart = new utest.Dispatcher();
		this.onTestComplete = new utest.Dispatcher();
		this.length = 0;
		var envPattern = null;
		if ((envPattern != null)) this.globalPattern = new EReg(envPattern, "");
	}

	@:value([])
	var fixtures(default,null):Array<utest.TestFixture>;

	@:value(new Map())
	var iTestFixtures:Map<utest.ITest, { teardownClass : Void -> utest.Async, setupClass : Void -> utest.Async, fixtures : Array<utest.TestFixture> }>;

	public var onProgress(default,null):utest.Dispatcher<{ totals : Int, result : utest.TestResult, done : Int }>;

	public var onStart(default,null):utest.Dispatcher<utest.Runner>;

	public var onComplete(default,null):utest.Dispatcher<utest.Runner>;

	public var onPrecheck(default,null):utest.Dispatcher<utest.TestHandler<utest.TestFixture>>;

	public var onTestStart(default,null):utest.Dispatcher<utest.TestHandler<utest.TestFixture>>;

	public var onTestComplete(default,null):utest.Dispatcher<utest.TestHandler<utest.TestFixture>>;

	public var length(default,null):Int;

	@:value(null)
	public var globalPattern:Null<EReg>;

	@:value(false)
	var complete:Bool;

	@:value({ teardownAsync : "teardownAsync", setupAsync : "setupAsync", prefix : "test", teardown : "teardown", setup : "setup" })
	public function addCase(test:Dynamic, setup:String = "setup", teardown:String = "teardown", prefix:String = "test", pattern:Null<EReg> = null, setupAsync:String = "setupAsync", teardownAsync:String = "teardownAsync") {
		if ((Std.is(test, utest.ITest))) this.addITest(test, pattern) else this.addCaseOld(test, setup, teardown, prefix, pattern, setupAsync, teardownAsync);
	}

	function addITest(testCase:utest.ITest, pattern:Null<EReg>) {
		if ((cast cast this.iTestFixtures.exists(testCase))) throw haxe.Exception.thrown("Cannot add the same test twice.");
		var fixtures = [];
		var init = cast testCase.__initializeUtest__();
		{
			var ` = 0;
			var `1 = init.tests;
			while ((` < `1.length)) {
				var test = `1[`];
				++ `;
				if ((! this.isTestFixtureName(test.name, ["test", "spec"], pattern, this.globalPattern))) continue;
				var fixture = utest.TestFixture.ofData(testCase, test, init.accessories);
				this.addFixture(fixture);
				fixtures.push(fixture);
			};
		};
		cast cast this.iTestFixtures.set(testCase, {setupClass : utest.utils.AccessoriesUtils.getSetupClass(init.accessories), fixtures : fixtures, teardownClass : utest.utils.AccessoriesUtils.getTeardownClass(init.accessories)});
	}

	@:value({ teardownAsync : "teardownAsync", setupAsync : "setupAsync", prefix : "test", teardown : "teardown", setup : "setup" })
	function addCaseOld(test:Dynamic, setup:String = "setup", teardown:String = "teardown", prefix:String = "test", pattern:Null<EReg> = null, setupAsync:String = "setupAsync", teardownAsync:String = "teardownAsync") {
		if ((! Reflect.isObject(test))) throw haxe.Exception.thrown("can't add a null object as a test case");
		if ((! this.isMethod(test, setup))) setup = null;
		if ((! this.isMethod(test, setupAsync))) setupAsync = null;
		if ((! this.isMethod(test, teardown))) teardown = null;
		if ((! this.isMethod(test, teardownAsync))) teardownAsync = null;
		var fields = Type.getInstanceFields(Type.getClass(test));
		{
			var ` = 0;
			while ((` < fields.length)) {
				var field = fields[`];
				++ `;
				if ((! this.isMethod(test, field))) continue;
				if ((! this.isTestFixtureName(field, [prefix], pattern, this.globalPattern))) continue;
				this.addFixture(new utest.TestFixture(test, field, setup, teardown, setupAsync, teardownAsync));
			};
		};
	}

	function isTestFixtureName(name:String, prefixes:Array<String>, pattern:Null<EReg> = null, globalPattern:Null<EReg> = null) {
		if ((pattern == null && globalPattern == null)) {
			{
				var ` = 0;
				while ((` < prefixes.length)) {
					var prefix = prefixes[`];
					++ `;
					if ((StringTools.startsWith(name, prefix))) return true;
				};
			};
			return false;
		};
		if ((pattern == null)) pattern = globalPattern;
		return pattern.match(name);
	}

	public function addFixture(fixture:utest.TestFixture) {
		this.fixtures.push(fixture);
		this.length ++;
	}

	public function getFixture(index:Int) {
		return this.fixtures[index];
	}

	function isMethod(test:Dynamic, name:String) {
		try {
			return Reflect.isFunction(Reflect.field(test, name));
		} catch (`1824:Dynamic) {
			{
				null;
			};
			return false;
		};
	}

	public function run() {
		this.onStart.dispatch(this);
		var iTestRunner = new utest._Runner.ITestRunner(this);
		iTestRunner.run();
		this.waitForCompletion();
	}

	function waitForCompletion() {
		if ((! this.complete)) haxe.Timer.delay(this.waitForCompletion, 100);
	}

	@:value(0)
	var pos:Int;

	@:value(0)
	var executedFixtures:Int;

	function runNext(finishedHandler:Null<utest.TestHandler<utest.TestFixture>> = null) {
		{
			var ` = this.pos;
			var `1 = this.fixtures.length;
			while ((` < `1)) {
				var i = ` ++;
				var fixture = this.fixtures[this.pos ++];
				if ((fixture.isITest)) continue;
				var handler = this.runFixture(fixture);
				if ((! handler.finished)) {
					handler.onComplete.add(this.runNext);
					return;
				};
			};
		};
		this.complete = true;
		this.onComplete.dispatch(this);
	}

	function runFixture(fixture:utest.TestFixture) {
		var handler = if ((fixture.isITest)) new utest.ITestHandler(fixture) else new utest.TestHandler(fixture);
		handler.onComplete.add(this.testComplete);
		handler.onPrecheck.add(this.onPrecheck.dispatch);
		this.onTestStart.dispatch(handler);
		handler.execute();
		return handler;
	}

	function testComplete(h:utest.TestHandler<utest.TestFixture>) {
		++ this.executedFixtures;
		this.onTestComplete.dispatch(h);
		this.onProgress.dispatch({result : utest.TestResult.ofHandler(h), done : this.executedFixtures, totals : this.length});
	}
}
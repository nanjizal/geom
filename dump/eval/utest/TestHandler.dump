@:directlyUsed @:used
class utest.TestHandler<T : utest.TestHandler.T> {

	public function new(fixture:utest.TestFixture) {
		this.wasBound = false;
		this.finished = false;
		if ((fixture == null)) throw haxe.Exception.thrown("fixture argument is null");
		this.fixture = fixture;
		this.results = new haxe.ds.List();
		this.asyncStack = new haxe.ds.List();
		this.onTested = new utest.Dispatcher();
		this.onTimeout = new utest.Dispatcher();
		this.onComplete = new utest.Dispatcher();
		this.onPrecheck = new utest.Dispatcher();
		if ((cast fixture.ignoringInfo != null)) this.results.add(utest.Assertation.Ignore(cast fixture.ignoringInfo));
	}

	public var results(default,null):List<utest.Assertation>;

	public var fixture(default,null):utest.TestFixture;

	@:value(false)
	public var finished(default,null):Bool;

	var asyncStack:List<Dynamic>;

	public var onTested(default,null):utest.Dispatcher<utest.TestHandler<utest.TestHandler.T>>;

	public var onTimeout(default,null):utest.Dispatcher<utest.TestHandler<utest.TestHandler.T>>;

	public var onComplete(default,null):utest.Dispatcher<utest.TestHandler<utest.TestHandler.T>>;

	public var onPrecheck(default,null):utest.Dispatcher<utest.TestHandler<utest.TestHandler.T>>;

	public var precheck(default,null):Void -> Void;

	@:value(false)
	var wasBound:Bool;

	public function execute() {
		var `this = this;
		if ((cast this.fixture.ignoringInfo != null)) {
			this.executeFinally();
			return;
		};
		var isSync = [true];
		var expectingAsync = [true];
		var run = function() {
			if ((isSync[0])) {
				expectingAsync[0] = false;
				return;
			};
			`this.executeFixtureMethod();
			`this.executeFinally();
		};
		try {
			this.executeMethod(this.fixture.setup);
			this.executeAsyncMethod(this.fixture.setupAsync, run);
			if ((! expectingAsync[0])) this.executeFixtureMethod();
		} catch (`1800:Dynamic) {
			{
				null;
			};
			var e = cast haxe.Exception.caught(`1800).unwrap();
			this.results.add(utest.Assertation.SetupError(e, utest.TestHandler.exceptionStack(null)));
		};
		isSync[0] = false;
		if ((! expectingAsync[0])) this.executeFinally();
	}

	function executeFixtureMethod() {
		try {
			this.executeMethod(this.fixture.method);
		} catch (`1803:Dynamic) {
			{
				null;
			};
			var e = cast haxe.Exception.caught(`1803).unwrap();
			this.results.add(utest.Assertation.Error(e, utest.TestHandler.exceptionStack(null)));
		};
	}

	function executeFinally() {
		this.onPrecheck.dispatch(this);
		this.checkTested();
	}

	function checkTested() {
		if ((this.expiration == null || this.asyncStack.length == 0)) this.tested() else if ((Sys.time() > this.expiration)) this.timeout() else haxe.Timer.delay(this.checkTested, 10);
	}

	public var expiration(default,null):Null<Float>;

	public function setTimeout(timeout:Int) {
		var newExpire = Sys.time() + timeout / 1000;
		this.expiration = if ((this.expiration == null)) newExpire else if ((newExpire > this.expiration)) newExpire else this.expiration;
	}

	function bindHandler() {
		if ((this.wasBound)) return;
		utest.Assert.results = this.results;
		utest.Assert.createAsync = this.addAsync;
		utest.Assert.createEvent = this.addEvent;
		this.wasBound = true;
	}

	function unbindHandler() {
		if ((! this.wasBound)) return;
		utest.Assert.results = null;
		utest.Assert.createAsync = function(f:Null<Void -> Void> = null, t:Null<Int> = null) {
			return function() {};
		};
		utest.Assert.createEvent = function(f:Unknown<1> -> Void, t:Null<Int> = null) {
			return function(e:Unknown<0>) {};
		};
		this.wasBound = false;
	}

	@:value({ timeout : 250 })
	public function addAsync(f:Null<Void -> Void> = null, timeout:Int = 250) {
		if ((null == f)) f = function() {};
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function() {
			if ((! handler.asyncStack.remove(f))) {
				handler.results.add(utest.Assertation.AsyncError("async function already executed", []));
				return;
			};
			try {
				handler.bindHandler();
				f();
			} catch (`1806:Dynamic) {
				{
					null;
				};
				var e = cast haxe.Exception.caught(`1806).unwrap();
				handler.results.add(utest.Assertation.AsyncError(e, utest.TestHandler.exceptionStack(0)));
			};
		};
	}

	@:value({ timeout : 250 })
	public function addEvent<EventArg : addEvent.EventArg>(f:addEvent.EventArg -> Void, timeout:Int = 250) {
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function(e:addEvent.EventArg) {
			if ((! handler.asyncStack.remove(f))) {
				handler.results.add(utest.Assertation.AsyncError("event already executed", []));
				return;
			};
			try {
				handler.bindHandler();
				f(e);
			} catch (`1809:Dynamic) {
				{
					null;
				};
				var e = cast haxe.Exception.caught(`1809).unwrap();
				handler.results.add(utest.Assertation.AsyncError(e, utest.TestHandler.exceptionStack(0)));
			};
		};
	}

	function executeMethod(name:String) {
		if ((name == null)) return;
		this.bindHandler();
		Reflect.callMethod(this.fixture.target, Reflect.field(this.fixture.target, name), []);
	}

	function executeAsyncMethod(name:String, done:Void -> Void) {
		if ((name == null)) {
			done();
			return;
		};
		this.bindHandler();
		Reflect.callMethod(this.fixture.target, Reflect.field(this.fixture.target, name), [done]);
	}

	function tested() {
		if ((this.results.length == 0)) this.results.add(utest.Assertation.Warning("no assertions"));
		this.onTested.dispatch(this);
		this.completed();
	}

	function timeout() {
		this.results.add(utest.Assertation.TimeoutError(this.asyncStack.length, []));
		this.onTimeout.dispatch(this);
		this.completed();
	}

	function completed() {
		var `this = this;
		if ((cast this.fixture.ignoringInfo != null)) {
			this.completedFinally();
			return;
		};
		var isSync = [true];
		var expectingAsync = [true];
		var complete = function() {
			if ((isSync[0])) {
				expectingAsync[0] = false;
				return;
			};
			`this.completedFinally();
		};
		try {
			this.executeMethod(this.fixture.teardown);
			this.executeAsyncMethod(this.fixture.teardownAsync, complete);
		} catch (`1812:Dynamic) {
			{
				null;
			};
			var e = cast haxe.Exception.caught(`1812).unwrap();
			this.results.add(utest.Assertation.TeardownError(e, utest.TestHandler.exceptionStack(2)));
		};
		isSync[0] = false;
		if ((! expectingAsync[0])) this.completedFinally();
	}

	function completedFinally() {
		this.finished = true;
		this.unbindHandler();
		this.onComplete.dispatch(this);
	}

	@:value(10)
	static inline var POLLING_TIME:Int = 10;

	@:value({ pops : 2 })
	static function exceptionStack(pops:Int = 2) {
		var stack = haxe._CallStack.CallStack_Impl_.exceptionStack();
		while ((pops -- > 0)) stack.pop();
		return stack;
	}
}
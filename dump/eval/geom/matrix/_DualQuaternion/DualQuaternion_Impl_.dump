@:used
private class geom.matrix._DualQuaternion.DualQuaternion_Impl_ {

	@:impl @:noCompletion
	public static inline function _new(dq:geom.structure.DualQ) {
		var this = dq;
		return cast this;
	}

	public static var zero(get,never):geom.matrix.DualQuaternion;

	static inline function get_zero() {
		var this = new geom.structure.Mat1x4(0., 0., 0., 1.);
		var this = new geom.structure.Mat1x4(0., 0., 0., 1.);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:impl
	public static inline function clone(this:geom.structure.DualQ) {
		var this = this.real;
		var this = new geom.structure.Mat1x4(this.x, this.y, this.z, this.w);
		var this = this.dual;
		var this = new geom.structure.Mat1x4(this.x, this.y, this.z, this.w);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:op(A == B)
	public static inline function equal(a:geom.matrix.DualQuaternion, b:geom.matrix.DualQuaternion) {
		var a = a.real;
		var b = b.real;
		var delta = 0.0000001;
		if ((! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta))) {
			var a = a.dual;
			var b = b.dual;
			var delta = 0.0000001;
			return ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
		} else return false;
	}

	@:op(A != B)
	public static inline function notEqual(a:geom.matrix.DualQuaternion, b:geom.matrix.DualQuaternion) {
		var tmp;
		var a = a.real;
		var b = b.real;
		var delta = 0.0000001;
		if ((! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta))) {
			var a = a.dual;
			var b = b.dual;
			var delta = 0.0000001;
			tmp = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
		} else tmp = false;
		return ! tmp;
	}

	@:op(A * B) @:commutative
	public static inline function scaleMultiply(a:geom.matrix.DualQuaternion, v:Float) {
		var a = a.real;
		var this = new geom.structure.Mat1x4(a.x * v, a.y * v, a.z * v, a.w * v);
		var a = a.dual;
		var this = new geom.structure.Mat1x4(a.x * v, a.y * v, a.z * v, a.w * v);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:op(A / B)
	public static inline function divide(a:geom.matrix.DualQuaternion, v:Float) {
		var v = 1 / v;
		var a = a.real;
		var this = new geom.structure.Mat1x4(a.x * v, a.y * v, a.z * v, a.w * v);
		var a = a.dual;
		var this = new geom.structure.Mat1x4(a.x * v, a.y * v, a.z * v, a.w * v);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:op(A + B)
	public static inline function add(a:geom.matrix.DualQuaternion, b:geom.matrix.DualQuaternion) {
		var a = a.real;
		var b = b.real;
		var this = new geom.structure.Mat1x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
		var a = a.dual;
		var b = b.dual;
		var this = new geom.structure.Mat1x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:op(A - B)
	public static inline function subtract(a:geom.matrix.DualQuaternion, b:geom.matrix.DualQuaternion) {
		var a = a.real;
		var b = b.real;
		var this = new geom.structure.Mat1x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
		var a = a.dual;
		var b = b.dual;
		var this = new geom.structure.Mat1x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:op(-A)
	public static inline function negate(a:geom.matrix.DualQuaternion) {
		var a = a.real;
		var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, - a.w);
		var a = a.dual;
		var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, - a.w);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	public static inline function create(r:geom.matrix.Quaternion, t:geom.matrix.Matrix1x4) {
		{
			var currentLength = Math.sqrt(cast r.x * cast r.x + cast r.y * cast r.y + cast r.z * cast r.z + cast r.w * cast r.w);
			if ((currentLength != 0.)) {
				var mul = 1. / currentLength;
				cast r.x *= mul;
				cast r.y *= mul;
				cast r.z *= mul;
				cast r.w *= mul;
				var real = cast r.x * cast r.x + cast r.y * cast r.y + cast r.z * cast r.z + cast r.w * cast r.w;
			};
		};
		var real = cast cast r;
		var this = new geom.structure.Mat1x4(t.x, t.y, t.z, 0.);
		var q = cast this;
		var this = new geom.structure.Mat1x4(q.x * 0.5, q.y * 0.5, q.z * 0.5, q.w * 0.5);
		q = cast this;
		var this = new geom.structure.Mat1x4(q.x * real.w + q.y * real.z - q.z * real.y + q.w * real.x, - q.x * real.z + q.y * real.w + q.z * real.x + q.w * real.y, q.x * real.y - q.y * real.x + q.z * real.w + q.w * real.z, - q.x * real.x - q.y * real.y - q.z * real.z + q.w * real.w);
		var dual = cast this;
		var this = new geom.structure.DualQ(real, dual);
		return cast this;
	}

	@:impl
	public static inline function applyScale(this:geom.structure.DualQ, s:Float) {
		var this = cast this.real;
		var this = new geom.structure.Mat1x4(this.x, this.y, this.z, this.w);
		var this = cast this.dual;
		var this = new geom.structure.Mat1x4(this.x, this.y, this.z, this.w);
		var this = new geom.structure.DualQ(cast this, cast this);
		var cloned = cast this;
		var this = new geom.structure.Mat1x4(cast 0, cast 0, cast 0, Math.sqrt(s));
		var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
		var this = new geom.structure.DualQ(cast this, cast this);
		var q2 = cast this;
		var q1 = q2.real;
		var q2 = cloned.real;
		var this = new geom.structure.Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x, - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y, q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z, - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		var q1 = q2.dual;
		var q2 = cloned.real;
		var this = new geom.structure.Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x, - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y, q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z, - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		var a = cast this;
		var q1 = q2.real;
		var q2 = cloned.dual;
		var this = new geom.structure.Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x, - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y, q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z, - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		var b = cast this;
		var this = new geom.structure.Mat1x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
		var this = new geom.structure.DualQ(cast this, cast this);
		cloned = cast this;
		return cloned;
	}

	public static inline function scalar(s:Float) {
		var this = new geom.structure.Mat1x4(cast 0, cast 0, cast 0, Math.sqrt(s));
		var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	public static inline function dotProduct(a:geom.matrix.DualQuaternion, b:geom.matrix.DualQuaternion) {
		var a = a.real;
		var b = b.real;
		return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	}

	@:impl
	public static inline function normalize(this:geom.structure.DualQ) {
		var a = this.real;
		var b = this.real;
		var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
		if ((mag < 0)) return null;
		var oneOver = 1 / mag;
		var a = this.real;
		var this = new geom.structure.Mat1x4(a.x * oneOver, a.y * oneOver, a.z * oneOver, a.w * oneOver);
		var a = this.dual;
		var this = new geom.structure.Mat1x4(a.x * oneOver, a.y * oneOver, a.z * oneOver, a.w * oneOver);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:op(~A)
	public static inline function conjugate(a:geom.matrix.DualQuaternion) {
		var a = a.real;
		var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, a.w);
		var a = a.dual;
		var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, a.w);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:impl
	public static inline function getTranslation(this:geom.structure.DualQ) {
		var a = this.dual;
		var this = new geom.structure.Mat1x4(a.x * 2., a.y * 2., a.z * 2., a.w * 2.);
		var q = cast this;
		var a = this.real;
		var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, a.w);
		var q2 = cast this;
		var this = new geom.structure.Mat1x4(q.x * q2.w + q.y * q2.z - q.z * q2.y + q.w * q2.x, - q.x * q2.z + q.y * q2.w + q.z * q2.x + q.w * q2.y, q.x * q2.y - q.y * q2.x + q.z * q2.w + q.w * q2.z, - q.x * q2.x - q.y * q2.y - q.z * q2.z + q.w * q2.w);
		q = cast this;
		var this = new geom.structure.Mat1x4(q.x, q.y, q.z, 1.);
		return cast this;
	}

	@:op(A * B)
	public static inline function multiplyQ(q1:geom.matrix.DualQuaternion, q2:geom.matrix.DualQuaternion) {
		var q1 = q2.real;
		var q2 = q1.real;
		var this = new geom.structure.Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x, - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y, q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z, - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		var q1 = q2.dual;
		var q2 = q1.real;
		var this = new geom.structure.Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x, - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y, q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z, - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		var a = cast this;
		var q1 = q2.real;
		var q2 = q1.dual;
		var this = new geom.structure.Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x, - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y, q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z, - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		var b = cast this;
		var this = new geom.structure.Mat1x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
		var this = new geom.structure.DualQ(cast this, cast this);
		return cast this;
	}

	@:impl @:to
	public static inline function toMatrix4x3(this:geom.structure.DualQ) {
		var a = cast this.real;
		var b = cast this.real;
		var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
		var q;
		if ((mag < 0)) q = null else {
			var oneOver = 1 / mag;
			var a = cast this.real;
			var this = new geom.structure.Mat1x4(a.x * oneOver, a.y * oneOver, a.z * oneOver, a.w * oneOver);
			var a = cast this.dual;
			var this = new geom.structure.Mat1x4(a.x * oneOver, a.y * oneOver, a.z * oneOver, a.w * oneOver);
			var this = new geom.structure.DualQ(cast this, cast this);
			q = cast this;
		};
		var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
		var m = cast this;
		var w = q.real.w;
		var x = q.real.x;
		var y = q.real.y;
		var z = q.real.z;
		m.a = w * w + x * x - y * y - z * z;
		m.e = 2 * x * y + 2 * w * z;
		m.i = 2 * x * z - 2 * w * y;
		m.b = 2 * x * y - 2 * w * z;
		m.f = w * w + y * y - x * x - z * z;
		m.j = 2 * y * z + 2 * w * x;
		m.c = 2 * x * z + 2 * w * y;
		m.g = 2 * y * z - 2 * w * x;
		m.k = w * w + z * z - x * x - y * y;
		var a = cast q.dual;
		var this = new geom.structure.Mat1x4(a.x * 2., a.y * 2., a.z * 2., a.w * 2.);
		var q = cast this;
		var a = cast q.real;
		var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, a.w);
		var q2 = cast this;
		var this = new geom.structure.Mat1x4(q.x * q2.w + q.y * q2.z - q.z * q2.y + q.w * q2.x, - q.x * q2.z + q.y * q2.w + q.z * q2.x + q.w * q2.y, q.x * q2.y - q.y * q2.x + q.z * q2.w + q.w * q2.z, - q.x * q2.x - q.y * q2.y - q.z * q2.z + q.w * q2.w);
		q = cast this;
		var this = new geom.structure.Mat1x4(q.x, q.y, q.z, 1.);
		var t = cast this;
		m.d = t.x;
		m.h = t.y;
		m.l = t.z;
		return m;
	}
}
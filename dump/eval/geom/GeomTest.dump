@:used @:utestProcessed @:keep @:build(utest.utils.TestBuilder.build()) @:autoBuild(utest.utils.TestBuilder.build()) @:build(hx.doctest.DocTestGenerator.generateDocTests()) @:build(utest.utils.TestBuilder.build())
class geom.GeomTest extends utest.Test {

	function new() {
		super();
	}

	@:keep
	public function testMultiVector3_1() {
		var left;
		try {
			var this = new geom.structure.MVec3(0., 0., 0., 0., 0., 0., 0., 0.);
			left = cast this;
		} catch (`:Dynamic) {
			{
				null;
			};
			var ex = cast haxe.Exception.caught(`).unwrap();
			left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
		};
		var right;
		try {
			var this = new geom.structure.MVec3(0., 0., 0., 0., 0., 0., 0., 0.);
			right = cast this;
		} catch (`3:Dynamic) {
			{
				null;
			};
			var ex = cast haxe.Exception.caught(`3).unwrap();
			right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
		};
		if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("MultiVector3.hx:11 [OK] MultiVector3.zero == new MultiVector3({ s:0., x:0., y:0., z:0., xy:0., zx:0., yz:0., xyz:0. })", {lineNumber : 11, fileName : "src/geom/ga/MultiVector3.hx", className : "", methodName : ""}) else utest.Assert.fail("MultiVector3.zero == new MultiVector3({ s:0., x:0., y:0., z:0., xy:0., zx:0., yz:0., xyz:0. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 11, fileName : "src/geom/ga/MultiVector3.hx", className : "", methodName : ""});
	}

	@:keep
	public function testMultiVector2_1() {
		var left;
		try {
			var this = new geom.structure.MVec2(0., 0., 0., 0.);
			left = cast this;
		} catch (`6:Dynamic) {
			{
				null;
			};
			var ex = cast haxe.Exception.caught(`6).unwrap();
			left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
		};
		var right;
		try {
			var this = new geom.structure.MVec2(0., 0., 0., 0.);
			right = cast this;
		} catch (`9:Dynamic) {
			{
				null;
			};
			var ex = cast haxe.Exception.caught(`9).unwrap();
			right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
		};
		if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("MultiVector2.hx:12 [OK] MultiVector2.zero == new MultiVector2({ s:0., x:0., y:0., xy:0. })", {lineNumber : 12, fileName : "src/geom/ga/MultiVector2.hx", className : "", methodName : ""}) else utest.Assert.fail("MultiVector2.zero == new MultiVector2({ s:0., x:0., y:0., xy:0. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 12, fileName : "src/geom/ga/MultiVector2.hx", className : "", methodName : ""});
	}

	@:keep
	public function testMatrix5x5_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				left = cast this;
			} catch (`12:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`12).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				var this = cast this;
				var this = new geom.structure.Mat5x5(this.a, this.b, this.c, this.d, this.e, this.f, this.g, this.h, this.i, this.j, this.k, this.l, this.m, this.n, this.o, this.p, this.q, this.r, this.s, this.t, this.u, this.v, this.w, this.x, this.y);
				right = cast this;
			} catch (`15:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`15).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:20 [OK] Matrix5x5.counting == Matrix5x5.counting.clone()", {lineNumber : 20, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix5x5.counting == Matrix5x5.counting.clone() --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 20, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				var m = cast this;
				var arr = new Array();
				var `_current = 0;
				var `_array = [cast m.a, cast m.b, cast m.c, cast m.d, cast m.e, cast m.f, cast m.g, cast m.h, cast m.i, cast m.j, cast m.k, cast m.l, cast m.m, cast m.n, cast m.o, cast m.p, cast m.q, cast m.r, cast m.s, cast m.t, cast m.u, cast m.v, cast m.w, cast m.x, cast m.y];
				while ((`_current < `_array.length)) {
					var i = `_array[`_current ++];
					arr.push(i);
				};
				left = [1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.].toString() == arr.toString();
			} catch (`18:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`18).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`21:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`21).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:33 [OK] ({\nvar m = Matrix5x5.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.,17.,18.,19.,20.,21.,22.,23.,24.,25.].toString() == arr.toString(); }) == true", {lineNumber : 33, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = Matrix5x5.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.,17.,18.,19.,20.,21.,22.,23.,24.,25.].toString() == arr.toString(); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 33, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta || Math.abs(a.q - b.q) >= delta || Math.abs(a.r - b.r) >= delta || Math.abs(a.s - b.s) >= delta || Math.abs(a.t - b.t) >= delta || Math.abs(a.u - b.u) >= delta || Math.abs(a.v - b.v) >= delta || Math.abs(a.w - b.w) >= delta || Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`24:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`24).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`27:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`27).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:54 [OK] ({\nMatrix5x5.zero == new Matrix5x5({ a: 0., b: 0., c: 0., d: 0., e: 0.\n, f: 0., g: 0., h: 0., i: 0., j: 0.\n, k: 0., l: 0., m: 0., n: 0., o: 0.\n, p: 0., q: 0., r: 0., s: 0., t: 0.\n, u: 0., v: 0., w: 0., x: 0., y: 0. } );\n}) == true", {lineNumber : 54, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix5x5.zero == new Matrix5x5({ a: 0., b: 0., c: 0., d: 0., e: 0.\n, f: 0., g: 0., h: 0., i: 0., j: 0.\n, k: 0., l: 0., m: 0., n: 0., o: 0.\n, p: 0., q: 0., r: 0., s: 0., t: 0.\n, u: 0., v: 0., w: 0., x: 0., y: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 54, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta || Math.abs(a.q - b.q) >= delta || Math.abs(a.r - b.r) >= delta || Math.abs(a.s - b.s) >= delta || Math.abs(a.t - b.t) >= delta || Math.abs(a.u - b.u) >= delta || Math.abs(a.v - b.v) >= delta || Math.abs(a.w - b.w) >= delta || Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`30:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`30).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`33:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`33).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:82 [OK] ({\nMatrix5x5.unit == new Matrix5x5({ a: 1., b: 0., c: 0., d: 0., e: 0.\n, f: 0., g: 1., h: 0., i: 0., j: 0.\n, k: 0., l: 0., m: 1., n: 0., o: 0.\n, p: 0., q: 0., r: 0., s: 1., t: 0.\n, u: 0., v: 0., w: 0., x: 0., y: 1. } );\n}) == true", {lineNumber : 82, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix5x5.unit == new Matrix5x5({ a: 1., b: 0., c: 0., d: 0., e: 0.\n, f: 0., g: 1., h: 0., i: 0., j: 0.\n, k: 0., l: 0., m: 1., n: 0., o: 0.\n, p: 0., q: 0., r: 0., s: 1., t: 0.\n, u: 0., v: 0., w: 0., x: 0., y: 1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 82, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(- cast a.a, - cast a.b, - cast a.c, - cast a.d, - cast a.e, - cast a.f, - cast a.g, - cast a.h, - cast a.i, - cast a.j, - cast a.k, - cast a.l, - cast a.m, - cast a.n, - cast a.o, - cast a.p, - cast a.q, - cast a.r, - cast a.s, - cast a.t, - cast a.u, - cast a.v, - cast a.w, - cast a.x, - cast a.y);
				var a = cast this;
				var this = new geom.structure.Mat5x5(-1., 0., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta || Math.abs(a.q - b.q) >= delta || Math.abs(a.r - b.r) >= delta || Math.abs(a.s - b.s) >= delta || Math.abs(a.t - b.t) >= delta || Math.abs(a.u - b.u) >= delta || Math.abs(a.v - b.v) >= delta || Math.abs(a.w - b.w) >= delta || Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`36:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`36).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`39:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`39).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:107 [OK] ({\nMatrix5x5.minus1 == new Matrix5x5({ a: -1., b: 0., c: 0., d: 0., e: 0.\n, f: 0., g: -1., h: 0., i: 0., j: 0.\n, k: 0., l: 0., m: -1., n: 0., o: 0.\n, p: 0., q: 0., r: 0., s: -1., t: 0.\n, u: 0., v: 0., w: 0., x: 0., y: -1. } );\n}) == true", {lineNumber : 107, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix5x5.minus1 == new Matrix5x5({ a: -1., b: 0., c: 0., d: 0., e: 0.\n, f: 0., g: -1., h: 0., i: 0., j: 0.\n, k: 0., l: 0., m: -1., n: 0., o: 0.\n, p: 0., q: 0., r: 0., s: -1., t: 0.\n, u: 0., v: 0., w: 0., x: 0., y: -1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 107, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta || Math.abs(a.q - b.q) >= delta || Math.abs(a.r - b.r) >= delta || Math.abs(a.s - b.s) >= delta || Math.abs(a.t - b.t) >= delta || Math.abs(a.u - b.u) >= delta || Math.abs(a.v - b.v) >= delta || Math.abs(a.w - b.w) >= delta || Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`42:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`42).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`45:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`45).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:123 [OK] ({\nMatrix5x5.counting == new Matrix5x5({ a: 1.,  b: 2.,  c: 3.,  d: 4.,  e: 5.\n, f: 6.,  g: 7.,  h: 8.,  i: 9.,  j: 10.\n, k: 11., l: 12., m: 13., n: 14., o: 15.\n, p: 16., q: 17., r: 18., s: 19., t: 20.\n, u: 21., v: 22., w: 23., x: 24., y: 25. } );\n}) == true", {lineNumber : 123, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix5x5.counting == new Matrix5x5({ a: 1.,  b: 2.,  c: 3.,  d: 4.,  e: 5.\n, f: 6.,  g: 7.,  h: 8.,  i: 9.,  j: 10.\n, k: 11., l: 12., m: 13., n: 14., o: 15.\n, p: 16., q: 17., r: 18., s: 19., t: 20.\n, u: 21., v: 22., w: 23., x: 24., y: 25. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 123, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta || Math.abs(a.q - b.q) >= delta || Math.abs(a.r - b.r) >= delta || Math.abs(a.s - b.s) >= delta || Math.abs(a.t - b.t) >= delta || Math.abs(a.u - b.u) >= delta || Math.abs(a.v - b.v) >= delta || Math.abs(a.w - b.w) >= delta || Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`48:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`48).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`51:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`51).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:148 [OK] ({\nvar a = Matrix5x5.counting;\nvar b = Matrix5x5.counting;\na == b; }) == true", {lineNumber : 148, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix5x5.counting;\nvar b = Matrix5x5.counting;\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 148, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(a.a + a.a, a.b + a.b, a.c + a.c, a.d + a.d, a.e + a.e, a.f + a.f, a.g + a.g, a.h + a.h, a.i + a.i, a.j + a.j, a.k + a.k, a.l + a.l, a.m + a.m, a.n + a.n, a.o + a.o, a.p + a.p, a.q + a.q, a.r + a.r, a.s + a.s, a.t + a.t, a.u + a.u, a.v + a.v, a.w + a.w, a.x + a.x, a.y + a.y);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta || Math.abs(a.q - b.q) >= delta || Math.abs(a.r - b.r) >= delta || Math.abs(a.s - b.s) >= delta || Math.abs(a.t - b.t) >= delta || Math.abs(a.u - b.u) >= delta || Math.abs(a.v - b.v) >= delta || Math.abs(a.w - b.w) >= delta || Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`54:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`54).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`57:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`57).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:188 [OK] ({\nvar a = Matrix5x5.counting;\nvar b = a + a;\na != b; }) == true", {lineNumber : 188, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix5x5.counting;\nvar b = a + a;\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 188, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(- cast a.a, - cast a.b, - cast a.c, - cast a.d, - cast a.e, - cast a.f, - cast a.g, - cast a.h, - cast a.i, - cast a.j, - cast a.k, - cast a.l, - cast a.m, - cast a.n, - cast a.o, - cast a.p, - cast a.q, - cast a.r, - cast a.s, - cast a.t, - cast a.u, - cast a.v, - cast a.w, - cast a.x, - cast a.y);
				var b = cast this;
				var this = new geom.structure.Mat5x5(-1., -2., -3., -4., -5., -6., -7., cast -8, -9., -10., -11., -12., -13., -14., -15., -16., -17., -18., -19., -20., -21., -22., -23., -24., -25.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(b.a - b.a) >= delta || Math.abs(b.b - b.b) >= delta || Math.abs(b.c - b.c) >= delta || Math.abs(b.d - b.d) >= delta || Math.abs(b.e - b.e) >= delta || Math.abs(b.f - b.f) >= delta || Math.abs(b.g - b.g) >= delta || Math.abs(b.h - b.h) >= delta || Math.abs(b.i - b.i) >= delta || Math.abs(b.j - b.j) >= delta || Math.abs(b.k - b.k) >= delta || Math.abs(b.l - b.l) >= delta || Math.abs(b.m - b.m) >= delta || Math.abs(b.n - b.n) >= delta || Math.abs(b.o - b.o) >= delta || Math.abs(b.p - b.p) >= delta || Math.abs(b.q - b.q) >= delta || Math.abs(b.r - b.r) >= delta || Math.abs(b.s - b.s) >= delta || Math.abs(b.t - b.t) >= delta || Math.abs(b.u - b.u) >= delta || Math.abs(b.v - b.v) >= delta || Math.abs(b.w - b.w) >= delta || Math.abs(b.x - b.x) >= delta || Math.abs(b.y - b.y) >= delta);
			} catch (`60:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`60).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`63:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`63).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:203 [OK] ({\nvar a = Matrix5x5.counting;\nvar b = -a;\nb == new Matrix5x5({ a: -1., b: -2., c: -3., d: -4., e: -5.\n, f: -6., g: -7., h: -8, i: -9., j: -10.\n, k: -11., l: -12., m: -13., n: -14., o:-15.\n, p: -16., q: -17., r: -18., s: -19., t: -20.\n, u: -21., v: -22., w: -23., x: -24., y: -25. } );\n}) == true", {lineNumber : 203, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix5x5.counting;\nvar b = -a;\nb == new Matrix5x5({ a: -1., b: -2., c: -3., d: -4., e: -5.\n, f: -6., g: -7., h: -8, i: -9., j: -10.\n, k: -11., l: -12., m: -13., n: -14., o:-15.\n, p: -16., q: -17., r: -18., s: -19., t: -20.\n, u: -21., v: -22., w: -23., x: -24., y: -25. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 203, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(a.a + a.a, a.b + a.b, a.c + a.c, a.d + a.d, a.e + a.e, a.f + a.f, a.g + a.g, a.h + a.h, a.i + a.i, a.j + a.j, a.k + a.k, a.l + a.l, a.m + a.m, a.n + a.n, a.o + a.o, a.p + a.p, a.q + a.q, a.r + a.r, a.s + a.s, a.t + a.t, a.u + a.u, a.v + a.v, a.w + a.w, a.x + a.x, a.y + a.y);
				var a = cast this;
				var this = new geom.structure.Mat5x5(2., 0., 0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta || Math.abs(a.q - b.q) >= delta || Math.abs(a.r - b.r) >= delta || Math.abs(a.s - b.s) >= delta || Math.abs(a.t - b.t) >= delta || Math.abs(a.u - b.u) >= delta || Math.abs(a.v - b.v) >= delta || Math.abs(a.w - b.w) >= delta || Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`66:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`66).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`69:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`69).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:365 [OK] ({\nvar a = Matrix5x5.unit;\na + a == new Matrix5x5( { a: 2., b: 0., c: 0., d: 0., e: 0.\n, f: 0., g: 2., h: 0., i: 0., j: 0.\n, k: 0., l: 0., m: 2., n: 0., o: 0.\n, p: 0., q: 0., r: 0., s: 2., t: 0.\n, u: 0., v: 0., w: 0., x: 0., y: 2. } ); }) == true", {lineNumber : 365, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix5x5.unit;\na + a == new Matrix5x5( { a: 2., b: 0., c: 0., d: 0., e: 0.\n, f: 0., g: 2., h: 0., i: 0., j: 0.\n, k: 0., l: 0., m: 2., n: 0., o: 0.\n, p: 0., q: 0., r: 0., s: 2., t: 0.\n, u: 0., v: 0., w: 0., x: 0., y: 2. } ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 365, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat5x5(1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat5x5(a.a - a.a, a.b - a.b, a.c - a.c, a.d - a.d, a.e - a.e, a.f - a.f, a.g - a.g, a.h - a.h, a.i - a.i, a.j - a.j, a.k - a.k, a.l - a.l, a.m - a.m, a.n - a.n, a.o - a.o, a.p - a.p, a.q - a.q, a.r - a.r, a.s - a.s, a.t - a.t, a.u - a.u, a.v - a.v, a.w - a.w, a.x - a.x, a.y - a.y);
				var a = cast this;
				var this = new geom.structure.Mat5x5(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta || Math.abs(a.q - b.q) >= delta || Math.abs(a.r - b.r) >= delta || Math.abs(a.s - b.s) >= delta || Math.abs(a.t - b.t) >= delta || Math.abs(a.u - b.u) >= delta || Math.abs(a.v - b.v) >= delta || Math.abs(a.w - b.w) >= delta || Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`72:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`72).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`75:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`75).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix5x5.hx:385 [OK] ({\nvar a = Matrix5x5.unit;\na - a == Matrix5x5.zero; }) == true", {lineNumber : 385, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix5x5.unit;\na - a == Matrix5x5.zero; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 385, fileName : "src/geom/matrix/Matrix5x5.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testMatrix4x4_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				left = cast this;
			} catch (`78:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`78).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var this = cast this;
				var this = new geom.structure.Mat4x4(this.a, this.b, this.c, this.d, this.e, this.f, this.g, this.h, this.i, this.j, this.k, this.l, this.m, this.n, this.o, this.p);
				right = cast this;
			} catch (`81:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`81).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:21 [OK] Matrix4x4.counting == Matrix4x4.counting.clone()", {lineNumber : 21, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix4x4.counting == Matrix4x4.counting.clone() --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 21, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var m = cast this;
				var arr = new Array();
				var `_current = 0;
				var `_array = [cast m.a, cast m.b, cast m.c, cast m.d, cast m.e, cast m.f, cast m.g, cast m.h, cast m.i, cast m.j, cast m.k, cast m.l, cast m.m, cast m.n, cast m.o, cast m.p];
				while ((`_current < `_array.length)) {
					var i = `_array[`_current ++];
					arr.push(i);
				};
				left = [1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.].toString() == arr.toString();
			} catch (`84:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`84).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`87:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`87).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:33 [OK] ({\nvar m = Matrix4x4.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.].toString() == arr.toString(); }) == true", {lineNumber : 33, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = Matrix4x4.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.].toString() == arr.toString(); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 33, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`90:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`90).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`93:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`93).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:53 [OK] ({\nMatrix4x4.zero == new Matrix4x4({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0.\n, m: 0., n: 0., o: 0., p: 0. } );\n}) == true", {lineNumber : 53, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x4.zero == new Matrix4x4({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0.\n, m: 0., n: 0., o: 0., p: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 53, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`96:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`96).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`99:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`99).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:76 [OK] ({\nMatrix4x4.unit == new Matrix4x4({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0.\n, m: 0., n: 0., o: 0., p: 1. } );\n}) == true", {lineNumber : 76, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x4.unit == new Matrix4x4({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0.\n, m: 0., n: 0., o: 0., p: 1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 76, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(- cast a.a, - cast a.b, - cast a.c, - cast a.d, - cast a.e, - cast a.f, - cast a.g, - cast a.h, - cast a.i, - cast a.j, - cast a.k, - cast a.l, - cast a.m, - cast a.n, - cast a.o, - cast a.p);
				var a = cast this;
				var this = new geom.structure.Mat4x4(-1., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`102:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`102).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`105:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`105).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:99 [OK] ({\nMatrix4x4.minus1 == new Matrix4x4({ a: -1., b: 0., c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0., k: -1., l: 0.\n, m: 0., n: 0., o: 0., p: -1. } );\n}) == true", {lineNumber : 99, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x4.minus1 == new Matrix4x4({ a: -1., b: 0., c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0., k: -1., l: 0.\n, m: 0., n: 0., o: 0., p: -1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 99, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`108:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`108).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`111:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`111).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:114 [OK] ({\nMatrix4x4.counting == new Matrix4x4({ a: 1., b: 2., c: 3., d: 4.\n, e: 5., f: 6., g: 7., h: 8.\n, i: 9., j: 10., k: 11., l: 12.\n, m: 13., n: 14., o: 15., p: 16. } );\n}) == true", {lineNumber : 114, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x4.counting == new Matrix4x4({ a: 1., b: 2., c: 3., d: 4.\n, e: 5., f: 6., g: 7., h: 8.\n, i: 9., j: 10., k: 11., l: 12.\n, m: 13., n: 14., o: 15., p: 16. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 114, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`114:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`114).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`117:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`117).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:138 [OK] ({\nMatrix4x4._1_16 == new Matrix4x4({ a: 1., b: 2., c: 3., d: 4.\n, e: 5., f: 6., g: 7., h: 8.\n, i: 9., j: 10., k: 11., l: 12.\n, m: 13., n: 14., o: 15., p: 16. } );\n}) == true", {lineNumber : 138, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x4._1_16 == new Matrix4x4({ a: 1., b: 2., c: 3., d: 4.\n, e: 5., f: 6., g: 7., h: 8.\n, i: 9., j: 10., k: 11., l: 12.\n, m: 13., n: 14., o: 15., p: 16. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 138, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`120:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`120).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`123:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`123).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:151 [OK] ({\nvar a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });\nvar b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });\na == b; }) == true", {lineNumber : 151, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });\nvar b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 151, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 15.);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`126:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`126).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`129:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`129).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:182 [OK] ({\nvar a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. , m:13.,n:14.,o:15.,p:16.});\nvar b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:15. });\na != b; }) == true", {lineNumber : 182, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. , m:13.,n:14.,o:15.,p:16.});\nvar b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:15. });\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 182, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(- cast a.a, - cast a.b, - cast a.c, - cast a.d, - cast a.e, - cast a.f, - cast a.g, - cast a.h, - cast a.i, - cast a.j, - cast a.k, - cast a.l, - cast a.m, - cast a.n, - cast a.o, - cast a.p);
				var b = cast this;
				var this = new geom.structure.Mat4x4(-1., -2., -3., -4., -5., -6., -7., cast -8, -9., -10., -11., -12., -13., -14., -15., -16.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(b.a - b.a) >= delta || Math.abs(b.b - b.b) >= delta || Math.abs(b.c - b.c) >= delta || Math.abs(b.d - b.d) >= delta || Math.abs(b.e - b.e) >= delta || Math.abs(b.f - b.f) >= delta || Math.abs(b.g - b.g) >= delta || Math.abs(b.h - b.h) >= delta || Math.abs(b.i - b.i) >= delta || Math.abs(b.j - b.j) >= delta || Math.abs(b.k - b.k) >= delta || Math.abs(b.l - b.l) >= delta || Math.abs(b.m - b.m) >= delta || Math.abs(b.n - b.n) >= delta || Math.abs(b.o - b.o) >= delta || Math.abs(b.p - b.p) >= delta);
			} catch (`132:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`132).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`135:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`135).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:197 [OK] ({\nvar a = Matrix4x4.counting;\nvar b = -a;\nb == new Matrix4x4({ a: -1., b: -2., c: -3., d: -4.\n, e: -5., f: -6., g: -7., h: -8\n, i: -9., j: -10., k: -11., l: -12.\n, m: -13., n: -14., o:-15., p: -16. });\n}) == true", {lineNumber : 197, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix4x4.counting;\nvar b = -a;\nb == new Matrix4x4({ a: -1., b: -2., c: -3., d: -4.\n, e: -5., f: -6., g: -7., h: -8\n, i: -9., j: -10., k: -11., l: -12.\n, m: -13., n: -14., o:-15., p: -16. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 197, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(a.a + a.a, a.b + a.b, a.c + a.c, a.d + a.d, a.e + a.e, a.f + a.f, a.g + a.g, a.h + a.h, a.i + a.i, a.j + a.j, a.k + a.k, a.l + a.l, a.m + a.m, a.n + a.n, a.o + a.o, a.p + a.p);
				var a = cast this;
				var this = new geom.structure.Mat4x4(2., 0., 0., 0., 0., 2., 0., 0., 0., 0., 2., 0., 0., 0., 0., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`138:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`138).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`141:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`141).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:220 [OK] ({\nvar a = Matrix4x4.unit;\na + a == new Matrix4x4( { a: 2., b: 0., c: 0., d: 0.\n, e: 0., f: 2., g: 0., h: 0.\n, i: 0., j: 0., k: 2., l: 0.\n, m: 0., n: 0., o: 0., p: 2. } ); }) == true", {lineNumber : 220, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix4x4.unit;\na + a == new Matrix4x4( { a: 2., b: 0., c: 0., d: 0.\n, e: 0., f: 2., g: 0., h: 0.\n, i: 0., j: 0., k: 2., l: 0.\n, m: 0., n: 0., o: 0., p: 2. } ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 220, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x4(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat4x4(a.a - a.a, a.b - a.b, a.c - a.c, a.d - a.d, a.e - a.e, a.f - a.f, a.g - a.g, a.h - a.h, a.i - a.i, a.j - a.j, a.k - a.k, a.l - a.l, a.m - a.m, a.n - a.n, a.o - a.o, a.p - a.p);
				var a = cast this;
				var this = new geom.structure.Mat4x4(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
			} catch (`144:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`144).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`147:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`147).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x4.hx:237 [OK] ({\nvar a = Matrix4x4.unit;\na - a == Matrix4x4.zero; }) == true", {lineNumber : 237, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix4x4.unit;\na - a == Matrix4x4.zero; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 237, fileName : "src/geom/matrix/Matrix4x4.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testMatrix1x2_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				left = cast this;
			} catch (`150:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`150).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var this = cast this;
				var this = new geom.structure.Mat1x2(this.x, this.y);
				right = cast this;
			} catch (`153:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`153).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:20 [OK] Matrix1x2.counting == Matrix1x2.counting.clone()", {lineNumber : 20, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.counting == Matrix1x2.counting.clone() --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 20, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var m = cast this;
				var arr = new Array();
				var `_current = 0;
				var `_array = [cast m.x, cast m.y];
				while ((`_current < `_array.length)) {
					var i = `_array[`_current ++];
					arr.push(i);
				};
				left = [1., 2.].toString() == arr.toString();
			} catch (`156:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`156).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`159:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`159).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:29 [OK] ({\nvar m = Matrix1x2.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.].toString() == arr.toString(); }) == true", {lineNumber : 29, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = Matrix1x2.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.].toString() == arr.toString(); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 29, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(4., 3.);
				var this = cast this;
				left = Math.sqrt(this.x * this.x + this.y * this.y);
			} catch (`162:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`162).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 5;
			} catch (`165:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`165).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:50 [OK] ( new Matrix1x2( { x: 4., y: 3. } ) ).magnitude == 5", {lineNumber : 50, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("( new Matrix1x2( { x: 4., y: 3. } ) ).magnitude == 5 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 50, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(9., 12.);
				var m = cast this;
				var currentLength = Math.sqrt(cast m.x * cast m.x + cast m.y * cast m.y);
				if ((currentLength != 0)) {
					var mul = 5 / currentLength;
					cast m.x *= mul;
					cast m.y *= mul;
					var left = cast m.x * cast m.x + cast m.y * cast m.y;
				};
				left = (m.x == 3. && m.y == 4.) == true;
			} catch (`168:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`168).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`171:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`171).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:60 [OK] ({\nvar m = new Matrix1x2( { x: 9., y: 12. } );\nm.magnitude = 5;\n( m.x == 3. && m.y == 4. ) == true;\n}) == true", {lineNumber : 60, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = new Matrix1x2( { x: 9., y: 12. } );\nm.magnitude = 5;\n( m.x == 3. && m.y == 4. ) == true;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 60, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"normalize\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`174:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`174).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`177:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`177).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:81 [OK] ({ trace('\"normalize\" untested'); true; }) == true", {lineNumber : 81, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"normalize\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 81, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., 0.);
				left = cast this;
			} catch (`180:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`180).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(0., 0.);
				right = cast this;
			} catch (`183:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`183).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:94 [OK] Matrix1x2.zero == new Matrix1x2({ x: 0., y: 0. })", {lineNumber : 94, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.zero == new Matrix1x2({ x: 0., y: 0. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 94, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				left = cast this;
			} catch (`186:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`186).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				right = cast this;
			} catch (`189:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`189).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:109 [OK] Matrix1x2.unit == new Matrix1x2({ x: 1., y: 1. })", {lineNumber : 109, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.unit == new Matrix1x2({ x: 1., y: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 109, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- cast a.x, - cast a.y);
				left = cast this;
			} catch (`192:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`192).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(-1., -1.);
				right = cast this;
			} catch (`195:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`195).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:124 [OK] Matrix1x2.minus1 == new Matrix1x2({ x: -1., y: -1. })", {lineNumber : 124, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.minus1 == new Matrix1x2({ x: -1., y: -1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 124, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				left = cast this;
			} catch (`198:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`198).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				right = cast this;
			} catch (`201:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`201).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:134 [OK] Matrix1x2.counting == new Matrix1x2({ x: 1., y: 2. })", {lineNumber : 134, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.counting == new Matrix1x2({ x: 1., y: 2. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 134, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- cast a.x, - cast a.y);
				var b = cast this;
				var this = new geom.structure.Mat1x2(-1., -2.);
				var b = cast this;
				left = cast b.x == b.x && cast b.y == b.y;
			} catch (`204:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`204).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`207:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`207).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:152 [OK] ({\nvar a = new Matrix1x2({ x: 1., y: 2. });\nvar b = -a;\nb == new Matrix1x2({ x: -1., y: -2. }); }) == true", {lineNumber : 152, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2({ x: 1., y: 2. });\nvar b = -a;\nb == new Matrix1x2({ x: -1., y: -2. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 152, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., 1.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(cast a.x + b.x, cast a.y + b.y);
				left = cast this;
			} catch (`210:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`210).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(2., 2.);
				right = cast this;
			} catch (`213:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`213).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:168 [OK] Matrix1x2.unit + Matrix1x2.unit == new Matrix1x2( { x: 2., y: 2. } )", {lineNumber : 168, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.unit + Matrix1x2.unit == new Matrix1x2( { x: 2., y: 2. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 168, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., 1.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(cast a.x - b.x, cast a.y - b.y);
				left = cast this;
			} catch (`216:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`216).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(0., 0.);
				right = cast this;
			} catch (`219:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`219).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:183 [OK] Matrix1x2.unit - Matrix1x2.unit == new Matrix1x2( { x: 0., y: 0. } )", {lineNumber : 183, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.unit - Matrix1x2.unit == new Matrix1x2( { x: 0., y: 0. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 183, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(7., 6.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(7., 6.);
				var b = cast this;
				left = cast a.x == b.x && cast a.y == b.y;
			} catch (`222:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`222).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`225:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`225).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:197 [OK] ({\nvar a = new Matrix1x2( { x: 7., y: 6. } );\nvar b = new Matrix1x2( { x: 7., y: 6. } );\na == b;\n}) == true", {lineNumber : 197, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 7., y: 6. } );\nvar b = new Matrix1x2( { x: 7., y: 6. } );\na == b;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 197, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(cast a.x * 2, cast a.y * 2);
				left = cast this;
			} catch (`228:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`228).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(2., 2.);
				right = cast this;
			} catch (`231:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`231).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:214 [OK] Matrix1x2.unit * 2 == new Matrix1x2( { x: 2., y: 2. } )", {lineNumber : 214, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.unit * 2 == new Matrix1x2( { x: 2., y: 2. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 214, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var ` = 2;
				var this = new geom.structure.Mat1x2(1., 1.);
				var `1 = cast this;
				var this = new geom.structure.Mat1x2(cast `1.x * `, cast `1.y * `);
				left = cast this;
			} catch (`234:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`234).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(2., 2.);
				right = cast this;
			} catch (`237:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`237).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:215 [OK] 2 * Matrix1x2.unit == new Matrix1x2( { x: 2., y: 2. } )", {lineNumber : 215, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("2 * Matrix1x2.unit == new Matrix1x2( { x: 2., y: 2. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 215, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., 1.);
				left = cast this;
			} catch (`240:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`240).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(-1., 1.);
				right = cast this;
			} catch (`243:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`243).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:249 [OK] Matrix1x2.topLeft() == new Matrix1x2({ x: -1., y: 1. })", {lineNumber : 249, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.topLeft() == new Matrix1x2({ x: -1., y: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 249, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				left = cast this;
			} catch (`246:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`246).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				right = cast this;
			} catch (`249:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`249).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:258 [OK] Matrix1x2.topRight() == new Matrix1x2({ x: 1., y: 1. })", {lineNumber : 258, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.topRight() == new Matrix1x2({ x: 1., y: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 258, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., -1.);
				left = cast this;
			} catch (`252:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`252).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(-1., -1.);
				right = cast this;
			} catch (`255:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`255).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:267 [OK] Matrix1x2.bottomLeft() == new Matrix1x2({ x: -1., y: -1. })", {lineNumber : 267, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.bottomLeft() == new Matrix1x2({ x: -1., y: -1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 267, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., -1.);
				left = cast this;
			} catch (`258:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`258).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(1., -1.);
				right = cast this;
			} catch (`261:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`261).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:276 [OK] Matrix1x2.bottomRight() == new Matrix1x2({ x: 1., y: -1. })", {lineNumber : 276, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.bottomRight() == new Matrix1x2({ x: 1., y: -1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 276, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., 1.);
				left = cast this;
			} catch (`264:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`264).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(0., 1.);
				right = cast this;
			} catch (`267:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`267).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:285 [OK] Matrix1x2.north() == new Matrix1x2({ x: 0., y: 1. })", {lineNumber : 285, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.north() == new Matrix1x2({ x: 0., y: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 285, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., -1.);
				left = cast this;
			} catch (`270:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`270).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(0., -1.);
				right = cast this;
			} catch (`273:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`273).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:294 [OK] Matrix1x2.south() == new Matrix1x2({ x: 0., y: -1. })", {lineNumber : 294, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.south() == new Matrix1x2({ x: 0., y: -1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 294, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., 0.);
				left = cast this;
			} catch (`276:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`276).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(-1., 0.);
				right = cast this;
			} catch (`279:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`279).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:303 [OK] Matrix1x2.west() == new Matrix1x2({ x: -1., y: 0. })", {lineNumber : 303, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.west() == new Matrix1x2({ x: -1., y: 0. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 303, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 0.);
				left = cast this;
			} catch (`282:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`282).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(1., 0.);
				right = cast this;
			} catch (`285:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`285).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:312 [OK] Matrix1x2.east() == new Matrix1x2({ x: 1., y: 0. })", {lineNumber : 312, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.east() == new Matrix1x2({ x: 1., y: 0. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 312, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast cast cast this;
				var v = 0.5;
				var this = new geom.structure.Mat1x2(cast a.x * v, cast a.y * v);
				left = cast this;
			} catch (`288:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`288).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(0.5, 0.5);
				right = cast this;
			} catch (`291:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`291).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:334 [OK] Matrix1x2.unit / 2 == new Matrix1x2( { x: 0.5, y: 0.5 } )", {lineNumber : 334, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.unit / 2 == new Matrix1x2( { x: 0.5, y: 0.5 } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 334, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(7., 5.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(7., 6.);
				var b = cast this;
				left = ! (cast a.x == b.x && cast a.y == b.y);
			} catch (`294:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`294).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`297:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`297).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:347 [OK] ({\nvar a = new Matrix1x2( { x: 7., y: 5. } );\nvar b = new Matrix1x2( { x: 7., y: 6. } );\na != b;\n}) == true", {lineNumber : 347, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 7., y: 5. } );\nvar b = new Matrix1x2( { x: 7., y: 6. } );\na != b;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 347, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"perp\" untested still to consider", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`300:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`300).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`303:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`303).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:360 [OK] ({ trace('\"perp\" untested still to consider'); true; }) == true", {lineNumber : 360, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"perp\" untested still to consider'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 360, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(4., 2.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(3.5, 1.5);
				var c = cast this;
				var this = new geom.structure.Mat1x2((a.x + b.x) / 2, (a.y + b.y) / 2);
				var mid = cast this;
				left = cast mid.x == c.x && cast mid.y == c.y;
			} catch (`306:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`306).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`309:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`309).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:370 [OK] ({\nvar a = new Matrix1x2( { x: 3.,  y: 1. } );\nvar b = new Matrix1x2( { x: 4.,  y: 2. } );\nvar c = new Matrix1x2( { x: 3.5, y: 1.5 } );\nvar mid = Matrix1x2.mid( a, b );\nmid == c;\n}) == true", {lineNumber : 370, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 3.,  y: 1. } );\nvar b = new Matrix1x2( { x: 4.,  y: 2. } );\nvar c = new Matrix1x2( { x: 3.5, y: 1.5 } );\nvar mid = Matrix1x2.mid( a, b );\nmid == c;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 370, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(4., 5.);
				var b = cast this;
				var dx = cast a.x - b.x;
				var dy = cast a.y - b.y;
				left = dx * dx + dy * dy;
			} catch (`312:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`312).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 25;
			} catch (`315:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`315).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:387 [OK] ({\nvar a = new Matrix1x2( { x: 1., y: 1. } );\nvar b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } );\na.distanceBetweenSquare( b ); }) == 25", {lineNumber : 387, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 1., y: 1. } );\nvar b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } );\na.distanceBetweenSquare( b ); }) == 25 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 387, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(4., 5.);
				var b = cast this;
				var dx = cast a.x - b.x;
				var dy = cast a.y - b.y;
				left = Math.pow(dx * dx + dy * dy, 0.5);
			} catch (`318:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`318).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 5;
			} catch (`321:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`321).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:410 [OK] ({\nvar a = new Matrix1x2( { x: 1., y: 1. } );\nvar b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } );\na.distanceBetween( b ); }) == 5", {lineNumber : 410, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 1., y: 1. } );\nvar b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } );\na.distanceBetween( b ); }) == 5 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 410, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"span\" untested still to consider", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`324:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`324).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`327:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`327).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:422 [OK] ({ trace('\"span\" untested still to consider'); true; }) == true", {lineNumber : 422, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"span\" untested still to consider'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 422, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(3., 3.);
				var a = cast this;
				left = cast a.x * cast a.x + cast a.y * cast a.y;
			} catch (`330:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`330).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 18;
			} catch (`333:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`333).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:431 [OK] ({\nvar a = new Matrix1x2( { x: 3., y: 3. } );\na.lenSquare(); }) == 18", {lineNumber : 431, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 3., y: 3. } );\na.lenSquare(); }) == 18 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 431, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(3., 4.);
				var a = cast this;
				left = Math.pow(cast a.x * cast a.x + cast a.y * cast a.y, 0.5);
			} catch (`336:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`336).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 5;
			} catch (`339:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`339).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:442 [OK] ({\nvar a = new Matrix1x2( { x: 3., y: 4. } );\na.distance(); }) == 5", {lineNumber : 442, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 3., y: 4. } );\na.distance(); }) == 5 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 442, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"isLeft\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`342:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`342).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`345:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`345).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:466 [OK] ({ trace('\"isLeft\" untested'); true; }) == true", {lineNumber : 466, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"isLeft\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 466, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"triangleArea\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`348:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`348).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`351:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`351).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:475 [OK] ({ trace('\"triangleArea\" untested'); true; }) == true", {lineNumber : 475, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"triangleArea\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 475, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				left = Std.int(Math.abs(-7.) / -7.);
			} catch (`354:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`354).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = -1;
			} catch (`357:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`357).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:484 [OK] Matrix1x2.sign( -7. ) == -1", {lineNumber : 484, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.sign( -7. ) == -1 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 484, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				left = Std.int(Math.abs(7.) / 7.);
			} catch (`360:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`360).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 1;
			} catch (`363:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`363).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:485 [OK] Matrix1x2.sign( 7. ) == 1", {lineNumber : 485, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.sign( 7. ) == 1 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 485, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var dx = a.x - b.x;
				var dy = a.y - b.y;
				left = Math.atan2(dy, dx);
			} catch (`366:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`366).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 0;
			} catch (`369:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`369).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:494 [OK] Matrix1x2.thetaDifference( Matrix1x2.east(),        Matrix1x2.zero ) == 0", {lineNumber : 494, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.thetaDifference( Matrix1x2.east(),        Matrix1x2.zero ) == 0 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 494, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., -1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var dx = a.x - b.x;
				var dy = a.y - b.y;
				left = Math.atan2(dy, dx);
			} catch (`372:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`372).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = - Math.PI / 4;
			} catch (`375:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`375).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:495 [OK] Matrix1x2.thetaDifference( Matrix1x2.bottomRight(), Matrix1x2.zero ) == -Math.PI/4", {lineNumber : 495, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.thetaDifference( Matrix1x2.bottomRight(), Matrix1x2.zero ) == -Math.PI/4 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 495, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., -1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var dx = a.x - b.x;
				var dy = a.y - b.y;
				left = Math.atan2(dy, dx);
			} catch (`378:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`378).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = - Math.PI / 2;
			} catch (`381:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`381).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:496 [OK] Matrix1x2.thetaDifference( Matrix1x2.south(),       Matrix1x2.zero ) == -Math.PI/2", {lineNumber : 496, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.thetaDifference( Matrix1x2.south(),       Matrix1x2.zero ) == -Math.PI/2 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 496, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., -1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var dx = a.x - b.x;
				var dy = a.y - b.y;
				left = Math.atan2(dy, dx);
			} catch (`384:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`384).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = -3 * Math.PI / 4;
			} catch (`387:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`387).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:497 [OK] Matrix1x2.thetaDifference( Matrix1x2.bottomLeft(),  Matrix1x2.zero ) == -3*Math.PI/4", {lineNumber : 497, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.thetaDifference( Matrix1x2.bottomLeft(),  Matrix1x2.zero ) == -3*Math.PI/4 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 497, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var dx = a.x - b.x;
				var dy = a.y - b.y;
				left = Math.atan2(dy, dx);
			} catch (`390:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`390).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = Math.PI;
			} catch (`393:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`393).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:498 [OK] Matrix1x2.thetaDifference( Matrix1x2.west(),        Matrix1x2.zero ) == Math.PI", {lineNumber : 498, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.thetaDifference( Matrix1x2.west(),        Matrix1x2.zero ) == Math.PI --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 498, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var dx = a.x - b.x;
				var dy = a.y - b.y;
				left = Math.atan2(dy, dx);
			} catch (`396:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`396).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 3 * Math.PI / 4;
			} catch (`399:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`399).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:499 [OK] Matrix1x2.thetaDifference( Matrix1x2.topLeft(),     Matrix1x2.zero ) == 3*Math.PI/4", {lineNumber : 499, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.thetaDifference( Matrix1x2.topLeft(),     Matrix1x2.zero ) == 3*Math.PI/4 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 499, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var dx = a.x - b.x;
				var dy = a.y - b.y;
				left = Math.atan2(dy, dx);
			} catch (`402:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`402).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = Math.PI / 2;
			} catch (`405:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`405).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:500 [OK] Matrix1x2.thetaDifference( Matrix1x2.north(),       Matrix1x2.zero ) == Math.PI/2", {lineNumber : 500, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.thetaDifference( Matrix1x2.north(),       Matrix1x2.zero ) == Math.PI/2 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 500, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var dx = a.x - b.x;
				var dy = a.y - b.y;
				left = Math.atan2(dy, dx);
			} catch (`408:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`408).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = Math.PI / 4;
			} catch (`411:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`411).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:501 [OK] Matrix1x2.thetaDifference( Matrix1x2.topRight(),    Matrix1x2.zero ) == Math.PI/4", {lineNumber : 501, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.thetaDifference( Matrix1x2.topRight(),    Matrix1x2.zero ) == Math.PI/4 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 501, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"inTri\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`414:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`414).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`417:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`417).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:512 [OK] ({ trace('\"inTri\" untested'); true; }) == true", {lineNumber : 512, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"inTri\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 512, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"inTri2\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`420:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`420).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`423:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`423).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:525 [OK] ({ trace('\"inTri2\" untested'); true; }) == true", {lineNumber : 525, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"inTri2\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 525, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast cast cast this;
				var v = 0.5;
				var this = new geom.structure.Mat1x2(cast a.x * v, cast a.y * v);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(1., 1.);
				var c = cast this;
				var small = 0.0000000001;
				var minx = Math.min(b.x, c.x);
				var maxx = Math.max(b.x, c.x);
				var miny = Math.min(b.y, c.y);
				var maxy = Math.max(b.y, c.y);
				left = if ((minx == maxx)) miny <= cast a.y && cast a.y <= maxy else if ((miny == maxy)) minx <= cast a.x && cast a.x <= maxx else minx <= cast a.x + small && cast a.x - small <= maxx && miny <= cast a.y + small && cast a.y - small <= maxy;
			} catch (`426:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`426).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`429:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`429).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:549 [OK] ({\nvar a = Matrix1x2.topRight()/2;\nvar b = Matrix1x2.zero;\nvar c = Matrix1x2.topRight();\na.inRect( b, c ); }) == true", {lineNumber : 549, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x2.topRight()/2;\nvar b = Matrix1x2.zero;\nvar c = Matrix1x2.topRight();\na.inRect( b, c ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 549, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., -1.);
				var a = cast cast cast this;
				var v = 0.5;
				var this = new geom.structure.Mat1x2(cast a.x * v, cast a.y * v);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(1., 1.);
				var c = cast this;
				var small = 0.0000000001;
				var minx = Math.min(b.x, c.x);
				var maxx = Math.max(b.x, c.x);
				var miny = Math.min(b.y, c.y);
				var maxy = Math.max(b.y, c.y);
				left = if ((minx == maxx)) miny <= cast a.y && cast a.y <= maxy else if ((miny == maxy)) minx <= cast a.x && cast a.x <= maxx else minx <= cast a.x + small && cast a.x - small <= maxx && miny <= cast a.y + small && cast a.y - small <= maxy;
			} catch (`432:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`432).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = false;
			} catch (`435:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`435).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:554 [OK] ({\nvar a = Matrix1x2.bottomLeft()/2;\nvar b = Matrix1x2.zero;\nvar c = Matrix1x2.topRight();\na.inRect( b, c ); }) == false", {lineNumber : 554, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x2.bottomLeft()/2;\nvar b = Matrix1x2.zero;\nvar c = Matrix1x2.topRight();\na.inRect( b, c ); }) == false --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 554, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., -1.);
				var a = cast cast cast this;
				var v = 0.5;
				var this = new geom.structure.Mat1x2(cast a.x * v, cast a.y * v);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., -1.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var c = cast this;
				var small = 0.0000000001;
				var minx = Math.min(b.x, c.x);
				var maxx = Math.max(b.x, c.x);
				var miny = Math.min(b.y, c.y);
				var maxy = Math.max(b.y, c.y);
				left = if ((minx == maxx)) miny <= cast a.y && cast a.y <= maxy else if ((miny == maxy)) minx <= cast a.x && cast a.x <= maxx else minx <= cast a.x + small && cast a.x - small <= maxx && miny <= cast a.y + small && cast a.y - small <= maxy;
			} catch (`438:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`438).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = false;
			} catch (`441:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`441).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:559 [OK] ({\nvar a = Matrix1x2.bottomLeft()/2;\nvar b = Matrix1x2.bottomRight();\nvar c = Matrix1x2.zero;\na.inRect( b, c ); }) == false", {lineNumber : 559, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x2.bottomLeft()/2;\nvar b = Matrix1x2.bottomRight();\nvar c = Matrix1x2.zero;\na.inRect( b, c ); }) == false --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 559, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., -1.);
				var a = cast cast cast this;
				var v = 0.5;
				var this = new geom.structure.Mat1x2(cast a.x * v, cast a.y * v);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., -1.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var c = cast this;
				var small = 0.0000000001;
				var minx = Math.min(b.x, c.x);
				var maxx = Math.max(b.x, c.x);
				var miny = Math.min(b.y, c.y);
				var maxy = Math.max(b.y, c.y);
				left = if ((minx == maxx)) miny <= cast a.y && cast a.y <= maxy else if ((miny == maxy)) minx <= cast a.x && cast a.x <= maxx else minx <= cast a.x + small && cast a.x - small <= maxx && miny <= cast a.y + small && cast a.y - small <= maxy;
			} catch (`444:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`444).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`447:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`447).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:564 [OK] ({\nvar a = Matrix1x2.bottomRight()/2;\nvar b = Matrix1x2.bottomRight();\nvar c = Matrix1x2.zero;\na.inRect( b, c ); }) == true", {lineNumber : 564, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x2.bottomRight()/2;\nvar b = Matrix1x2.bottomRight();\nvar c = Matrix1x2.zero;\na.inRect( b, c ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 564, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 0.);
				var l = cast this;
				var this = new geom.structure.Mat1x2(2., 1.);
				var t = cast this;
				var this = new geom.structure.Mat1x2(4., 0.);
				var r = cast this;
				var this = new geom.structure.Mat1x2(3., -1.);
				var b = cast this;
				left = (! ((l.y - t.y) * (r.x - t.x) + (t.x - l.x) * (r.y - t.y) >= 0) && (l.y - b.y) * (r.x - b.x) + (b.x - l.x) * (r.y - b.y) >= 0) == true;
			} catch (`450:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`450).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`453:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`453).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:589 [OK] ({\nvar l = new Matrix1x2( { x: 1., y: 0. });\nvar t = new Matrix1x2( { x: 2., y: 1. });\nvar r = new Matrix1x2( { x: 4., y: 0. });\nvar b = new Matrix1x2( { x: 3., y: -1. });\n(!Matrix1x2.convex( l, t, r ) && Matrix1x2.convex( l, b, r )) == true;\n}) == true", {lineNumber : 589, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar l = new Matrix1x2( { x: 1., y: 0. });\nvar t = new Matrix1x2( { x: 2., y: 1. });\nvar r = new Matrix1x2( { x: 4., y: 0. });\nvar b = new Matrix1x2( { x: 3., y: -1. });\n(!Matrix1x2.convex( l, t, r ) && Matrix1x2.convex( l, b, r )) == true;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 589, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"cross\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`456:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`456).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`459:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`459).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:604 [OK] ({ trace('\"cross\" untested'); true; }) == true", {lineNumber : 604, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"cross\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 604, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 0.);
				var this = cast this;
				left = Math.atan2(this.y, this.x);
			} catch (`462:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`462).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 0.;
			} catch (`465:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`465).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:613 [OK] Matrix1x2.east().theta()        == 0.", {lineNumber : 613, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.east().theta()        == 0. --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 613, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., -1.);
				var this = cast this;
				left = Math.atan2(this.y, this.x);
			} catch (`468:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`468).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = - Math.PI / 4;
			} catch (`471:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`471).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:614 [OK] Matrix1x2.bottomRight().theta() == -Math.PI/4", {lineNumber : 614, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.bottomRight().theta() == -Math.PI/4 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 614, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., -1.);
				var this = cast this;
				left = Math.atan2(this.y, this.x);
			} catch (`474:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`474).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = - Math.PI / 2;
			} catch (`477:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`477).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:615 [OK] Matrix1x2.south().theta()       == -Math.PI/2", {lineNumber : 615, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.south().theta()       == -Math.PI/2 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 615, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., -1.);
				var this = cast this;
				left = Math.atan2(this.y, this.x);
			} catch (`480:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`480).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = -3 * Math.PI / 4;
			} catch (`483:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`483).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:616 [OK] Matrix1x2.bottomLeft().theta()  == -3*Math.PI/4", {lineNumber : 616, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.bottomLeft().theta()  == -3*Math.PI/4 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 616, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., 0.);
				var this = cast this;
				left = Math.atan2(this.y, this.x);
			} catch (`486:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`486).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = Math.PI;
			} catch (`489:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`489).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:617 [OK] Matrix1x2.west().theta()        == Math.PI", {lineNumber : 617, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.west().theta()        == Math.PI --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 617, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., 1.);
				var this = cast this;
				left = Math.atan2(this.y, this.x);
			} catch (`492:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`492).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = 3 * Math.PI / 4;
			} catch (`495:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`495).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:618 [OK] Matrix1x2.topLeft().theta()     == 3*Math.PI/4", {lineNumber : 618, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.topLeft().theta()     == 3*Math.PI/4 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 618, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., 1.);
				var this = cast this;
				left = Math.atan2(this.y, this.x);
			} catch (`498:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`498).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = Math.PI / 2;
			} catch (`501:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`501).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:619 [OK] Matrix1x2.north().theta()       == Math.PI/2", {lineNumber : 619, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.north().theta()       == Math.PI/2 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 619, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var this = cast this;
				left = Math.atan2(this.y, this.x);
			} catch (`504:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`504).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = Math.PI / 4;
			} catch (`507:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`507).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:620 [OK] Matrix1x2.topRight().theta()    == Math.PI/4", {lineNumber : 620, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.topRight().theta()    == Math.PI/4 --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 620, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0.5, 0.5);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0.5000001, 0.5000001);
				var b = cast this;
				var dx = cast a.x - b.x;
				if ((dx < 0.00001 || dx > -1e-05)) {
					var dy = cast a.y - b.y;
					left = dy < 0.00001 || dy > -1e-05;
				} else left = false;
			} catch (`510:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`510).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`513:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`513).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:629 [OK] ({\nvar a = new Matrix1x2( { x: 0.5, y: 0.5 } );\nvar b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } );\na.close( b ); }) == true", {lineNumber : 629, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 0.5, y: 0.5 } );\nvar b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } );\na.close( b ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 629, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0.5, 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0.5000001, 0.5000001);
				var b = cast this;
				var dx = cast a.x - b.x;
				if ((dx < 0.00001 || dx > -1e-05)) {
					var dy = cast a.y - b.y;
					left = dy < 0.00001 || dy > -1e-05;
				} else left = false;
			} catch (`516:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`516).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`519:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`519).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:641 [OK] ({\nvar a = new Matrix1x2( { x: 0.5, y: 1. } );\nvar b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } );\na.close( b ); }) == true", {lineNumber : 641, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 0.5, y: 1. } );\nvar b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } );\na.close( b ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 641, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 0.5);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0.5000001, 0.5000001);
				var b = cast this;
				var dx = cast a.x - b.x;
				if ((dx < 0.00001 || dx > -1e-05)) {
					var dy = cast a.y - b.y;
					left = dy < 0.00001 || dy > -1e-05;
				} else left = false;
			} catch (`522:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`522).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`525:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`525).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:654 [OK] ({\nvar a = new Matrix1x2( { x: 1., y: 0.5 } );\nvar b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } );\na.close( b ); }) == true", {lineNumber : 654, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 1., y: 0.5 } );\nvar b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } );\na.close( b ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 654, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var omega = Math.PI / 2;
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast cast cast this;
				var v = 0.5;
				var this = new geom.structure.Mat1x2(cast a.x * v, cast a.y * v);
				var pivot = cast this;
				var px = cast a.x - pivot.x;
				var py = cast a.y - pivot.y;
				var px2 = px * Math.cos(omega) - py * Math.sin(omega);
				py = py * Math.cos(omega) + px * Math.sin(omega);
				var this = new geom.structure.Mat1x2(px2 + pivot.x, py + pivot.y);
				var b = cast this;
				var this = new geom.structure.Mat1x2(0., 1.);
				var b = cast this;
				var dx = cast b.x - b.x;
				if ((dx < 0.00001 || dx > -1e-05)) {
					var dy = cast b.y - b.y;
					left = dy < 0.00001 || dy > -1e-05;
				} else left = false;
			} catch (`528:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`528).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`531:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`531).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:667 [OK] ({\nvar a = Matrix1x2.topRight();\nvar b = a.pivotAround( Math.PI/2, Matrix1x2.topRight()/2 );\nb.close( Matrix1x2.north() ); }) == true", {lineNumber : 667, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x2.topRight();\nvar b = a.pivotAround( Math.PI/2, Matrix1x2.topRight()/2 );\nb.close( Matrix1x2.north() ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 667, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"toTPoint\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x2_1"});
				left = true;
			} catch (`534:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`534).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`537:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`537).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:683 [OK] ({ trace('\"toTPoint\" untested'); true; }) == true", {lineNumber : 683, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"toTPoint\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 683, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new eval.Vector(3);
				var vec = cast this;
				cast vec[0] = cast a.x;
				cast vec[1] = cast a.y;
				cast vec[2] = 1.;
				var b = vec;
				var c = cast eval.Vector.fromArrayCopy([1., 1., 1.]);
				left = equals.Equal.equals(b, c);
			} catch (`540:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`540).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`543:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`543).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:691 [OK] ({\nvar a = Matrix1x2.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);\nEqual.equals( b, c ); }) == true", {lineNumber : 691, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x2.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);\nEqual.equals( b, c ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 691, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var b = cast eval.Vector.fromArrayCopy([1., 1., 1.]);
				var this = new geom.structure.Mat1x2(cast b[0], cast b[1]);
				var c = cast this;
				left = cast a.x == c.x && cast a.y == c.y;
			} catch (`546:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`546).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`549:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`549).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:703 [OK] ({\nvar a = Matrix1x2.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);\nvar c: Matrix1x2 = b;\na == c;\n}) == true", {lineNumber : 703, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x2.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);\nvar c: Matrix1x2 = b;\na == c;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 703, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var arr_0 = 0.;
				var arr_1 = 1.;
				var arr_2 = 2.;
				var this = new geom.structure.Mat1x2(arr_1, arr_2);
				left = cast this;
			} catch (`552:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`552).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				right = cast this;
			} catch (`555:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`555).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:715 [OK] Matrix1x2.fromArrayPos( [ 0., 1., 2. ], 1) ==  new Matrix1x2({x:1.,y:2.})", {lineNumber : 715, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x2.fromArrayPos( [ 0., 1., 2. ], 1) ==  new Matrix1x2({x:1.,y:2.}) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 715, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(5., 6.);
				var a = cast this;
				var arr = [0., 1., 2.];
				arr[1] = cast a.x;
				arr[2] = cast a.y;
				left = arr;
			} catch (`558:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`558).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = [0., 5., 6.];
			} catch (`561:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`561).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x2.hx:724 [OK] ({\nvar a = new Matrix1x2( { x: 5., y: 6. } );\nvar arr = [ 0., 1., 2. ];\na.toArrayPos( arr, 1 ); }) == [ 0., 5., 6. ]", {lineNumber : 724, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x2( { x: 5., y: 6. } );\nvar arr = [ 0., 1., 2. ];\na.toArrayPos( arr, 1 ); }) == [ 0., 5., 6. ] --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 724, fileName : "src/geom/matrix/Matrix1x2.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testMatrix1x3_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				left = cast this;
			} catch (`564:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`564).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				var this = cast this;
				var this = new geom.structure.Mat1x3(this.x, this.y, this.z);
				right = cast this;
			} catch (`567:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`567).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:20 [OK] Matrix1x3.counting == Matrix1x3.counting.clone()", {lineNumber : 20, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x3.counting == Matrix1x3.counting.clone() --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 20, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				var m = cast this;
				var arr = new Array();
				var `_current = 0;
				var `_array = [cast m.x, cast m.y, cast m.z];
				while ((`_current < `_array.length)) {
					var i = `_array[`_current ++];
					arr.push(i);
				};
				left = [1., 2., 3.].toString() == arr.toString();
			} catch (`570:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`570).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`573:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`573).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:31 [OK] ({\nvar m = Matrix1x3.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.].toString() == arr.toString(); }) == true", {lineNumber : 31, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = Matrix1x3.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.].toString() == arr.toString(); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 31, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"magnitude\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x3_1"});
				left = true;
			} catch (`576:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`576).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`579:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`579).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:53 [OK] ({ trace('\"magnitude\" untested'); true; }) == true", {lineNumber : 53, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"magnitude\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 53, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(0., 0., 0.);
				left = cast this;
			} catch (`582:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`582).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x3(0., 0., 0.);
				right = cast this;
			} catch (`585:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`585).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:84 [OK] Matrix1x3.zero == new Matrix1x3({ x: 0., y: 0., z: 0. })", {lineNumber : 84, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x3.zero == new Matrix1x3({ x: 0., y: 0., z: 0. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 84, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				left = cast this;
			} catch (`588:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`588).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				right = cast this;
			} catch (`591:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`591).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:99 [OK] Matrix1x3.unit == new Matrix1x3({ x: 1., y: 1., z: 1. })", {lineNumber : 99, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x3.unit == new Matrix1x3({ x: 1., y: 1., z: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 99, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x3(- cast a.x, - cast a.y, - cast a.z);
				left = cast this;
			} catch (`594:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`594).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x3(-1., -1., -1.);
				right = cast this;
			} catch (`597:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`597).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:114 [OK] Matrix1x3.minus1 == new Matrix1x3({ x: -1., y: -1., z: -1. })", {lineNumber : 114, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x3.minus1 == new Matrix1x3({ x: -1., y: -1., z: -1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 114, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				left = cast this;
			} catch (`600:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`600).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				right = cast this;
			} catch (`603:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`603).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:124 [OK] Matrix1x3.counting == new Matrix1x3({ x: 1., y: 2., z: 3. })", {lineNumber : 124, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x3.counting == new Matrix1x3({ x: 1., y: 2., z: 3. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 124, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(0., 0., 0.);
				var out = cast this;
				out.x = 1.;
				out.y = 1.;
				out.z = 1.;
				left = out;
			} catch (`606:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`606).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				right = cast this;
			} catch (`609:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`609).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:142 [OK] Matrix1x3.identity( Matrix1x3.zero ) == new Matrix1x3({ x: 1., y: 1., z: 1. })", {lineNumber : 142, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x3.identity( Matrix1x3.zero ) == new Matrix1x3({ x: 1., y: 1., z: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 142, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				var a = cast this;
				var this = new geom.structure.Mat1x3(0., 0., 0.);
				var b = cast this;
				b.x = a.x;
				b.y = a.y;
				b.z = a.z;
				var c = b;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - c.x) >= delta || Math.abs(cast a.y - c.y) >= delta || Math.abs(cast a.z - c.z) >= delta);
			} catch (`612:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`612).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`615:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`615).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:154 [OK] ({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = Matrix1x3.zero;\nvar c = Matrix1x3.copy( a, b );\na == c; }) == true", {lineNumber : 154, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = Matrix1x3.zero;\nvar c = Matrix1x3.copy( a, b );\na == c; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 154, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"magnitude\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x3_1"});
				left = true;
			} catch (`618:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`618).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`621:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`621).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:170 [OK] ({ trace('\"magnitude\" untested'); true; }) == true", {lineNumber : 170, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"magnitude\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 170, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				var a = cast this;
				var this = new geom.structure.Mat1x3(1., 2., 4.);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta);
			} catch (`624:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`624).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`627:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`627).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:219 [OK] ({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = new Matrix1x3({ x: 1., y: 2., z: 4. });\na != b; }) == true", {lineNumber : 219, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = new Matrix1x3({ x: 1., y: 2., z: 4. });\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 219, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				var a = cast this;
				var this = new geom.structure.Mat1x3(- cast a.x, - cast a.y, - cast a.z);
				var b = cast this;
				var this = new geom.structure.Mat1x3(-1., -2., -3.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast b.x - b.x) >= delta || Math.abs(cast b.y - b.y) >= delta || Math.abs(cast b.z - b.z) >= delta);
			} catch (`630:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`630).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`633:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`633).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:235 [OK] ({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = -a;\nb == new Matrix1x3({ x: -1., y: -2., z: -3. }); }) == true", {lineNumber : 235, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = -a;\nb == new Matrix1x3({ x: -1., y: -2., z: -3. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 235, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x3(cast a.x - a.x, cast a.y - a.y, cast a.z - a.z);
				var a = cast this;
				var this = new geom.structure.Mat1x3(0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta);
			} catch (`636:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`636).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`639:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`639).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:254 [OK] ({\nvar a = Matrix1x3.unit;\na - a == Matrix1x3.zero;\n}) == true", {lineNumber : 254, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x3.unit;\na - a == Matrix1x3.zero;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 254, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x3(cast a.x + a.x, cast a.y + a.y, cast a.z + a.z);
				var a = cast this;
				var this = new geom.structure.Mat1x3(2., 2., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta);
			} catch (`642:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`642).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`645:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`645).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:272 [OK] ({\nvar a = Matrix1x3.unit;\na + a == new Matrix1x3({ x: 2., y: 2., z: 2. });\n}) == true", {lineNumber : 272, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x3.unit;\na + a == new Matrix1x3({ x: 2., y: 2., z: 2. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 272, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				var a = cast this;
				var this = new geom.structure.Mat1x3(cast a.x * 2, cast a.y * 2, cast a.z * 2);
				var b = cast this;
				var this = new geom.structure.Mat1x3(2., 4., 6.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast b.x - b.x) >= delta || Math.abs(cast b.y - b.y) >= delta || Math.abs(cast b.z - b.z) >= delta);
			} catch (`648:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`648).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`651:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`651).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:291 [OK] ({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = a * 2;\nb == new Matrix1x3({ x: 2., y: 4., z: 6. }); }) == true", {lineNumber : 291, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = a * 2;\nb == new Matrix1x3({ x: 2., y: 4., z: 6. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 291, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				var a = cast this;
				var this = new geom.structure.Mat1x3(1., 2., 3.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta);
			} catch (`654:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`654).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`657:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`657).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:310 [OK] ({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = new Matrix1x3({ x: 1., y: 2., z: 3. });\na == b; }) == true", {lineNumber : 310, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x3({ x: 1., y: 2., z: 3. });\nvar b = new Matrix1x3({ x: 1., y: 2., z: 3. });\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 310, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				var a = cast this;
				var b = cast eval.Vector.fromArrayCopy([1., 1., 1.]);
				var this = new geom.structure.Mat1x3(cast b[0], cast b[1], cast b[2]);
				var c = cast this;
				var this = new geom.structure.Mat1x3(cast b[0], cast b[1], cast b[2]);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta);
			} catch (`660:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`660).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`663:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`663).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:335 [OK] ({\nvar a = Matrix1x3.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);\nvar c: Matrix1x3 = b;\na == b; }) == true", {lineNumber : 335, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x3.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);\nvar c: Matrix1x3 = b;\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 335, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				var a = cast this;
				var this = new eval.Vector(3);
				var vec = cast this;
				cast vec[0] = cast a.x;
				cast vec[1] = cast a.y;
				cast vec[2] = cast a.z;
				var b = vec;
				var c = cast eval.Vector.fromArrayCopy([1., 1., 1.]);
				left = equals.Equal.equals(b, c);
			} catch (`666:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`666).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`669:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`669).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:350 [OK] ({\nvar a = Matrix1x3.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);\nEqual.equals( b, c ); }) == true", {lineNumber : 350, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x3.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);\nEqual.equals( b, c ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 350, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				var a = cast this;
				var arr_0 = 1.;
				var arr_1 = 1.;
				var arr_2 = 1.;
				var this = new geom.structure.Mat1x3(arr_0, arr_1, arr_2);
				var b = cast this;
				left = equals.Equal.equals(a, b);
			} catch (`672:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`672).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`675:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`675).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:362 [OK] ({\nvar a = Matrix1x3.unit;\nvar b: Matrix1x3 = [ 1., 1., 1. ];\nEqual.equals( a, b ); }) == true", {lineNumber : 362, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x3.unit;\nvar b: Matrix1x3 = [ 1., 1., 1. ];\nEqual.equals( a, b ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 362, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x3(1., 1., 1.);
				var a = cast this;
				var b = @:implicitCast [cast a.x, cast a.y, cast a.z];
				left = equals.Equal.equals(b, [1., 1., 1.]);
			} catch (`678:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`678).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`681:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`681).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x3.hx:375 [OK] ({\nvar a = Matrix1x3.unit;\nvar b: Array<Float> = a;\nEqual.equals( b, [ 1., 1., 1. ] ); }) == true", {lineNumber : 375, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x3.unit;\nvar b: Array<Float> = a;\nEqual.equals( b, [ 1., 1., 1. ] ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 375, fileName : "src/geom/matrix/Matrix1x3.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testQuaternion_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				left = cast this;
			} catch (`684:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`684).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				right = cast this;
			} catch (`687:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`687).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:28 [OK] Quaternion.zero == new Quaternion({ x: 0., y: 0., z: 0., w: 0. })", {lineNumber : 28, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("Quaternion.zero == new Quaternion({ x: 0., y: 0., z: 0., w: 0. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 28, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 1.);
				left = cast this;
			} catch (`690:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`690).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 1.);
				right = cast this;
			} catch (`693:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`693).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:38 [OK] Quaternion.zeroNormal == new Quaternion({ x: 0., y: 0., z: 0., w: 1. })", {lineNumber : 38, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("Quaternion.zeroNormal == new Quaternion({ x: 0., y: 0., z: 0., w: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 38, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				left = cast this;
			} catch (`696:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`696).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				right = cast this;
			} catch (`699:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`699).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:48 [OK] Quaternion.unit == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })", {lineNumber : 48, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("Quaternion.unit == new Quaternion({ x: 1., y: 1., z: 1., w: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 48, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var q = cast this;
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var this = cast this;
				{
					var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
					if ((currentLength != 0.)) {
						var mul = 1. / currentLength;
						this.x *= mul;
						this.y *= mul;
						this.z *= mul;
						this.w *= mul;
						var a = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
					};
				};
				var a = cast this;
				{
					var currentLength = Math.sqrt(cast q.x * cast q.x + cast q.y * cast q.y + cast q.z * cast q.z + cast q.w * cast q.w);
					if ((currentLength != 0.)) {
						var mul = 1. / currentLength;
						cast q.x *= mul;
						cast q.y *= mul;
						cast q.z *= mul;
						cast q.w *= mul;
						var b = cast q.x * cast q.x + cast q.y * cast q.y + cast q.z * cast q.z + cast q.w * cast q.w;
					};
				};
				var b = cast cast q;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
			} catch (`702:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`702).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`705:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`705).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:58 [OK] ({\nvar q = new Quaternion( { x: 1., y: 1., z: 1., w: 1. } );\nQuaternion.unitNormal == q.normalize();\n}) == true", {lineNumber : 58, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar q = new Quaternion( { x: 1., y: 1., z: 1., w: 1. } );\nQuaternion.unitNormal == q.normalize();\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 58, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				var out = cast this;
				out.x = 0.;
				out.y = 0.;
				out.z = 0.;
				out.w = 1.;
				var a = out;
				var this = new geom.structure.Mat1x4(0., 0., 0., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
			} catch (`708:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`708).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`711:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`711).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:170 [OK] ({\nvar a = Quaternion.identity( Quaternion.zero );\nvar b = Quaternion.zeroNormal;\na == b; }) == true", {lineNumber : 170, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.identity( Quaternion.zero );\nvar b = Quaternion.zeroNormal;\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 170, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				var b = cast this;
				b.x = a.x;
				b.y = a.y;
				b.z = a.z;
				b.w = a.w;
				var c = b;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - c.x) >= delta || Math.abs(a.y - c.y) >= delta || Math.abs(a.z - c.z) >= delta || Math.abs(a.w - c.w) >= delta);
			} catch (`714:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`714).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`717:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`717).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:190 [OK] ({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = Quaternion.zero;\nvar c = Quaternion.copy( a, b );\na == c; }) == true", {lineNumber : 190, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = Quaternion.zero;\nvar c = Quaternion.copy( a, b );\na == c; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 190, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
			} catch (`720:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`720).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`723:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`723).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:238 [OK] ({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\na == b; }) == true", {lineNumber : 238, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 238, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 4., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
			} catch (`726:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`726).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`729:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`729).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:272 [OK] ({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = new Quaternion({ x: 1., y: 2., z: 4., w: 1. });\na != b; }) == true", {lineNumber : 272, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = new Quaternion({ x: 1., y: 2., z: 4., w: 1. });\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 272, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(a.x + a.x, a.y + a.y, a.z + a.z, a.w + a.w);
				var a = cast this;
				var this = new geom.structure.Mat1x4(2., 2., 2., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
			} catch (`732:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`732).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`735:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`735).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:289 [OK] ({\nvar a = Quaternion.unit;\na + a == new Quaternion({ x: 2., y: 2., z: 2., w: 2. });\n}) == true", {lineNumber : 289, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.unit;\na + a == new Quaternion({ x: 2., y: 2., z: 2., w: 2. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 289, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(a.x - a.x, a.y - a.y, a.z - a.z, a.w - a.w);
				var a = cast this;
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
			} catch (`738:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`738).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`741:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`741).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:301 [OK] ({\nvar a = Quaternion.unit;\na - a == Quaternion.zero;\n}) == true", {lineNumber : 301, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.unit;\na - a == Quaternion.zero;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 301, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, a.w);
				var b = cast this;
				var this = new geom.structure.Mat1x4(-1., -2., -3., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(b.x - b.x) >= delta || Math.abs(b.y - b.y) >= delta || Math.abs(b.z - b.z) >= delta || Math.abs(b.w - b.w) >= delta);
			} catch (`744:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`744).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`747:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`747).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:325 [OK] ({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = ~a;\nb == new Quaternion({ x: -1., y: -2., z: -3., w: 1. }); }) == true", {lineNumber : 325, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = ~a;\nb == new Quaternion({ x: -1., y: -2., z: -3., w: 1. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 325, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, - a.w);
				var b = cast this;
				var this = new geom.structure.Mat1x4(-1., -2., -3., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(b.x - b.x) >= delta || Math.abs(b.y - b.y) >= delta || Math.abs(b.z - b.z) >= delta || Math.abs(b.w - b.w) >= delta);
			} catch (`750:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`750).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`753:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`753).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:341 [OK] ({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = -a;\nb == new Quaternion({ x: -1., y: -2., z: -3., w: -1. }); }) == true", {lineNumber : 341, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar b = -a;\nb == new Quaternion({ x: -1., y: -2., z: -3., w: -1. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 341, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var b = cast eval.Vector.fromArrayCopy([1., 1., 1., 1.]);
				var this = new geom.structure.Mat1x4(cast b[0], cast b[1], cast b[2], cast b[3]);
				var c = cast this;
				var this = new geom.structure.Mat1x4(cast b[0], cast b[1], cast b[2], cast b[3]);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
			} catch (`756:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`756).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`759:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`759).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:551 [OK] ({\nvar a = Quaternion.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);\nvar c: Quaternion = b;\na == b; }) == true", {lineNumber : 551, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);\nvar c: Quaternion = b;\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 551, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new eval.Vector(4);
				var vec = cast this;
				cast vec[0] = cast a.x;
				cast vec[1] = cast a.y;
				cast vec[2] = cast a.z;
				cast vec[3] = cast a.w;
				var b = vec;
				var c = cast eval.Vector.fromArrayCopy([1., 1., 1., 1.]);
				left = equals.Equal.equals(b, c);
			} catch (`762:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`762).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`765:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`765).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:564 [OK] ({\nvar a = Quaternion.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);\nEqual.equals( b, c ); }) == true", {lineNumber : 564, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);\nEqual.equals( b, c ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 564, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var arr_0 = 1.;
				var arr_1 = 1.;
				var arr_2 = 1.;
				var arr_3 = 1.;
				var this = new geom.structure.Mat1x4(arr_0, arr_1, arr_2, arr_3);
				var b = cast this;
				left = equals.Equal.equals(a, b);
			} catch (`768:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`768).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`771:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`771).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:583 [OK] ({\nvar a = Quaternion.unit;\nvar b: Quaternion = [ 1., 1., 1., 1. ];\nEqual.equals( a, b ); }) == true", {lineNumber : 583, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.unit;\nvar b: Quaternion = [ 1., 1., 1., 1. ];\nEqual.equals( a, b ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 583, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var b = @:implicitCast [cast a.x, cast a.y, cast a.z, cast a.w];
				left = equals.Equal.equals(b, [1., 1., 1., 1.]);
			} catch (`774:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`774).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`777:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`777).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Quaternion.hx:595 [OK] ({\nvar a = Quaternion.unit;\nvar b: Array<Float> = a;\nEqual.equals( b, [ 1., 1., 1., 1. ] ); }) == true", {lineNumber : 595, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.unit;\nvar b: Array<Float> = a;\nEqual.equals( b, [ 1., 1., 1., 1. ] ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 595, fileName : "src/geom/matrix/Quaternion.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testMatrix1x4_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 4.);
				left = cast this;
			} catch (`780:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`780).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 4.);
				var this = cast this;
				var this = new geom.structure.Mat1x4(this.x, this.y, this.z, this.w);
				right = cast this;
			} catch (`783:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`783).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:19 [OK] Matrix1x4.counting == Matrix1x4.counting.clone()", {lineNumber : 19, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x4.counting == Matrix1x4.counting.clone() --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 19, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 4.);
				var m = cast this;
				var arr = new Array();
				var arr = [cast m.x, cast m.y, cast m.z, cast m.w];
				var `_current = 0;
				var `_array = arr;
				while ((`_current < `_array.length)) {
					var i = `_array[`_current ++];
					arr.push(i);
				};
				left = [1., 2., 3., 4.].toString() == arr.toString();
			} catch (`786:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`786).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`789:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`789).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:28 [OK] ({\nvar m = Matrix1x4.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.].toString() == arr.toString(); }) == true", {lineNumber : 28, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = Matrix1x4.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.].toString() == arr.toString(); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 28, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"magnitude\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x4_1"});
				left = true;
			} catch (`792:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`792).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`795:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`795).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:50 [OK] ({ trace('\"magnitude\" untested'); true; }) == true", {lineNumber : 50, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"magnitude\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 50, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				left = cast this;
			} catch (`798:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`798).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				right = cast this;
			} catch (`801:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`801).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:82 [OK] Matrix1x4.zero == new Matrix1x4( { x: 0., y: 0., z: 0., w: 0. } )", {lineNumber : 82, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x4.zero == new Matrix1x4( { x: 0., y: 0., z: 0., w: 0. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 82, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				left = cast this;
			} catch (`804:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`804).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				right = cast this;
			} catch (`807:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`807).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:97 [OK] Matrix1x4.unit == new Matrix1x4( { x: 1., y: 1., z: 1., w: 1. } )", {lineNumber : 97, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x4.unit == new Matrix1x4( { x: 1., y: 1., z: 1., w: 1. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 97, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(- cast a.x, - cast a.y, - cast a.z, - cast a.w);
				left = cast this;
			} catch (`810:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`810).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(-1., -1., -1., -1.);
				right = cast this;
			} catch (`813:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`813).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:112 [OK] Matrix1x4.minus1 == new Matrix1x4( { x: -1., y: -1., z: -1., w: -1. } )", {lineNumber : 112, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x4.minus1 == new Matrix1x4( { x: -1., y: -1., z: -1., w: -1. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 112, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 4.);
				left = cast this;
			} catch (`816:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`816).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 4.);
				right = cast this;
			} catch (`819:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`819).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:122 [OK] Matrix1x4.counting == new Matrix1x4( { x: 1., y: 2., z: 3., w: 4. } )", {lineNumber : 122, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x4.counting == new Matrix1x4( { x: 1., y: 2., z: 3., w: 4. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 122, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(- cast a.x, - cast a.y, - cast a.z, - cast a.w);
				var b = cast this;
				var this = new geom.structure.Mat1x4(-1., -2., -3., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast b.x - b.x) >= delta || Math.abs(cast b.y - b.y) >= delta || Math.abs(cast b.z - b.z) >= delta || Math.abs(cast b.w - b.w) >= delta);
			} catch (`822:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`822).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`825:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`825).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:140 [OK] ({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = -a;\nb == new Matrix1x4({ x: -1., y: -2., z: -3., w: -1. }); }) == true", {lineNumber : 140, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = -a;\nb == new Matrix1x4({ x: -1., y: -2., z: -3., w: -1. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 140, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(cast a.x - a.x, cast a.y - a.y, cast a.z - a.z, cast a.w - a.w);
				var a = cast this;
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta || Math.abs(cast a.w - b.w) >= delta);
			} catch (`828:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`828).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`831:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`831).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:160 [OK] ({\nvar a = Matrix1x4.unit;\na - a == Matrix1x4.zero;\n}) == true", {lineNumber : 160, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x4.unit;\na - a == Matrix1x4.zero;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 160, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(cast a.x + a.x, cast a.y + a.y, cast a.z + a.z, cast a.w + a.w);
				var a = cast this;
				var this = new geom.structure.Mat1x4(2., 2., 2., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta || Math.abs(cast a.w - b.w) >= delta);
			} catch (`834:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`834).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`837:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`837).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:179 [OK] ({\nvar a = Matrix1x4.unit;\na + a == new Matrix1x4({ x: 2., y: 2., z: 2., w: 2. });\n}) == true", {lineNumber : 179, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x4.unit;\na + a == new Matrix1x4({ x: 2., y: 2., z: 2., w: 2. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 179, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta || Math.abs(cast a.w - b.w) >= delta);
			} catch (`840:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`840).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`843:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`843).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:210 [OK] ({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\na == b; }) == true", {lineNumber : 210, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 210, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				var out = cast this;
				out.x = 1.;
				out.y = 1.;
				out.z = 1.;
				out.w = 1.;
				left = out;
			} catch (`846:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`846).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				right = cast this;
			} catch (`849:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`849).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:235 [OK] Matrix1x4.identity( Matrix1x4.zero ) == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })", {lineNumber : 235, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix1x4.identity( Matrix1x4.zero ) == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 235, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				var b = cast this;
				b.x = a.x;
				b.y = a.y;
				b.z = a.z;
				b.w = a.w;
				var c = b;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - c.x) >= delta || Math.abs(cast a.y - c.y) >= delta || Math.abs(cast a.z - c.z) >= delta || Math.abs(cast a.w - c.w) >= delta);
			} catch (`852:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`852).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`855:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`855).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:248 [OK] ({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = Matrix1x4.zero;\nvar c = Matrix1x4.copy( a, b );\na == c; }) == true", {lineNumber : 248, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = Matrix1x4.zero;\nvar c = Matrix1x4.copy( a, b );\na == c; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 248, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"projectPoint\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x4_1"});
				left = true;
			} catch (`858:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`858).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`861:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`861).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:265 [OK] ({ trace('\"projectPoint\" untested'); true; }) == true", {lineNumber : 265, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"projectPoint\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 265, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 4., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta || Math.abs(cast a.w - b.w) >= delta);
			} catch (`864:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`864).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`867:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`867).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:280 [OK] ({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = new Matrix1x4({ x: 1., y: 2., z: 4., w: 1. });\na != b; }) == true", {lineNumber : 280, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = new Matrix1x4({ x: 1., y: 2., z: 4., w: 1. });\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 280, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				haxe.Log.trace("\"magnitude\" untested", {fileName : "src/geom/GeomTest.hx", lineNumber : 22, className : "geom.GeomTest", methodName : "testMatrix1x4_1"});
				left = true;
			} catch (`870:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`870).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`873:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`873).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:292 [OK] ({ trace('\"magnitude\" untested'); true; }) == true", {lineNumber : 292, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({ trace('\"magnitude\" untested'); true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 292, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, a.w);
				var b = cast this;
				var this = new geom.structure.Mat1x4(-1., -2., -3., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast b.x - b.x) >= delta || Math.abs(cast b.y - b.y) >= delta || Math.abs(cast b.z - b.z) >= delta || Math.abs(cast b.w - b.w) >= delta);
			} catch (`876:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`876).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`879:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`879).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:360 [OK] ({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = ~a;\nb == new Matrix1x4({ x: -1., y: -2., z: -3., w: 1. }); }) == true", {lineNumber : 360, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });\nvar b = ~a;\nb == new Matrix1x4({ x: -1., y: -2., z: -3., w: 1. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 360, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var b = cast eval.Vector.fromArrayCopy([1., 1., 1., 1.]);
				var this = new geom.structure.Mat1x4(cast b[0], cast b[1], cast b[2], cast b[3]);
				var c = cast this;
				var this = new geom.structure.Mat1x4(cast b[0], cast b[1], cast b[2], cast b[3]);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.x - b.x) >= delta || Math.abs(cast a.y - b.y) >= delta || Math.abs(cast a.z - b.z) >= delta || Math.abs(cast a.w - b.w) >= delta);
			} catch (`882:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`882).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`885:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`885).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:494 [OK] ({\nvar a = Matrix1x4.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);\nvar c: Matrix1x4 = b;\na == b; }) == true", {lineNumber : 494, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x4.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);\nvar c: Matrix1x4 = b;\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 494, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new eval.Vector(4);
				var vec = cast this;
				cast vec[0] = cast a.x;
				cast vec[1] = cast a.y;
				cast vec[2] = cast a.z;
				cast vec[3] = cast a.w;
				var b = vec;
				var c = cast eval.Vector.fromArrayCopy([1., 1., 1., 1.]);
				left = equals.Equal.equals(b, c);
			} catch (`888:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`888).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`891:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`891).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:506 [OK] ({\nvar a = Matrix1x4.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);\nEqual.equals( b, c ); }) == true", {lineNumber : 506, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x4.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);\nEqual.equals( b, c ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 506, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var arr_0 = 1.;
				var arr_1 = 1.;
				var arr_2 = 1.;
				var arr_3 = 1.;
				var this = new geom.structure.Mat1x4(arr_0, arr_1, arr_2, arr_3);
				var b = cast this;
				left = equals.Equal.equals(a, b);
			} catch (`894:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`894).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`897:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`897).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:518 [OK] ({\nvar a = Matrix1x4.unit;\nvar b: Matrix1x4 = [ 1., 1., 1., 1. ];\nEqual.equals( a, b ); }) == true", {lineNumber : 518, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x4.unit;\nvar b: Matrix1x4 = [ 1., 1., 1., 1. ];\nEqual.equals( a, b ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 518, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var b = @:implicitCast [cast a.x, cast a.y, cast a.z, cast a.w];
				left = equals.Equal.equals(b, [1., 1., 1., 1.]);
			} catch (`900:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`900).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`903:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`903).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix1x4.hx:528 [OK] ({\nvar a = Matrix1x4.unit;\nvar b: Array<Float> = a;\nEqual.equals( b, [ 1., 1., 1., 1. ] ); }) == true", {lineNumber : 528, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix1x4.unit;\nvar b: Array<Float> = a;\nEqual.equals( b, [ 1., 1., 1., 1. ] ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 528, fileName : "src/geom/matrix/Matrix1x4.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testMatrix3x3_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				left = cast this;
			} catch (`906:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`906).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var this = cast this;
				var this = new geom.structure.Mat3x3(this.a, this.b, this.c, this.d, this.e, this.f, this.g, this.h, this.i);
				right = cast this;
			} catch (`909:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`909).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:20 [OK] Matrix3x3.counting == Matrix3x3.counting.clone()", {lineNumber : 20, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix3x3.counting == Matrix3x3.counting.clone() --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 20, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var m = cast this;
				var arr = new Array();
				var arr = [cast m.a, cast m.b, cast m.c, cast m.d, cast m.e, cast m.f, cast m.g, cast m.h, cast m.i];
				var `_current = 0;
				var `_array = arr;
				while ((`_current < `_array.length)) {
					var i = `_array[`_current ++];
					arr.push(i);
				};
				left = [1., 2., 3., 4., 5., 6., 7., 8., 9.].toString() == arr.toString();
			} catch (`912:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`912).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`915:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`915).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:31 [OK] ({\nvar m = Matrix3x3.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.,5.,6.,7.,8.,9.].toString() == arr.toString(); }) == true", {lineNumber : 31, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = Matrix3x3.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.,5.,6.,7.,8.,9.].toString() == arr.toString(); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 31, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.a - b.a) >= delta || Math.abs(cast a.b - b.b) >= delta || Math.abs(cast a.c - b.c) >= delta || Math.abs(cast a.d - b.d) >= delta || Math.abs(cast a.e - b.e) >= delta || Math.abs(cast a.f - b.f) >= delta || Math.abs(cast a.g - b.g) >= delta || Math.abs(cast a.h - b.h) >= delta || Math.abs(cast a.i - b.i) >= delta);
			} catch (`918:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`918).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`921:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`921).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:53 [OK] ({\nMatrix3x3.zero == new Matrix3x3( { a: 0., b: 0., c: 0.\n, d: 0., e: 0., f: 0.\n, g: 0., h: 0., i: 0. });\n}) == true", {lineNumber : 53, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix3x3.zero == new Matrix3x3( { a: 0., b: 0., c: 0.\n, d: 0., e: 0., f: 0.\n, g: 0., h: 0., i: 0. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 53, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 0., 0., 0., 1., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(1., 0., 0., 0., 1., 0., 0., 0., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.a - b.a) >= delta || Math.abs(cast a.b - b.b) >= delta || Math.abs(cast a.c - b.c) >= delta || Math.abs(cast a.d - b.d) >= delta || Math.abs(cast a.e - b.e) >= delta || Math.abs(cast a.f - b.f) >= delta || Math.abs(cast a.g - b.g) >= delta || Math.abs(cast a.h - b.h) >= delta || Math.abs(cast a.i - b.i) >= delta);
			} catch (`924:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`924).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`927:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`927).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:74 [OK] ({\nMatrix3x3.unit == new Matrix3x3({ a: 1., b: 0., c: 0.\n, d: 0., e: 1., f: 0.\n, g: 0., h: 0., i: 1. });\n}) == true", {lineNumber : 74, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix3x3.unit == new Matrix3x3({ a: 1., b: 0., c: 0.\n, d: 0., e: 1., f: 0.\n, g: 0., h: 0., i: 1. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 74, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 0., 0., 0., 1., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(- cast a.a, - cast a.b, - cast a.c, - cast a.d, - cast a.e, - cast a.f, - cast a.g, - cast a.h, - cast a.i);
				left = cast this;
			} catch (`930:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`930).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat3x3(-1., 0., 0., 0., -1., 0., 0., 0., -1.);
				right = cast this;
			} catch (`933:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`933).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:95 [OK] Matrix3x3.minus1 == new Matrix3x3({ a: -1., b: 0., c: 0.\n, d: 0.,  e: -1., f: 0.\n, g: 0.,  h: 0., i: -1. })", {lineNumber : 95, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix3x3.minus1 == new Matrix3x3({ a: -1., b: 0., c: 0.\n, d: 0.,  e: -1., f: 0.\n, g: 0.,  h: 0., i: -1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 95, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.a - b.a) >= delta || Math.abs(cast a.b - b.b) >= delta || Math.abs(cast a.c - b.c) >= delta || Math.abs(cast a.d - b.d) >= delta || Math.abs(cast a.e - b.e) >= delta || Math.abs(cast a.f - b.f) >= delta || Math.abs(cast a.g - b.g) >= delta || Math.abs(cast a.h - b.h) >= delta || Math.abs(cast a.i - b.i) >= delta);
			} catch (`936:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`936).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`939:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`939).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:107 [OK] ({\nMatrix3x3.counting == new Matrix3x3( { a: 1., b: 2., c: 3.\n, d: 4., e: 5., f: 6.\n, g: 7., h: 8., i: 9. });\n}) == true", {lineNumber : 107, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix3x3.counting == new Matrix3x3( { a: 1., b: 2., c: 3.\n, d: 4., e: 5., f: 6.\n, g: 7., h: 8., i: 9. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 107, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.a - b.a) >= delta || Math.abs(cast a.b - b.b) >= delta || Math.abs(cast a.c - b.c) >= delta || Math.abs(cast a.d - b.d) >= delta || Math.abs(cast a.e - b.e) >= delta || Math.abs(cast a.f - b.f) >= delta || Math.abs(cast a.g - b.g) >= delta || Math.abs(cast a.h - b.h) >= delta || Math.abs(cast a.i - b.i) >= delta);
			} catch (`942:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`942).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`945:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`945).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:129 [OK] ({\nMatrix3x3._123456789 == new Matrix3x3({ a: 1., b: 2., c: 3.\n, d: 4., e: 5., f: 6.\n, g: 7., h: 8., i: 9. });\n}) == true", {lineNumber : 129, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix3x3._123456789 == new Matrix3x3({ a: 1., b: 2., c: 3.\n, d: 4., e: 5., f: 6.\n, g: 7., h: 8., i: 9. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 129, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(- cast a.a, - cast a.b, - cast a.c, - cast a.d, - cast a.e, - cast a.f, - cast a.g, - cast a.h, - cast a.i);
				var b = cast this;
				var this = new geom.structure.Mat3x3(-1., -2., -3., -4., -5., -6., -7., -8., -9.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast b.a - b.a) >= delta || Math.abs(cast b.b - b.b) >= delta || Math.abs(cast b.c - b.c) >= delta || Math.abs(cast b.d - b.d) >= delta || Math.abs(cast b.e - b.e) >= delta || Math.abs(cast b.f - b.f) >= delta || Math.abs(cast b.g - b.g) >= delta || Math.abs(cast b.h - b.h) >= delta || Math.abs(cast b.i - b.i) >= delta);
			} catch (`948:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`948).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`951:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`951).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:297 [OK] ({\nvar a = Matrix3x3.counting;\nvar b = -a;\nb == new Matrix3x3({ a: -1., b: -2., c: -3., d: -4., e: -5., f: -6., g: -7., h: -8., i: -9. }); }) == true", {lineNumber : 297, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix3x3.counting;\nvar b = -a;\nb == new Matrix3x3({ a: -1., b: -2., c: -3., d: -4., e: -5., f: -6., g: -7., h: -8., i: -9. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 297, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 0., 0., 0., 1., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(cast a.a + a.a, cast a.b + a.b, cast a.c + a.c, cast a.d + a.d, cast a.e + a.e, cast a.f + a.f, cast a.d + a.d, cast a.h + a.h, cast a.i + a.i);
				var a = cast this;
				var this = new geom.structure.Mat3x3(2., 0., 0., 0., 2., 0., 0., 0., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.a - b.a) >= delta || Math.abs(cast a.b - b.b) >= delta || Math.abs(cast a.c - b.c) >= delta || Math.abs(cast a.d - b.d) >= delta || Math.abs(cast a.e - b.e) >= delta || Math.abs(cast a.f - b.f) >= delta || Math.abs(cast a.g - b.g) >= delta || Math.abs(cast a.h - b.h) >= delta || Math.abs(cast a.i - b.i) >= delta);
			} catch (`954:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`954).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`957:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`957).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:315 [OK] ({\nvar a = Matrix3x3.unit;\na + a == new Matrix3x3( { a: 2., b: 0., c: 0.\n, d: 0., e: 2., f: 0.\n, g: 0., h: 0., i: 2. } ); }) == true", {lineNumber : 315, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix3x3.unit;\na + a == new Matrix3x3( { a: 2., b: 0., c: 0.\n, d: 0., e: 2., f: 0.\n, g: 0., h: 0., i: 2. } ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 315, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 0., 0., 0., 1., 0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(cast a.a - a.a, cast a.b - a.b, cast a.c - a.c, cast a.d - a.d, cast a.e - a.e, cast a.f - a.f, cast a.g - a.g, cast a.h - a.h, cast a.i - a.i);
				var a = cast this;
				var this = new geom.structure.Mat3x3(0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.a - b.a) >= delta || Math.abs(cast a.b - b.b) >= delta || Math.abs(cast a.c - b.c) >= delta || Math.abs(cast a.d - b.d) >= delta || Math.abs(cast a.e - b.e) >= delta || Math.abs(cast a.f - b.f) >= delta || Math.abs(cast a.g - b.g) >= delta || Math.abs(cast a.h - b.h) >= delta || Math.abs(cast a.i - b.i) >= delta);
			} catch (`960:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`960).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`963:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`963).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:334 [OK] ({\nvar a = Matrix3x3.unit;\na - a == Matrix3x3.zero; }) == true", {lineNumber : 334, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix3x3.unit;\na - a == Matrix3x3.zero; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 334, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(cast a.a - b.a) >= delta || Math.abs(cast a.b - b.b) >= delta || Math.abs(cast a.c - b.c) >= delta || Math.abs(cast a.d - b.d) >= delta || Math.abs(cast a.e - b.e) >= delta || Math.abs(cast a.f - b.f) >= delta || Math.abs(cast a.g - b.g) >= delta || Math.abs(cast a.h - b.h) >= delta || Math.abs(cast a.i - b.i) >= delta);
			} catch (`966:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`966).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`969:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`969).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:382 [OK] ({\nvar a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });\nvar b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });\na == b; }) == true", {lineNumber : 382, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });\nvar b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 382, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 9.);
				var a = cast this;
				var this = new geom.structure.Mat3x3(1., 2., 3., 4., 5., 6., 7., 8., 8.);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(cast a.a - b.a) >= delta || Math.abs(cast a.b - b.b) >= delta || Math.abs(cast a.c - b.c) >= delta || Math.abs(cast a.d - b.d) >= delta || Math.abs(cast a.e - b.e) >= delta || Math.abs(cast a.f - b.f) >= delta || Math.abs(cast a.g - b.g) >= delta || Math.abs(cast a.h - b.h) >= delta || Math.abs(cast a.i - b.i) >= delta);
			} catch (`972:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`972).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`975:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`975).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix3x3.hx:410 [OK] ({\nvar a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });\nvar b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 8. });\na != b; }) == true", {lineNumber : 410, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });\nvar b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 8. });\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 410, fileName : "src/geom/matrix/Matrix3x3.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testMatrix2x2_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				left = cast this;
			} catch (`978:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`978).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				var this = cast this;
				var this = new geom.structure.Mat2x2(this.a, this.b, this.c, this.d);
				right = cast this;
			} catch (`981:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`981).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:18 [OK] Matrix2x2.counting == Matrix2x2.counting.clone()", {lineNumber : 18, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix2x2.counting == Matrix2x2.counting.clone() --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 18, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				var m = cast this;
				var arr = new Array();
				var `_current = 0;
				var `_array = [cast m.a, cast m.b, cast m.c, cast m.d];
				while ((`_current < `_array.length)) {
					var i = `_array[`_current ++];
					arr.push(i);
				};
				left = [1., 2., 3., 4.].toString() == arr.toString();
			} catch (`984:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`984).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`987:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`987).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:28 [OK] ({\nvar m = Matrix2x2.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.].toString() == arr.toString(); }) == true", {lineNumber : 28, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = Matrix2x2.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.].toString() == arr.toString(); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 28, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(0., 0., 0., 0.);
				left = cast this;
			} catch (`990:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`990).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat2x2(0., 0., 0., 0.);
				right = cast this;
			} catch (`993:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`993).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:49 [OK] Matrix2x2.zero == new Matrix2x2( { a: 0., b: 0., c: 0., d: 0. } )", {lineNumber : 49, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix2x2.zero == new Matrix2x2( { a: 0., b: 0., c: 0., d: 0. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 49, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				left = cast this;
			} catch (`996:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`996).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				right = cast this;
			} catch (`999:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`999).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:65 [OK] Matrix2x2.unit == new Matrix2x2( { a: 1., b: 0., c: 0., d: 1. } )", {lineNumber : 65, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix2x2.unit == new Matrix2x2( { a: 1., b: 0., c: 0., d: 1. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 65, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(- cast a.a, - cast a.b, - cast a.c, - cast a.d);
				left = cast this;
			} catch (`1002:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1002).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat2x2(-1., 0., 0., -1.);
				right = cast this;
			} catch (`1005:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1005).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:81 [OK] Matrix2x2.minus1 == new Matrix2x2({ a: -1., b: 0., c: 0., d: -1. })", {lineNumber : 81, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix2x2.minus1 == new Matrix2x2({ a: -1., b: 0., c: 0., d: -1. }) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 81, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				left = cast this;
			} catch (`1008:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1008).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				right = cast this;
			} catch (`1011:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1011).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:91 [OK] Matrix2x2.counting == new Matrix2x2( { a: 1., b: 2., c: 3., d: 4. } )", {lineNumber : 91, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix2x2.counting == new Matrix2x2( { a: 1., b: 2., c: 3., d: 4. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 91, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				left = cast this;
			} catch (`1014:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1014).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				right = cast this;
			} catch (`1017:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1017).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:108 [OK] Matrix2x2._1234 == new Matrix2x2( { a: 1., b: 2., c: 3., d: 4. } )", {lineNumber : 108, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix2x2._1234 == new Matrix2x2( { a: 1., b: 2., c: 3., d: 4. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 108, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., -1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(1., 0., 0., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1020:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1020).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1023:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1023).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:119 [OK] ({\nMatrix2x2.topLeft == new Matrix2x2( { a: 1., b: 0.\n, c: 0., d: -1. } );\n}) == true", {lineNumber : 119, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix2x2.topLeft == new Matrix2x2( { a: 1., b: 0.\n, c: 0., d: -1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 119, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1026:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1026).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1029:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1029).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:133 [OK] ({\nMatrix2x2.topRight == new Matrix2x2( { a: 1., b: 0.\n, c: 0., d: 1. } );\n}) == true", {lineNumber : 133, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix2x2.topRight == new Matrix2x2( { a: 1., b: 0.\n, c: 0., d: 1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 133, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(-1., 0., 0., -1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(-1., 0., 0., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1032:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1032).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1035:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1035).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:147 [OK] ({\nMatrix2x2.bottomLeft == new Matrix2x2( { a: -1., b: 0.\n, c: 0., d: -1. } );\n}) == true", {lineNumber : 147, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix2x2.bottomLeft == new Matrix2x2( { a: -1., b: 0.\n, c: 0., d: -1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 147, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., -1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(1., 0., 0., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1038:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1038).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1041:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1041).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:161 [OK] ({\nMatrix2x2.bottomRight == new Matrix2x2( { a: 1., b: 0.\n, c: 0., d: -1. } );\n}) == true", {lineNumber : 161, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix2x2.bottomRight == new Matrix2x2( { a: 1., b: 0.\n, c: 0., d: -1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 161, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(0., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(0., 0., 0., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1044:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1044).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1047:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1047).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:175 [OK] ({\nMatrix2x2.north == new Matrix2x2( { a: 0., b: 0.\n, c: 0., d: 1. } );\n}) == true", {lineNumber : 175, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix2x2.north == new Matrix2x2( { a: 0., b: 0.\n, c: 0., d: 1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 175, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(0., 0., 0., -1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(0., 0., 0., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1050:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1050).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1053:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1053).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:189 [OK] ({\nMatrix2x2.south == new Matrix2x2( { a: 0., b: 0.\n, c: 0., d: -1. } );\n}) == true", {lineNumber : 189, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix2x2.south == new Matrix2x2( { a: 0., b: 0.\n, c: 0., d: -1. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 189, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(-1., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(-1., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1056:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1056).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1059:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1059).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:203 [OK] ({\nMatrix2x2.west == new Matrix2x2( { a: -1., b: 0.\n, c: 0.,  d: 0. } );\n}) == true", {lineNumber : 203, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix2x2.west == new Matrix2x2( { a: -1., b: 0.\n, c: 0.,  d: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 203, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(1., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1062:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1062).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1065:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1065).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:217 [OK] ({\nMatrix2x2.east == new Matrix2x2( { a: 1., b: 0.\n, c: 0., d: 0. } );\n}) == true", {lineNumber : 217, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix2x2.east == new Matrix2x2( { a: 1., b: 0.\n, c: 0., d: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 217, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(2., 2.);
				var p = cast this;
				var this = new geom.structure.Mat2x2(p.x, 0., 0., p.y);
				left = cast this;
			} catch (`1068:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1068).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat2x2(2., 0., 0., 2.);
				right = cast this;
			} catch (`1071:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1071).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:237 [OK] Matrix2x2.scale( new Matrix1x2( { x: 2., y: 2. } ) ) == new Matrix2x2( { a: 2., b: 0., c: 0.,  d: 2. } )", {lineNumber : 237, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix2x2.scale( new Matrix1x2( { x: 2., y: 2. } ) ) == new Matrix2x2( { a: 2., b: 0., c: 0.,  d: 2. } ) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 237, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(- cast a.a, - cast a.b, - cast a.c, - cast a.d);
				var b = cast this;
				var this = new geom.structure.Mat2x2(-1., -2., -3., -4.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(b.a - b.a) >= delta || Math.abs(b.b - b.b) >= delta || Math.abs(b.c - b.c) >= delta || Math.abs(b.d - b.d) >= delta);
			} catch (`1074:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1074).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1077:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1077).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:270 [OK] ({\nvar a = Matrix2x2.counting;\nvar b = -a;\nb == new Matrix2x2({ a: -1., b: -2., c: -3., d: -4. }); }) == true", {lineNumber : 270, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix2x2.counting;\nvar b = -a;\nb == new Matrix2x2({ a: -1., b: -2., c: -3., d: -4. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 270, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(cast a.a + a.a, cast a.b + a.b, cast a.c + a.c, cast a.d + a.d);
				var a = cast this;
				var this = new geom.structure.Mat2x2(2., 0., 0., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1080:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1080).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1083:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1083).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:286 [OK] ({\nvar a = Matrix2x2.unit;\na + a == new Matrix2x2({ a: 2., b: 0., c: 0., d: 2. });\n}) == true", {lineNumber : 286, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix2x2.unit;\na + a == new Matrix2x2({ a: 2., b: 0., c: 0., d: 2. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 286, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1086:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1086).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1089:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1089).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:303 [OK] ({\nvar a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });\nvar b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });\na == b; }) == true", {lineNumber : 303, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });\nvar b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 303, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(1., 2., 4., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1092:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1092).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1095:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1095).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:322 [OK] ({\nvar a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 1. });\nvar b = new Matrix2x2({ a: 1., b: 2., c: 4., d: 1. });\na != b; }) == true", {lineNumber : 322, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 1. });\nvar b = new Matrix2x2({ a: 1., b: 2., c: 4., d: 1. });\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 322, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat2x2(cast a.a - a.a, cast a.b - a.b, cast a.c - a.c, cast a.d - a.d);
				var a = cast this;
				var this = new geom.structure.Mat2x2(0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1098:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1098).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1101:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1101).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:334 [OK] ({\nvar a = Matrix2x2.unit;\na - a == Matrix2x2.zero;\n}) == true", {lineNumber : 334, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix2x2.unit;\na - a == Matrix2x2.zero;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 334, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				var a = cast this;
				var b = cast eval.Vector.fromArrayCopy([1., 0., 0., 1.]);
				var this = new geom.structure.Mat2x2(cast b[0], cast b[1], cast b[2], cast b[3]);
				var c = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - c.a) >= delta || Math.abs(a.b - c.b) >= delta || Math.abs(a.c - c.c) >= delta || Math.abs(a.d - c.d) >= delta);
			} catch (`1104:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1104).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1107:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1107).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:400 [OK] ({\nvar a = Matrix2x2.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);\nvar c: Matrix2x2 = b;\na == c;\n}) == true", {lineNumber : 400, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix2x2.unit;\nvar b = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);\nvar c: Matrix2x2 = b;\na == c;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 400, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				var a = cast this;
				var this = new eval.Vector(4);
				var vec = cast this;
				cast vec[0] = cast a.a;
				cast vec[1] = cast a.b;
				cast vec[2] = cast a.c;
				cast vec[3] = cast a.d;
				var b = vec;
				var c = cast eval.Vector.fromArrayCopy([1., 0., 0., 1.]);
				left = equals.Equal.equals(b, c);
			} catch (`1110:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1110).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1113:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1113).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:412 [OK] ({\nvar a = Matrix2x2.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);\nEqual.equals( b, c ); }) == true", {lineNumber : 412, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix2x2.unit;\nvar b: haxe.ds.Vector<Float> = a;\nvar c = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);\nEqual.equals( b, c ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 412, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 0., 0., 1.);
				var a = cast this;
				cast a.a = 1.;
				cast a.b = 2.;
				cast a.c = 3.;
				cast a.d = 4.;
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
			} catch (`1116:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1116).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1119:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1119).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:423 [OK] ({\nvar a = Matrix2x2.unit;\na.setXY( 0, 0, 1. );\na.setXY( 1, 0, 2. );\na.setXY( 0, 1, 3. );\na.setXY( 1, 1, 4. );\nvar b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });\na == b;\n}) == true", {lineNumber : 423, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix2x2.unit;\na.setXY( 0, 0, 1. );\na.setXY( 1, 0, 2. );\na.setXY( 0, 1, 3. );\na.setXY( 1, 1, 4. );\nvar b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });\na == b;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 423, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat2x2(1., 2., 3., 4.);
				var a = cast this;
				left = cast a.a == 1 && cast a.b == 2 && cast a.c == 3 && cast a.d == 4;
			} catch (`1122:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1122).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1125:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1125).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix2x2.hx:444 [OK] ({\nvar a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });\na.getXY( 0, 0 ) == 1 && a.getXY( 1, 0 ) == 2 && a.getXY( 0, 1 ) == 3 && a.getXY( 1, 1 ) == 4;\n}) == true", {lineNumber : 444, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });\na.getXY( 0, 0 ) == 1 && a.getXY( 1, 0 ) == 2 && a.getXY( 0, 1 ) == 3 && a.getXY( 1, 1 ) == 4;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 444, fileName : "src/geom/matrix/Matrix2x2.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testComplex_1() {
		{
			var left;
			try {
				var removeI = "1 + 2i".substr(0, "1 + 2i".length - 1);
				var split = removeI.split("+");
				var this = new geom.structure.Mat1x2(0., 0.);
				var c = cast this;
				{
					var v = Std.parseFloat(split[0]);
					cast c.x = v;
				};
				{
					var v = Std.parseFloat(split[1]);
					cast c.y = v;
				};
				var c0 = c;
				var this = new geom.structure.Mat1x2(1., 2.);
				var c1 = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(c1.x - c0.x) >= delta || Math.abs(c1.y - c0.y) >= delta);
			} catch (`1128:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1128).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1131:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1131).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:34 [OK] ({\nvar c0: Complex = '1 + 2i';\nvar c1 = new Complex({ x: 1., y: 2. });\nc1 == c0; }) == true", {lineNumber : 34, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar c0: Complex = '1 + 2i';\nvar c1 = new Complex({ x: 1., y: 2. });\nc1 == c0; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 34, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var c_real = 1.;
				var c_imaginary = 2.;
				var this = new geom.structure.Mat1x2(c_real, c_imaginary);
				var c0 = cast this;
				var this = new geom.structure.Mat1x2(1., 2.);
				var c1 = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(c1.x - c0.x) >= delta || Math.abs(c1.y - c0.y) >= delta);
			} catch (`1134:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1134).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1137:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1137).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:52 [OK] ({\nvar c0: Complex = { real: 1., imaginary: 2. };\nvar c1 = new Complex({ x: 1., y: 2. });\nc1 == c0; }) == true", {lineNumber : 52, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar c0: Complex = { real: 1., imaginary: 2. };\nvar c1 = new Complex({ x: 1., y: 2. });\nc1 == c0; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 52, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var c_r = 1.;
				var c_i = 2.;
				var this = new geom.structure.Mat1x2(c_r, c_i);
				var c0 = cast this;
				var this = new geom.structure.Mat1x2(1., 2.);
				var c1 = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(c1.x - c0.x) >= delta || Math.abs(c1.y - c0.y) >= delta);
			} catch (`1140:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1140).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1143:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1143).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:65 [OK] ({\nvar c0: Complex = { r: 1., i: 2. };\nvar c1 = new Complex({ x: 1., y: 2. });\nc1 == c0; }) == true", {lineNumber : 65, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar c0: Complex = { r: 1., i: 2. };\nvar c1 = new Complex({ x: 1., y: 2. });\nc1 == c0; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 65, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var c_real = 1.;
				var c_i = 2.;
				var this = new geom.structure.Mat1x2(c_real, c_i);
				var c0 = cast this;
				var this = new geom.structure.Mat1x2(1., 2.);
				var c1 = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(c1.x - c0.x) >= delta || Math.abs(c1.y - c0.y) >= delta);
			} catch (`1146:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1146).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1149:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1149).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:78 [OK] ({\nvar c0: Complex = { real: 1., i: 2. };\nvar c1 = new Complex({ x: 1., y: 2. });\nc1 == c0; }) == true", {lineNumber : 78, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar c0: Complex = { real: 1., i: 2. };\nvar c1 = new Complex({ x: 1., y: 2. });\nc1 == c0; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 78, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var c_r = 1.;
				var c_i = 2.;
				var this = new geom.structure.Mat1x2(c_r, c_i);
				var c = cast this;
				var r = cast c.x;
				var i = cast c.y;
				var s = "" + r + " + " + i + " i";
				left = s == "1. + 2. i" || s == "1 + 2 i";
			} catch (`1152:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1152).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1155:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1155).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:91 [OK] ({\nvar c: Complex = { r: 1., i: 2. };\nvar s: String = c;\n// js seems to remove the .'s from the numbers not sure on other targets\ns == '1. + 2. i' || s == '1 + 2 i'; }) == true", {lineNumber : 91, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar c: Complex = { r: 1., i: 2. };\nvar s: String = c;\n// js seems to remove the .'s from the numbers not sure on other targets\ns == '1. + 2. i' || s == '1 + 2 i'; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 91, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1158:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1158).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1161:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1161).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:109 [OK] ({\nComplex.zero == new Complex({x:0.\n, y:0.});\n}) == true", {lineNumber : 109, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.zero == new Complex({x:0.\n, y:0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 109, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1164:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1164).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1167:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1167).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:122 [OK] ({\nComplex.one == new Complex({x:1.\n, y:0.});\n}) == true", {lineNumber : 122, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.one == new Complex({x:1.\n, y:0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 122, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(-1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1170:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1170).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1173:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1173).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:135 [OK] ({\nComplex.minus1 == new Complex({x: -1.\n, y: 0.});\n}) == true", {lineNumber : 135, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.minus1 == new Complex({x: -1.\n, y: 0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 135, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1176:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1176).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1179:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1179).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:148 [OK] ({\nComplex.unit == new Complex({x: 1.\n, y: 1.});\n}) == true", {lineNumber : 148, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.unit == new Complex({x: 1.\n, y: 1.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 148, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1182:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1182).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1185:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1185).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:161 [OK] ({\nComplex.i1 == new Complex({x: 0.\n, y: 1.});\n}) == true", {lineNumber : 161, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.i1 == new Complex({x: 0.\n, y: 1.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 161, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., -1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1188:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1188).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1191:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1191).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:174 [OK] ({\nComplex.iMinus1 == new Complex({x: 0.\n, y: -1.});\n}) == true", {lineNumber : 174, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.iMinus1 == new Complex({x: 0.\n, y: -1.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 174, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(-1., -1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(-1., -1.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1194:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1194).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1197:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1197).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:187 [OK] ({\nComplex.minusUnit == new Complex({x: -1.\n, y: -1.});\n}) == true", {lineNumber : 187, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.minusUnit == new Complex({x: -1.\n, y: -1.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 187, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.POSITIVE_INFINITY, Math.POSITIVE_INFINITY);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.POSITIVE_INFINITY, Math.POSITIVE_INFINITY);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1200:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1200).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1203:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1203).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:200 [OK] ({\nComplex.unitInfinity == new Complex({x:Math.POSITIVE_INFINITY\n, y:Math.POSITIVE_INFINITY});\n}) == true", {lineNumber : 200, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.unitInfinity == new Complex({x:Math.POSITIVE_INFINITY\n, y:Math.POSITIVE_INFINITY});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 200, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.NEGATIVE_INFINITY, Math.NEGATIVE_INFINITY);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.NEGATIVE_INFINITY, Math.NEGATIVE_INFINITY);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1206:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1206).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1209:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1209).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:213 [OK] ({\nComplex.unitMinusInfinity == new Complex({x:Math.NEGATIVE_INFINITY\n, y:Math.NEGATIVE_INFINITY});\n}) == true", {lineNumber : 213, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.unitMinusInfinity == new Complex({x:Math.NEGATIVE_INFINITY\n, y:Math.NEGATIVE_INFINITY});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 213, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.POSITIVE_INFINITY, 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.POSITIVE_INFINITY, 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1212:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1212).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1215:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1215).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:225 [OK] ({\nComplex.realInfinity == new Complex({x:Math.POSITIVE_INFINITY\n, y:0.});\n}) == true", {lineNumber : 225, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.realInfinity == new Complex({x:Math.POSITIVE_INFINITY\n, y:0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 225, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.NEGATIVE_INFINITY, 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.NEGATIVE_INFINITY, 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1218:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1218).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1221:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1221).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:238 [OK] ({\nComplex.minusInfinity == new Complex({x:Math.NEGATIVE_INFINITY\n, y:0.});\n}) == true", {lineNumber : 238, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.minusInfinity == new Complex({x:Math.NEGATIVE_INFINITY\n, y:0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 238, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., Math.POSITIVE_INFINITY);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., Math.POSITIVE_INFINITY);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1224:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1224).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1227:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1227).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:251 [OK] ({\nComplex.iInfinity == new Complex({x:0.\n, y:Math.POSITIVE_INFINITY});\n}) == true", {lineNumber : 251, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.iInfinity == new Complex({x:0.\n, y:Math.POSITIVE_INFINITY});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 251, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., Math.NEGATIVE_INFINITY);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., Math.NEGATIVE_INFINITY);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1230:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1230).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1233:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1233).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:264 [OK] ({\nComplex.iMinusInfinity == new Complex({x:0.\n, y:Math.NEGATIVE_INFINITY});\n}) == true", {lineNumber : 264, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.iMinusInfinity == new Complex({x:0.\n, y:Math.NEGATIVE_INFINITY});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 264, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.POSITIVE_INFINITY, Math.NEGATIVE_INFINITY);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.POSITIVE_INFINITY, Math.NEGATIVE_INFINITY);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1236:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1236).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1239:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1239).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:277 [OK] ({\nComplex.posNegInfinity == new Complex({x:Math.POSITIVE_INFINITY\n, y:Math.NEGATIVE_INFINITY});\n}) == true", {lineNumber : 277, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.posNegInfinity == new Complex({x:Math.POSITIVE_INFINITY\n, y:Math.NEGATIVE_INFINITY});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 277, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.NEGATIVE_INFINITY, Math.POSITIVE_INFINITY);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.NEGATIVE_INFINITY, Math.POSITIVE_INFINITY);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1242:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1242).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1245:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1245).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:290 [OK] ({\nComplex.negPosInfinity == new Complex({x:Math.NEGATIVE_INFINITY\n, y:Math.POSITIVE_INFINITY});\n}) == true", {lineNumber : 290, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.negPosInfinity == new Complex({x:Math.NEGATIVE_INFINITY\n, y:Math.POSITIVE_INFINITY});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 290, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.PI, 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.PI, 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1248:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1248).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1251:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1251).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:303 [OK] ({\nComplex.realPi == new Complex({x:(Math.PI)\n, y:0.});\n}) == true", {lineNumber : 303, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.realPi == new Complex({x:(Math.PI)\n, y:0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 303, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., Math.PI);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., Math.PI);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1254:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1254).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1257:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1257).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:316 [OK] ({\nComplex.iPi == new Complex({x:0.\n, y:(Math.PI)});\n}) == true", {lineNumber : 316, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.iPi == new Complex({x:0.\n, y:(Math.PI)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 316, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.PI, Math.PI);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.PI, Math.PI);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1260:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1260).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1263:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1263).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:329 [OK] ({\nComplex.unitPi == new Complex({x:(Math.PI)\n, y:(Math.PI)});\n}) == true", {lineNumber : 329, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.unitPi == new Complex({x:(Math.PI)\n, y:(Math.PI)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 329, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(- Math.PI, - Math.PI);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- Math.PI, - Math.PI);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1266:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1266).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1269:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1269).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:342 [OK] ({\nComplex.unitMinusPi == new Complex({x:(-Math.PI)\n, y:(-Math.PI)});\n}) == true", {lineNumber : 342, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.unitMinusPi == new Complex({x:(-Math.PI)\n, y:(-Math.PI)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 342, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., - Math.PI);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., - Math.PI);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1272:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1272).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1275:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1275).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:355 [OK] ({\nComplex.iMinusPi == new Complex({x:0.\n, y:(-Math.PI)});\n}) == true", {lineNumber : 355, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.iMinusPi == new Complex({x:0.\n, y:(-Math.PI)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 355, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(- Math.PI, 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- Math.PI, 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1278:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1278).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1281:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1281).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:368 [OK] ({\nComplex.minusPi == new Complex({x:(-Math.PI)\n, y:0.});\n}) == true", {lineNumber : 368, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.minusPi == new Complex({x:(-Math.PI)\n, y:0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 368, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.PI, - Math.PI);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.PI, - Math.PI);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1284:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1284).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1287:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1287).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:381 [OK] ({\nComplex.posNegPi == new Complex({x:(Math.PI)\n, y:(-Math.PI)});\n}) == true", {lineNumber : 381, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.posNegPi == new Complex({x:(Math.PI)\n, y:(-Math.PI)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 381, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(- Math.PI, Math.PI);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- Math.PI, Math.PI);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1290:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1290).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1293:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1293).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:394 [OK] ({\nComplex.negPosPi == new Complex({x:(-Math.PI)\n, y:(Math.PI)});\n}) == true", {lineNumber : 394, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.negPosPi == new Complex({x:(-Math.PI)\n, y:(Math.PI)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 394, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.PI * 2, 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.PI * 2, 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1296:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1296).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1299:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1299).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:407 [OK] ({\nComplex.realTau == new Complex({x:(Math.PI*2)\n, y:0.});\n}) == true", {lineNumber : 407, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.realTau == new Complex({x:(Math.PI*2)\n, y:0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 407, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., Math.PI * 2);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., Math.PI * 2);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1302:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1302).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1305:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1305).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:420 [OK] ({\nComplex.iTau == new Complex({x:0.\n, y:(Math.PI*2)});\n}) == true", {lineNumber : 420, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.iTau == new Complex({x:0.\n, y:(Math.PI*2)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 420, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.PI * 2, Math.PI * 2);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.PI * 2, Math.PI * 2);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1308:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1308).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1311:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1311).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:433 [OK] ({\nComplex.unitTau == new Complex({x:(Math.PI*2)\n, y:(Math.PI*2)});\n}) == true", {lineNumber : 433, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.unitTau == new Complex({x:(Math.PI*2)\n, y:(Math.PI*2)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 433, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(- Math.PI * 2, - Math.PI * 2);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- Math.PI * 2, - Math.PI * 2);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1314:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1314).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1317:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1317).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:446 [OK] ({\nComplex.unitMinusTau == new Complex({x:(-Math.PI*2)\n, y:(-Math.PI*2)});\n}) == true", {lineNumber : 446, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.unitMinusTau == new Complex({x:(-Math.PI*2)\n, y:(-Math.PI*2)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 446, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., - Math.PI * 2);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., - Math.PI * 2);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1320:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1320).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1323:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1323).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:459 [OK] ({\nComplex.iMinusTau == new Complex({x:0.\n, y:(-Math.PI*2)});\n}) == true", {lineNumber : 459, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.iMinusTau == new Complex({x:0.\n, y:(-Math.PI*2)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 459, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(- Math.PI * 2, 0.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- Math.PI * 2, 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1326:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1326).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1329:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1329).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:472 [OK] ({\nComplex.minusTau == new Complex({x:(-Math.PI*2)\n, y:0.});\n}) == true", {lineNumber : 472, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.minusTau == new Complex({x:(-Math.PI*2)\n, y:0.});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 472, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(Math.PI * 2, - Math.PI * 2);
				var a = cast this;
				var this = new geom.structure.Mat1x2(Math.PI * 2, - Math.PI * 2);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1332:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1332).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1335:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1335).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:485 [OK] ({\nComplex.posNegTau == new Complex({x:(Math.PI*2)\n, y:(-Math.PI*2)});\n}) == true", {lineNumber : 485, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.posNegTau == new Complex({x:(Math.PI*2)\n, y:(-Math.PI*2)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 485, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(- Math.PI * 2, Math.PI * 2);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- Math.PI * 2, Math.PI * 2);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1338:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1338).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1341:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1341).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:498 [OK] ({\nComplex.negPosTau == new Complex({x:(-Math.PI*2)\n, y:(Math.PI*2)});\n}) == true", {lineNumber : 498, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nComplex.negPosTau == new Complex({x:(-Math.PI*2)\n, y:(Math.PI*2)});\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 498, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				left = cast a.y == 2.;
			} catch (`1344:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1344).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1347:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1347).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:511 [OK] ({\nvar a = new Complex({ x: 1., y: 2. });\na.i == 2.; }) == true", {lineNumber : 511, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: 2. });\na.i == 2.; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 511, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				left = cast a.x == 1.;
			} catch (`1350:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1350).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1353:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1353).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:528 [OK] ({\nvar a = new Complex({ x: 1., y: 2. });\na.real == 1.; }) == true", {lineNumber : 528, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: 2. });\na.real == 1.; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 528, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(cast a.x, cast a.y);
				var a = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - a.x) >= delta || Math.abs(a.y - a.y) >= delta);
			} catch (`1356:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1356).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1359:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1359).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:543 [OK] ({\nvar a = new Complex({ x: 1., y: 2. });\na.clone() == a; }) == true", {lineNumber : 543, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: 2. });\na.clone() == a; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 543, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(2., 1.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(cast a.y, cast a.x);
				var a = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1362:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1362).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1365:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1365).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:554 [OK] ({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = new Complex({ x: 2., y: 1. });\na.swap() == b; }) == true", {lineNumber : 554, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = new Complex({ x: 2., y: 1. });\na.swap() == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 554, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1368:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1368).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1371:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1371).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:566 [OK] ({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = new Complex({ x: 1., y: 2. });\na == b; }) == true", {lineNumber : 566, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = new Complex({ x: 1., y: 2. });\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 566, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., 1.);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1374:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1374).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1377:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1377).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:582 [OK] ({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = new Complex({ x: 1., y: 1. });\na != b; }) == true", {lineNumber : 582, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = new Complex({ x: 1., y: 1. });\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 582, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(a.x + a.x, a.y + a.y);
				var a = cast this;
				var this = new geom.structure.Mat1x2(2., 2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1380:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1380).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1383:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1383).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:594 [OK] ({\nvar a = Complex.unit;\na + a == new Complex({ x: 2., y: 2. });\n}) == true", {lineNumber : 594, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Complex.unit;\na + a == new Complex({ x: 2., y: 2. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 594, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(a.x - a.x, a.y - a.y);
				var a = cast this;
				var this = new geom.structure.Mat1x2(0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1386:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1386).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1389:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1389).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:606 [OK] ({\nvar a = Complex.unit;\na - a == Complex.zero;\n}) == true", {lineNumber : 606, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Complex.unit;\na - a == Complex.zero;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 606, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var a = 10.;
				var this = new geom.structure.Mat1x2(1., 7.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(a * b.x, a * b.y);
				var a = cast this;
				var this = new geom.structure.Mat1x2(cast 10, 70.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1392:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1392).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1395:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1395).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:617 [OK] ({\nvar a = 10.;\nvar b = new Complex({ x: 1., y: 7. });\na * b == new Complex({ x: 10, y: 70. });\n}) == true", {lineNumber : 617, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = 10.;\nvar b = new Complex({ x: 1., y: 7. });\na * b == new Complex({ x: 10, y: 70. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 617, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(3., 2.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., 7.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
				var a = cast this;
				var this = new geom.structure.Mat1x2(-11., 23.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1398:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1398).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1401:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1401).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:630 [OK] ({\nvar a = new Complex({ x: 3., y: 2. });\nvar b = new Complex({ x: 1., y: 7. });\na * b == new Complex({ x: -11., y: 23. });\n}) == true", {lineNumber : 630, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 3., y: 2. });\nvar b = new Complex({ x: 1., y: 7. });\na * b == new Complex({ x: -11., y: 23. });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 630, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(3., 2.);
				var a = cast this;
				left = cast a.x + cast a.y == 5;
			} catch (`1404:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1404).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1407:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1407).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:643 [OK] ({\nvar a = new Complex({ x: 3., y: 2. });\na.addExponents() == 5;\n}) == true", {lineNumber : 643, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 3., y: 2. });\na.addExponents() == 5;\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 643, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(a.x, - a.y);
				var b = cast this;
				var this = new geom.structure.Mat1x2(1., -2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(b.x - b.x) >= delta || Math.abs(b.y - b.y) >= delta);
			} catch (`1410:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1410).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1413:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1413).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:655 [OK] ({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = ~a;\nb == new Complex({ x: 1., y: -2. }); }) == true", {lineNumber : 655, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = ~a;\nb == new Complex({ x: 1., y: -2. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 655, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., -3.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(1., 2.);
				var b = cast this;
				var this = new geom.structure.Mat1x2(b.x, - b.y);
				var conj = cast this;
				var this = new geom.structure.Mat1x2(a.x * conj.x - a.y * conj.y, a.x * conj.y + a.y * conj.x);
				var numr = cast this;
				var this = new geom.structure.Mat1x2(b.x * conj.x - b.y * conj.y, b.x * conj.y + b.y * conj.x);
				var demr = cast this;
				var dval = cast demr.x + cast demr.y;
				var this = new geom.structure.Mat1x2(cast numr.x / dval, cast numr.y / dval);
				var a = cast this;
				var this = new geom.structure.Mat1x2(cast -1, cast -1);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1416:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1416).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1419:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1419).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:667 [OK] ({\nvar a = new Complex({ x: 1., y: -3. });\nvar b = new Complex({ x: 1., y: 2. });\na / b == new Complex({ x:-1, y: -1 });\n}) == true", {lineNumber : 667, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: -3. });\nvar b = new Complex({ x: 1., y: 2. });\na / b == new Complex({ x:-1, y: -1 });\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 667, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 2.);
				var a = cast this;
				var this = new geom.structure.Mat1x2(- a.x, - a.y);
				var b = cast this;
				var this = new geom.structure.Mat1x2(-1., -2.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(b.x - b.x) >= delta || Math.abs(b.y - b.y) >= delta);
			} catch (`1422:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1422).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1425:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1425).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:699 [OK] ({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = -a;\nb == new Complex({ x: -1., y: -2. }); }) == true", {lineNumber : 699, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 1., y: 2. });\nvar b = -a;\nb == new Complex({ x: -1., y: -2. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 699, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(2., 4.);
				var a = cast this;
				left = cast a.x * cast a.x + cast a.y * cast a.y == 20.;
			} catch (`1428:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1428).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1431:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1431).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:711 [OK] ({\nvar a = new Complex({ x: 2., y: 4. });\na.magnitudeSquared() == 4. + 16.; }) == true", {lineNumber : 711, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 2., y: 4. });\na.magnitudeSquared() == 4. + 16.; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 711, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(cast 3, cast 4);
				var a = cast this;
				left = Math.sqrt(cast a.x * cast a.x + cast a.y * cast a.y) == 5.;
			} catch (`1434:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1434).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1437:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1437).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:723 [OK] ({\nvar a = new Complex({ x: 3, y: 4});\na.magnitude == 5.; }) == true", {lineNumber : 723, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 3, y: 4});\na.magnitude == 5.; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 723, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(1., 0.);
				var a = cast this;
				left = cast a.y == 0 == true;
			} catch (`1440:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1440).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1443:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1443).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:751 [OK] ({\nvar a = Complex.one;\na.isReal() == true; }) == true", {lineNumber : 751, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Complex.one;\na.isReal() == true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 751, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(0., 1.);
				var a = cast this;
				left = cast a.x == 0 == true;
			} catch (`1446:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1446).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1449:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1449).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:762 [OK] ({\nvar a = Complex.i1;\na.isImaginary() == true; }) == true", {lineNumber : 762, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Complex.i1;\na.isImaginary() == true; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 762, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var r = 12;
				var theta = Math.PI / 4;
				var cis = geom.matrix._Complex.Complex_Impl_.cis;
				var square = geom.matrix._Complex.Complex_Impl_.square;
				var b = cis(theta);
				var this = new geom.structure.Mat1x2(r * b.x, r * b.y);
				var a = square(cast this);
				var a = r * r;
				var b = cis(2 * theta);
				var this = new geom.structure.Mat1x2(a * b.x, a * b.y);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1452:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1452).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1455:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1455).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:773 [OK] ({\nvar r = 12;\nvar theta = Math.PI/4;\nvar cis = Complex.cis;\nvar square = Complex.square;\nsquare(r*cis( theta )) == r*r*cis( 2*theta ); }) == true", {lineNumber : 773, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar r = 12;\nvar theta = Math.PI/4;\nvar cis = Complex.cis;\nvar square = Complex.square;\nsquare(r*cis( theta )) == r*r*cis( 2*theta ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 773, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var r = 12;
				var theta = Math.PI / 4;
				var cis = geom.matrix._Complex.Complex_Impl_.cis;
				var square = geom.matrix._Complex.Complex_Impl_.square;
				var fromCircle = geom.matrix._Complex.Complex_Impl_.fromCircle;
				var a = square(fromCircle(r, theta));
				var b = fromCircle(r * r, 2 * theta);
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1458:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1458).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1461:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1461).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:788 [OK] ({\nvar r = 12;\nvar theta = Math.PI/4;\nvar cis = Complex.cis;\nvar square = Complex.square;\nvar fromCircle = Complex.fromCircle;\nsquare(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true", {lineNumber : 788, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar r = 12;\nvar theta = Math.PI/4;\nvar cis = Complex.cis;\nvar square = Complex.square;\nvar fromCircle = Complex.fromCircle;\nsquare(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 788, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var r = 12;
				var theta = Math.PI / 4;
				var cis = geom.matrix._Complex.Complex_Impl_.cis;
				var square = geom.matrix._Complex.Complex_Impl_.square;
				var fromCircle = geom.matrix._Complex.Complex_Impl_.fromCircle;
				var a = square(fromCircle(r, theta));
				var b = fromCircle(r * r, 2 * theta);
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1464:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1464).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1467:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1467).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:803 [OK] ({\nvar r = 12;\nvar theta = Math.PI/4;\nvar cis = Complex.cis;\nvar square = Complex.square;\nvar fromCircle = Complex.fromCircle;\nsquare(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true", {lineNumber : 803, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar r = 12;\nvar theta = Math.PI/4;\nvar cis = Complex.cis;\nvar square = Complex.square;\nvar fromCircle = Complex.fromCircle;\nsquare(fromCircle(r,theta)) == fromCircle( r*r, 2*theta ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 803, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var r = 12;
				var theta = Math.PI / 4;
				var cis = geom.matrix._Complex.Complex_Impl_.cis;
				var fromCircle = geom.matrix._Complex.Complex_Impl_.fromCircle;
				var exp = geom.matrix._Complex.Complex_Impl_.exp;
				var a = fromCircle(r, theta);
				var this = new geom.structure.Mat1x2(cast 0, theta);
				var b = exp(cast this);
				var this = new geom.structure.Mat1x2(r * b.x, r * b.y);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1470:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1470).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1473:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1473).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:825 [OK] ({\nvar r = 12;\nvar theta = Math.PI/4;\nvar cis = Complex.cis;\nvar fromCircle = Complex.fromCircle;\nvar exp = Complex.exp;\nfromCircle(r,theta) == r*exp( new Complex({ x: 0, y: theta }) ); }) == true", {lineNumber : 825, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar r = 12;\nvar theta = Math.PI/4;\nvar cis = Complex.cis;\nvar fromCircle = Complex.fromCircle;\nvar exp = Complex.exp;\nfromCircle(r,theta) == r*exp( new Complex({ x: 0, y: theta }) ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 825, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(cast 3, cast 4);
				var a = cast this;
				var this = new geom.structure.Mat1x2(cast 6, cast 8);
				var b = cast this;
				var ln = geom.matrix._Complex.Complex_Impl_.ln;
				var this = new geom.structure.Mat1x2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
				var a = ln(cast this);
				var a = ln(a);
				var b = ln(b);
				var this = new geom.structure.Mat1x2(a.x + b.x, a.y + b.y);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta);
			} catch (`1476:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1476).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1479:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1479).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:844 [OK] ({\nvar a = new Complex({ x: 3, y: 4});\nvar b = new Complex({ x: 6, y: 8});\nvar ln = Complex.ln;\nln( a*b ) == ln( a ) + ln( b ); }) == true", {lineNumber : 844, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 3, y: 4});\nvar b = new Complex({ x: 6, y: 8});\nvar ln = Complex.ln;\nln( a*b ) == ln( a ) + ln( b ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 844, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x2(cast 3, cast 4);
				var a = cast this;
				var this = new geom.structure.Mat1x2(cast 6, cast 8);
				var b = cast this;
				var arg = geom.matrix._Complex.Complex_Impl_.arg;
				var this = new geom.structure.Mat1x2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
				left = arg(cast this) == arg(a) + arg(b);
			} catch (`1482:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1482).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1485:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1485).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Complex.hx:862 [OK] ({\nvar a = new Complex({ x: 3, y: 4});\nvar b = new Complex({ x: 6, y: 8});\nvar arg = Complex.arg;\narg( a*b ) == arg( a ) + arg( b ); }) == true", {lineNumber : 862, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Complex({ x: 3, y: 4});\nvar b = new Complex({ x: 6, y: 8});\nvar arg = Complex.arg;\narg( a*b ) == arg( a ) + arg( b ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 862, fileName : "src/geom/matrix/Complex.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testMatrix4x3_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				left = cast this;
			} catch (`1488:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1488).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				var this = cast this;
				var this = new geom.structure.Mat4x3(this.a, this.b, this.c, this.d, this.e, this.f, this.g, this.h, this.i, this.j, this.k, this.l);
				right = cast this;
			} catch (`1491:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1491).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:21 [OK] Matrix4x3.counting == Matrix4x3.counting.clone()", {lineNumber : 21, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("Matrix4x3.counting == Matrix4x3.counting.clone() --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 21, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				var m = cast this;
				var arr = new Array();
				var arr = [cast m.a, cast m.b, cast m.c, cast m.d, cast m.e, cast m.f, cast m.g, cast m.h, cast m.i, cast m.j, cast m.k, cast m.l];
				var `_current = 0;
				var `_array = arr;
				while ((`_current < `_array.length)) {
					var i = `_array[`_current ++];
					arr.push(i);
				};
				left = [1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.].toString() == arr.toString();
			} catch (`1494:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1494).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1497:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1497).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:32 [OK] ({\nvar m = Matrix4x3.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.].toString() == arr.toString(); }) == true", {lineNumber : 32, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar m = Matrix4x3.counting;\nvar arr = new Array<Float>();\nfor( i in m ){\narr.push(i);\n}\n[1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.].toString() == arr.toString(); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 32, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1500:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1500).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1503:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1503).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:53 [OK] ({\nMatrix4x3.zero == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0. } );\n}) == true", {lineNumber : 53, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.zero == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 53, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1506:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1506).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1509:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1509).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:74 [OK] ({\nMatrix4x3.unit == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true", {lineNumber : 74, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.unit == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 74, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(- cast a.a, - cast a.b, - cast a.c, - cast a.d, - cast a.e, - cast a.f, - cast a.g, - cast a.h, - cast a.i, - cast a.j, - cast a.k, - cast a.l);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1512:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1512).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1515:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1515).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:95 [OK] ({\nMatrix4x3.minus1 == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true", {lineNumber : 95, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.minus1 == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 95, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1518:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1518).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1521:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1521).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:109 [OK] ({\nMatrix4x3.counting == new Matrix4x3({ a: 1., b: 2.,  c: 3.,  d: 4.\n, e: 5., f: 6.,  g: 7.,  h: 8.\n, i: 9., j: 10., k: 11., l: 12. } );\n}) == true", {lineNumber : 109, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.counting == new Matrix4x3({ a: 1., b: 2.,  c: 3.,  d: 4.\n, e: 5., f: 6.,  g: 7.,  h: 8.\n, i: 9., j: 10., k: 11., l: 12. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 109, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1524:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1524).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1527:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1527).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:133 [OK] ({\nMatrix4x3.topLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 1., g: 0., h: 0.\n, i: 0.,  j: 0., k: 0., l: 0. } );\n}) == true", {lineNumber : 133, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.topLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 1., g: 0., h: 0.\n, i: 0.,  j: 0., k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 133, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1530:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1530).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1533:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1533).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:149 [OK] ({\nMatrix4x3.topRight == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0. } );\n}) == true", {lineNumber : 149, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.topRight == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 149, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1536:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1536).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1539:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1539).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:165 [OK] ({\nMatrix4x3.bottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.\n, e: 0.,  f: -1., g: 0., h: 0.\n, i: 0.,  j: 0.,  k: 0., l: 0. } );\n}) == true", {lineNumber : 165, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.bottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.\n, e: 0.,  f: -1., g: 0., h: 0.\n, i: 0.,  j: 0.,  k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 165, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1542:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1542).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1545:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1545).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:181 [OK] ({\nMatrix4x3.bottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0.,  k: 0., l: 0. } );\n}) == true", {lineNumber : 181, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.bottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0.,  k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 181, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1548:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1548).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1551:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1551).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:197 [OK] ({\nMatrix4x3.north == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0. } );\n}) == true", {lineNumber : 197, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.north == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 197, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., -1., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1554:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1554).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1557:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1557).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:213 [OK] ({\nMatrix4x3.south == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0.,  k: 0., l: 0. } );\n}) == true", {lineNumber : 213, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.south == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0.,  k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 213, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1560:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1560).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1563:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1563).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:229 [OK] ({\nMatrix4x3.west == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 0., g: 0., h: 0.\n, i: 0.,  j: 0., k: 0., l: 0. } );\n}) == true", {lineNumber : 229, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.west == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 0., g: 0., h: 0.\n, i: 0.,  j: 0., k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 229, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1566:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1566).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1569:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1569).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:245 [OK] ({\nMatrix4x3.east == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0. } );\n}) == true", {lineNumber : 245, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.east == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 0., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 245, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1572:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1572).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1575:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1575).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:261 [OK] ({\nMatrix4x3.front == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true", {lineNumber : 261, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.front == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 261, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1578:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1578).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1581:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1581).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:277 [OK] ({\nMatrix4x3.frontNorth == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true", {lineNumber : 277, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.frontNorth == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 277, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1584:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1584).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1587:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1587).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:293 [OK] ({\nMatrix4x3.frontTopLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 1., g: 0., h: 0.\n, i: 0.,  j: 0., k: 1., l: 0. } );\n}) == true", {lineNumber : 293, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.frontTopLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 1., g: 0., h: 0.\n, i: 0.,  j: 0., k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 293, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1590:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1590).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1593:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1593).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:309 [OK] ({\nMatrix4x3.frontTopRight == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true", {lineNumber : 309, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.frontTopRight == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 1., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 309, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., -1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., -1., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1596:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1596).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1599:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1599).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:325 [OK] ({\nMatrix4x3.frontBottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.\n, e: 0.,  f: -1., g: 0., h: 0.\n, i: 0.,  j: 0.,  k: 1., l: 0. } );\n}) == true", {lineNumber : 325, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.frontBottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.\n, e: 0.,  f: -1., g: 0., h: 0.\n, i: 0.,  j: 0.,  k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 325, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., -1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., -1., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1602:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1602).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1605:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1605).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:341 [OK] ({\nMatrix4x3.frontBottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0.,  k: 1., l: 0. } );\n}) == true", {lineNumber : 341, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.frontBottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0.,  k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 341, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., -1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., -1., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1608:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1608).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1611:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1611).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:357 [OK] ({\nMatrix4x3.frontSouth == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0.,  k: 1., l: 0. } );\n}) == true", {lineNumber : 357, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.frontSouth == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.\n, e: 0., f: -1., g: 0., h: 0.\n, i: 0., j: 0.,  k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 357, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1614:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1614).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1617:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1617).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:373 [OK] ({\nMatrix4x3.frontWest == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 0., g: 0., h: 0.\n, i: 0.,  j: 0., k: 1., l: 0. } );\n}) == true", {lineNumber : 373, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.frontWest == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 0., g: 0., h: 0.\n, i: 0.,  j: 0., k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 373, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1620:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1620).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1623:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1623).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:389 [OK] ({\nMatrix4x3.frontEast == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true", {lineNumber : 389, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.frontEast == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.\n, e: 0., f: 0., g: 0., h: 0.\n, i: 0., j: 0., k: 1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 389, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1626:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1626).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1629:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1629).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:405 [OK] ({\nMatrix4x3.back == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.\n, e: 0., f: 0., g: 0.,  h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true", {lineNumber : 405, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.back == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.\n, e: 0., f: 0., g: 0.,  h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 405, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 1., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 1., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1632:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1632).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1635:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1635).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:421 [OK] ({\nMatrix4x3.backTopLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 1., g: 0., h: 0.\n, i: 0.,  j: 0., k: -1., l: 0. } );\n}) == true", {lineNumber : 421, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.backTopLeft == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.\n, e: 0.,  f: 1., g: 0., h: 0.\n, i: 0.,  j: 0., k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 421, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1638:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1638).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1641:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1641).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:437 [OK] ({\nMatrix4x3.backTopRight == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.\n, e: 0., f: 1., g: 0.,  h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true", {lineNumber : 437, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.backTopRight == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.\n, e: 0., f: 1., g: 0.,  h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 437, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1644:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1644).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1647:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1647).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:453 [OK] ({\nMatrix4x3.backBottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0.,  d: 0.\n, e: 0.,  f: -1., g: 0.,  h: 0.\n, i: 0.,  j: 0.,  k: -1., l: 0. } );\n}) == true", {lineNumber : 453, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.backBottomLeft == new Matrix4x3({ a: -1., b: 0.,  c: 0.,  d: 0.\n, e: 0.,  f: -1., g: 0.,  h: 0.\n, i: 0.,  j: 0.,  k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 453, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1650:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1650).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1653:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1653).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:469 [OK] ({\nMatrix4x3.backBottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0.,  d: 0.\n, e: 0., f: -1., g: 0.,  h: 0.\n, i: 0., j: 0.,  k: -1., l: 0. } );\n}) == true", {lineNumber : 469, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.backBottomRight == new Matrix4x3({ a: 1., b: 0.,  c: 0.,  d: 0.\n, e: 0., f: -1., g: 0.,  h: 0.\n, i: 0., j: 0.,  k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 469, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 1., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 1., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1656:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1656).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1659:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1659).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:485 [OK] ({\nMatrix4x3.backNorth == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.\n, e: 0., f: 1., g: 0.,  h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true", {lineNumber : 485, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.backNorth == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.\n, e: 0., f: 1., g: 0.,  h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 485, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., -1., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1662:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1662).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1665:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1665).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:501 [OK] ({\nMatrix4x3.backSouth == new Matrix4x3({ a: 0., b: 0.,  c: 0.,  d: 0.\n, e: 0., f: -1., g: 0.,  h: 0.\n, i: 0., j: 0.,  k: -1., l: 0. } );\n}) == true", {lineNumber : 501, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.backSouth == new Matrix4x3({ a: 0., b: 0.,  c: 0.,  d: 0.\n, e: 0., f: -1., g: 0.,  h: 0.\n, i: 0., j: 0.,  k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 501, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1668:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1668).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1671:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1671).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:517 [OK] ({\nMatrix4x3.backWest == new Matrix4x3({ a: -1., b: 0., c: 0.,  d: 0.\n, e: 0.,  f: 0., g: 0.,  h: 0.\n, i: 0.,  j: 0., k: -1., l: 0. } );\n}) == true", {lineNumber : 517, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.backWest == new Matrix4x3({ a: -1., b: 0., c: 0.,  d: 0.\n, e: 0.,  f: 0., g: 0.,  h: 0.\n, i: 0.,  j: 0., k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 517, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 0., 0., 0., 0., 0., -1., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1674:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1674).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1677:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1677).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:533 [OK] ({\nMatrix4x3.backEast == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.\n, e: 0., f: 0., g: 0.,  h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true", {lineNumber : 533, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nMatrix4x3.backEast == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.\n, e: 0., f: 0., g: 0.,  h: 0.\n, i: 0., j: 0., k: -1., l: 0. } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 533, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1680:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1680).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1683:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1683).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:728 [OK] ({\nvar a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4.\n, e: 5., f: 6., g: 7., h: 8.\n, i: 9., j:10., k:11., l:12. });\nvar b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4.\n, e: 5., f: 6., g: 7., h: 8.\n, i: 9., j:10., k:11., l:12. });\na == b; }) == true", {lineNumber : 728, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4.\n, e: 5., f: 6., g: 7., h: 8.\n, i: 9., j:10., k:11., l:12. });\nvar b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4.\n, e: 5., f: 6., g: 7., h: 8.\n, i: 9., j:10., k:11., l:12. });\na == b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 728, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 11.);
				var b = cast this;
				var delta = 0.0000001;
				left = (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1686:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1686).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1689:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1689).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:759 [OK] ({\nvar a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });\nvar b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:11. });\na != b; }) == true", {lineNumber : 759, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });\nvar b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:11. });\na != b; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 759, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(- cast a.a, - cast a.b, - cast a.c, - cast a.d, - cast a.e, - cast a.f, - cast a.g, - cast a.h, - cast a.i, - cast a.j, - cast a.k, - cast a.l);
				var b = cast this;
				var this = new geom.structure.Mat4x3(-1., -2., -3., -4., -5., -6., -7., cast -8, -9., -10., -11., -12.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(b.a - b.a) >= delta || Math.abs(b.b - b.b) >= delta || Math.abs(b.c - b.c) >= delta || Math.abs(b.d - b.d) >= delta || Math.abs(b.e - b.e) >= delta || Math.abs(b.f - b.f) >= delta || Math.abs(b.g - b.g) >= delta || Math.abs(b.h - b.h) >= delta || Math.abs(b.i - b.i) >= delta || Math.abs(b.j - b.j) >= delta || Math.abs(b.k - b.k) >= delta || Math.abs(b.l - b.l) >= delta);
			} catch (`1692:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1692).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1695:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1695).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:774 [OK] ({\nvar a = Matrix4x3.counting;\nvar b = -a;\nb == new Matrix4x3({ a: -1., b: -2., c: -3., d: -4.\n, e: -5., f: -6., g: -7., h: -8\n, i: -9., j: -10., k: -11., l: -12. }); }) == true", {lineNumber : 774, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix4x3.counting;\nvar b = -a;\nb == new Matrix4x3({ a: -1., b: -2., c: -3., d: -4.\n, e: -5., f: -6., g: -7., h: -8\n, i: -9., j: -10., k: -11., l: -12. }); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 774, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(a.a + a.a, a.b + a.b, a.c + a.c, a.d + a.d, a.e + a.e, a.f + a.f, a.g + a.g, a.h + a.h, a.i + a.i, a.j + a.j, a.k + a.k, a.l + a.l);
				var a = cast this;
				var this = new geom.structure.Mat4x3(2., 0., 0., 0., 0., 2., 0., 0., 0., 0., 2., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1698:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1698).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1701:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1701).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:794 [OK] ({\nvar a = Matrix4x3.unit;\na + a == new Matrix4x3( { a: 2., b: 0., c: 0., d: 0.\n, e: 0., f: 2., g: 0., h: 0.\n, i: 0., j: 0., k: 2., l: 0. } ); }) == true", {lineNumber : 794, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix4x3.unit;\na + a == new Matrix4x3( { a: 2., b: 0., c: 0., d: 0.\n, e: 0., f: 2., g: 0., h: 0.\n, i: 0., j: 0., k: 2., l: 0. } ); }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 794, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat4x3(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.);
				var a = cast this;
				var this = new geom.structure.Mat4x3(a.a - a.a, a.b - a.b, a.c - a.c, a.d - a.d, a.e - a.e, a.f - a.f, a.g - a.g, a.h - a.h, a.i - a.i, a.j - a.j, a.k - a.k, a.l - a.l);
				var a = cast this;
				var this = new geom.structure.Mat4x3(0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.);
				var b = cast this;
				var delta = 0.0000001;
				left = ! (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
			} catch (`1704:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1704).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1707:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1707).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Matrix4x3.hx:809 [OK] ({\nvar a = Matrix4x3.unit;\na - a == Matrix4x3.zero; }) == true", {lineNumber : 809, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Matrix4x3.unit;\na - a == Matrix4x3.zero; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 809, fileName : "src/geom/matrix/Matrix4x3.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testDualQuaternion_1() {
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(0., 0., 0., 1.);
				var this = new geom.structure.Mat1x4(0., 0., 0., 1.);
				var this = new geom.structure.DualQ(cast this, cast this);
				left = cast this;
			} catch (`1710:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1710).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				var this = new geom.structure.DualQ(cast new geom.structure.Mat1x4(0., 0., 0., 1.), cast new geom.structure.Mat1x4(0., 0., 0., 1.));
				right = cast this;
			} catch (`1713:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1713).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("DualQuaternion.hx:15 [OK] DualQuaternion.zero == new DualQuaternion({real:{ x: 0., y: 0., z: 0., w: 1. },dual:{x:0.,y:0.,z:0.,w:1.}})", {lineNumber : 15, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("DualQuaternion.zero == new DualQuaternion({real:{ x: 0., y: 0., z: 0., w: 1. },dual:{x:0.,y:0.,z:0.,w:1.}}) --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 15, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var b = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var c = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var d = cast this;
				var this = new geom.structure.DualQ(a, b);
				var e = cast this;
				var this = new geom.structure.DualQ(c, d);
				var f = cast this;
				var a = e.real;
				var b = f.real;
				var delta = 0.0000001;
				if ((! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta))) {
					var a = e.dual;
					var b = f.dual;
					var delta = 0.0000001;
					left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
				} else left = false;
			} catch (`1716:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1716).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1719:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1719).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("DualQuaternion.hx:30 [OK] ({\nvar a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar c = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar d = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar e = new DualQuaternion( { real: a, dual: b } );\nvar f = new DualQuaternion( { real: c, dual: d } );\ne == f; }) == true", {lineNumber : 30, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar c = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar d = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar e = new DualQuaternion( { real: a, dual: b } );\nvar f = new DualQuaternion( { real: c, dual: d } );\ne == f; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 30, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var b = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 4., 1.);
				var c = cast this;
				var this = new geom.structure.Mat1x4(1., 2., 4., 1.);
				var d = cast this;
				var this = new geom.structure.DualQ(a, b);
				var e = cast this;
				var this = new geom.structure.DualQ(c, d);
				var f = cast this;
				var left;
				var a = e.real;
				var b = f.real;
				var delta = 0.0000001;
				if ((! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta))) {
					var a = e.dual;
					var b = f.dual;
					var delta = 0.0000001;
					left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
				} else left = false;
				left = ! left;
			} catch (`1722:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1722).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1725:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1725).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("DualQuaternion.hx:46 [OK] ({\nvar a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar c = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );\nvar d = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );\nvar e = new DualQuaternion( { real: a, dual: b } );\nvar f = new DualQuaternion( { real: c, dual: d } );\ne != f; }) == true", {lineNumber : 46, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );\nvar c = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );\nvar d = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );\nvar e = new DualQuaternion( { real: a, dual: b } );\nvar f = new DualQuaternion( { real: c, dual: d } );\ne != f; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 46, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var b = cast this;
				var this = new geom.structure.DualQ(a, b);
				var c = cast this;
				var a = c.real;
				var b = c.real;
				var this = new geom.structure.Mat1x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
				var a = c.dual;
				var b = c.dual;
				var this = new geom.structure.Mat1x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
				var this = new geom.structure.DualQ(cast this, cast this);
				var a = cast this;
				var this = new geom.structure.DualQ(cast new geom.structure.Mat1x4(2., 2., 2., 2.), cast new geom.structure.Mat1x4(2., 2., 2., 2.));
				var b = cast this;
				var a = a.real;
				var b = b.real;
				var delta = 0.0000001;
				if ((! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta))) {
					var a = a.dual;
					var b = b.dual;
					var delta = 0.0000001;
					left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
				} else left = false;
			} catch (`1728:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1728).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1731:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1731).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("DualQuaternion.hx:70 [OK] ({\nvar a = Quaternion.unit;\nvar b = Quaternion.unit;\nvar c = new DualQuaternion( { real: a, dual: b } );\nc + c == new DualQuaternion( { real:{ x: 2., y: 2., z: 2., w: 2. }, dual: { x: 2., y: 2., z: 2., w: 2. } } );\n}) == true", {lineNumber : 70, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.unit;\nvar b = Quaternion.unit;\nvar c = new DualQuaternion( { real: a, dual: b } );\nc + c == new DualQuaternion( { real:{ x: 2., y: 2., z: 2., w: 2. }, dual: { x: 2., y: 2., z: 2., w: 2. } } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 70, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var a = cast this;
				var this = new geom.structure.Mat1x4(1., 1., 1., 1.);
				var b = cast this;
				var this = new geom.structure.DualQ(a, b);
				var c = cast this;
				var a = c.real;
				var b = c.real;
				var this = new geom.structure.Mat1x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
				var a = c.dual;
				var b = c.dual;
				var this = new geom.structure.Mat1x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
				var this = new geom.structure.DualQ(cast this, cast this);
				var a = cast this;
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				var this = new geom.structure.Mat1x4(0., 0., 0., 0.);
				var this = new geom.structure.DualQ(cast this, cast this);
				var b = cast this;
				var a = a.real;
				var b = b.real;
				var delta = 0.0000001;
				if ((! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta))) {
					var a = a.dual;
					var b = b.dual;
					var delta = 0.0000001;
					left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
				} else left = false;
			} catch (`1734:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1734).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1737:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1737).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("DualQuaternion.hx:84 [OK] ({\nvar a = Quaternion.unit;\nvar b = Quaternion.unit;\nvar c = new DualQuaternion( { real: a, dual: b } );\nc - c == new DualQuaternion( { real: Quaternion.zero, dual: Quaternion.zero } );\n}) == true", {lineNumber : 84, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = Quaternion.unit;\nvar b = Quaternion.unit;\nvar c = new DualQuaternion( { real: a, dual: b } );\nc - c == new DualQuaternion( { real: Quaternion.zero, dual: Quaternion.zero } );\n}) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 84, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var this = new geom.structure.Mat1x4(1., 2., 3., 1.);
				var a = cast this;
				var this = new geom.structure.DualQ(a, a);
				var c = cast this;
				var a = c.real;
				var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, - a.w);
				var a = c.dual;
				var this = new geom.structure.Mat1x4(- a.x, - a.y, - a.z, - a.w);
				var this = new geom.structure.DualQ(cast this, cast this);
				var b = cast this;
				var this = new geom.structure.Mat1x4(-1., -2., -3., -1.);
				var e = cast this;
				var this = new geom.structure.DualQ(e, e);
				var f = cast this;
				var a = b.real;
				var b = f.real;
				var delta = 0.0000001;
				if ((! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta))) {
					var a = b.dual;
					var b = f.dual;
					var delta = 0.0000001;
					left = ! (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
				} else left = false;
			} catch (`1740:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1740).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1743:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1743).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("DualQuaternion.hx:98 [OK] ({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar c = new DualQuaternion({ real: a, dual: a } );\nvar b = -c;\nvar e = new Quaternion({ x: -1., y: -2., z: -3., w: -1. });\nvar f = new DualQuaternion({ real: e, dual: e });\nb == f; }) == true", {lineNumber : 98, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });\nvar c = new DualQuaternion({ real: a, dual: a } );\nvar b = -c;\nvar e = new Quaternion({ x: -1., y: -2., z: -3., w: -1. });\nvar f = new DualQuaternion({ real: e, dual: e });\nb == f; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 98, fileName : "src/geom/matrix/DualQuaternion.hx", className : "", methodName : ""});
		};
	}

	@:keep
	public function testFloat32Flat_1() {
		{
			var left;
			try {
				var size = 16;
				var this = new haxe.io.ArrayBufferViewImpl(haxe.io.Bytes.alloc(size), 0, size);
				var this = cast cast this;
				var this = cast this;
				if ((0 < cast this.byteLength >> 2)) cast this.bytes.setFloat(cast this.byteOffset, 0.);
				if ((1 < cast this.byteLength >> 2)) cast this.bytes.setFloat(4 + cast this.byteOffset, 0.);
				var ff = cast this;
				{
					var index = 2;
					if ((index >= 0 && index < cast cast ff.byteLength >> 2)) cast cast ff.bytes.setFloat((index << 2) + cast cast ff.byteOffset, 1.);
				};
				left = cast cast ff.bytes.getFloat(8 + cast cast ff.byteOffset) == 1.;
			} catch (`1746:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1746).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1749:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1749).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Float32Flat.hx:10 [OK] ({\nvar ff = new Float32Flat(2);\nff[0] = 1.;\nff[0] == 1.; }) == true", {lineNumber : 10, fileName : "src/geom/flat/f32/Float32Flat.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar ff = new Float32Flat(2);\nff[0] = 1.;\nff[0] == 1.; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 10, fileName : "src/geom/flat/f32/Float32Flat.hx", className : "", methodName : ""});
		};
		{
			var left;
			try {
				var size = 16;
				var this = new haxe.io.ArrayBufferViewImpl(haxe.io.Bytes.alloc(size), 0, size);
				var this = cast cast this;
				var this = cast this;
				if ((0 < cast this.byteLength >> 2)) cast this.bytes.setFloat(cast this.byteOffset, 0.);
				if ((1 < cast this.byteLength >> 2)) cast this.bytes.setFloat(4 + cast this.byteOffset, 0.);
				var ff = cast this;
				{
					var index = 2;
					if ((index >= 0 && index < cast cast ff.byteLength >> 2)) cast cast ff.bytes.setFloat((index << 2) + cast cast ff.byteOffset, 1.);
				};
				left = cast cast ff.bytes.getFloat(8 + cast cast ff.byteOffset) == 1.;
			} catch (`1752:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1752).unwrap();
				left = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			var right;
			try {
				right = true;
			} catch (`1755:Dynamic) {
				{
					null;
				};
				var ex = cast haxe.Exception.caught(`1755).unwrap();
				right = "exception: " + Std.string(ex) + hx.doctest.internal.DocTestUtils.exceptionStackAsString();
			};
			if ((hx.doctest.internal.DocTestUtils.deepEquals(left, right))) utest.Assert.pass("Float32Flat.hx:23 [OK] ({\nvar ff = new Float32Flat(2);\nff[0] = 1.;\nff[0] == 1.; }) == true", {lineNumber : 23, fileName : "src/geom/flat/f32/Float32Flat.hx", className : "", methodName : ""}) else utest.Assert.fail("({\nvar ff = new Float32Flat(2);\nff[0] = 1.;\nff[0] == 1.; }) == true --> Left side `" + Std.string(left) + "` does not equal `" + Std.string(right) + "`.", {lineNumber : 23, fileName : "src/geom/flat/f32/Float32Flat.hx", className : "", methodName : ""});
		};
	}

	@:noCompletion @:keep
	public function __initializeUtest__() {
		var `this = this;
		var init = super.__initializeUtest__();
		init.tests.push({name : "testMultiVector3_1", execute : function() {
			`this.testMultiVector3_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMultiVector2_1", execute : function() {
			`this.testMultiVector2_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMatrix5x5_1", execute : function() {
			`this.testMatrix5x5_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMatrix4x4_1", execute : function() {
			`this.testMatrix4x4_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMatrix1x2_1", execute : function() {
			`this.testMatrix1x2_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMatrix1x3_1", execute : function() {
			`this.testMatrix1x3_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testQuaternion_1", execute : function() {
			`this.testQuaternion_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMatrix1x4_1", execute : function() {
			`this.testMatrix1x4_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMatrix3x3_1", execute : function() {
			`this.testMatrix3x3_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMatrix2x2_1", execute : function() {
			`this.testMatrix2x2_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testComplex_1", execute : function() {
			`this.testComplex_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testMatrix4x3_1", execute : function() {
			`this.testMatrix4x3_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testDualQuaternion_1", execute : function() {
			`this.testDualQuaternion_1();
			return utest.Async.getResolved();
		}});
		init.tests.push({name : "testFloat32Flat_1", execute : function() {
			`this.testFloat32Flat_1();
			return utest.Async.getResolved();
		}});
		return init;
	}

	@:keep
	public static function main() {
		var runner = new utest.Runner();
		runner.addCase(new geom.GeomTest(), null, null, null, null, null, null);
		utest.ui.Report.create(runner, null, null);
		runner.run();
	}
}
@:directlyUsed @:used
extern class Reflect {

	static function hasField(o:Dynamic, field:String):Bool;

	static function field(o:Dynamic, field:String):Dynamic;

	static function setField(o:Dynamic, field:String, value:Dynamic):Void;

	static function getProperty(o:Dynamic, field:String):Dynamic;

	static function setProperty(o:Dynamic, field:String, value:Dynamic):Void;

	static function callMethod(o:Dynamic, func:haxe.Function, args:Array<Dynamic>):Dynamic;

	static function fields(o:Dynamic):Array<String>;

	static function isFunction(f:Dynamic):Bool;

	static function compare<T : compare.T>(a:compare.T, b:compare.T):Int;

	static function compareMethods(f1:Dynamic, f2:Dynamic):Bool;

	static function isObject(v:Dynamic):Bool;

	static function isEnumValue(v:Dynamic):Bool;

	static function deleteField(o:Dynamic, field:String):Bool;

	static function copy<T : copy.T>(o:Null<copy.T>):Null<copy.T>;

	static function makeVarArgs(f:Array<Dynamic> -> Dynamic):Dynamic;

	static function makeVarArgs(f:Array<Dynamic> -> Void):Dynamic;
}
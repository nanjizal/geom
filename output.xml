<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<exec public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Null"><c path="js.lib.RegExpMatch"/></x>
</f></exec>
		<test public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></test>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="pattern:?flags">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).</haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/js/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<exp public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></exp>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<log public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="js.Syntax" params="" file="/usr/local/lib/haxe/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```</haxe_doc>
		</code>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/js/_std/Std.hx">
		<string public="1" set="method" line="41" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringTools" params="" file="/usr/local/lib/haxe/std/StringTools.hx">
		<hex public="1" set="method" line="444" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/usr/local/lib/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/usr/local/lib/haxe/std/UInt.hx" private="1" module="UInt">
	<gt set="method" line="151" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/usr/local/lib/haxe/std/UInt.hx" private="1" module="UInt">
		<gt set="method" line="151" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="geom.GeomDoc" params="" file="src/geom/GeomDoc.hx">
		<main public="1" set="method" line="15" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<abstract path="geom.MathConstants" params="" file="src/geom/Numerical.hx" module="geom.Numerical">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Float"/></this>
		<to><icast><x path="Float"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="geom._Numerical.MathConstants_Impl_" params="" file="src/geom/Numerical.hx" private="1" module="geom.Numerical" extern="1">
	<LN2 public="1" get="inline" set="null" expr="cast 0.69314718055994530941723212145817656807550013436025" line="6" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 0.69314718055994530941723212145817656807550013436025</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LN2>
	<LN10 public="1" get="inline" set="null" expr="cast 2.30258509299404568401799145468436420760110148862877" line="7" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 2.30258509299404568401799145468436420760110148862877</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LN10>
	<LOG2E public="1" get="inline" set="null" expr="cast 1.442695040888963387" line="8" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 1.442695040888963387</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOG2E>
	<LOG10E public="1" get="inline" set="null" expr="cast 0.4342944819032518" line="9" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 0.4342944819032518</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOG10E>
	<SQRTS1_2 public="1" get="inline" set="null" expr="cast 0.7071067811865476" line="10" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 0.7071067811865476</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SQRTS1_2>
	<EPSILON public="1" get="inline" set="null" expr="cast 0.0000001" line="11" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 0.0000001</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EPSILON>
	<napier public="1" get="inline" set="null" expr="cast 2.71828182845904523536028747135266249775724709369995" line="12" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 2.71828182845904523536028747135266249775724709369995</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</napier>
	<toDegree public="1" get="inline" set="null" expr="cast 180 / 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679" line="13" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 180 / 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</toDegree>
	<toRadian public="1" get="inline" set="null" expr="cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 180" line="14" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 180</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</toRadian>
	<archimedes public="1" get="inline" set="null" expr="cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679" line="15" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</archimedes>
	<halfPI public="1" get="inline" set="null" expr="cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 2" line="16" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</halfPI>
	<ninty public="1" get="inline" set="null" expr="cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 4" line="17" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ninty>
	<pythagoras public="1" get="inline" set="null" expr="cast 1.41421356237309504880168872420969807856967187537694807317667973799" line="18" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 1.41421356237309504880168872420969807856967187537694807317667973799</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pythagoras>
	<theodorus public="1" get="inline" set="null" expr="cast 1.73205080756887729352744634150587236" line="19" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 1.73205080756887729352744634150587236</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</theodorus>
	<root5 public="1" get="inline" set="null" expr="cast 2.23606797749978969640917366873127623" line="20" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 2.23606797749978969640917366873127623</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</root5>
	<feigenbaum public="1" get="inline" set="null" expr="cast 4.669201609102990671853203821578" line="21" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 4.669201609102990671853203821578</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</feigenbaum>
	<feigenbaum2 public="1" get="inline" set="null" expr="cast 2.502907875095892822283902873218" line="22" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 2.502907875095892822283902873218</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</feigenbaum2>
	<goldenRatio public="1" get="inline" set="null" expr="cast 1.61803398874989484820458683436563811772030917980576" line="23" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 1.61803398874989484820458683436563811772030917980576</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</goldenRatio>
	<aperys public="1" get="inline" set="null" expr="cast 1.20205690315959428539973816151144999076498629234049" line="24" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 1.20205690315959428539973816151144999076498629234049</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</aperys>
	<eulerMascheroni public="1" get="inline" set="null" expr="cast 0.57721566490153286060651209008240243104215933593992" line="25" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 0.57721566490153286060651209008240243104215933593992</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</eulerMascheroni>
	<catalan public="1" get="inline" set="null" expr="cast 0.91596559417721901505460351493238411077414937428167" line="26" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 0.91596559417721901505460351493238411077414937428167</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</catalan>
	<lemniscate public="1" get="inline" set="null" expr="cast 5.24411510858423962092967917978223882736550990286324" line="27" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 5.24411510858423962092967917978223882736550990286324</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lemniscate>
	<gammaQuarter public="1" get="inline" set="null" expr="cast 3.62560990822190831193068515586767200299516768288006" line="28" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 3.62560990822190831193068515586767200299516768288006</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</gammaQuarter>
	<gammaThird public="1" get="inline" set="null" expr="cast 2.67893853470774763365569294097467764412868937795730" line="29" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 2.67893853470774763365569294097467764412868937795730</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</gammaThird>
	<zeta public="1" get="inline" set="null" expr="cast 1.03692775514336992633136548645703416805708091950191" line="30" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 1.03692775514336992633136548645703416805708091950191</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</zeta>
	<khinchin public="1" get="inline" set="null" expr="cast 2.68545" line="31" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 2.68545</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</khinchin>
	<glaisher public="1" get="inline" set="null" expr="cast 1.28243" line="32" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 1.28243</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</glaisher>
	<mertens public="1" get="inline" set="null" expr="cast 0.261497" line="33" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 0.261497</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</mertens>
	<twinPrime public="1" get="inline" set="null" expr="cast 0.660162" line="34" static="1">
		<x path="geom.MathConstants"/>
		<meta>
			<m n=":value"><e>cast 0.660162</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</twinPrime>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="geom._Numerical.MathConstants_Impl_" params="" file="src/geom/Numerical.hx" private="1" module="geom.Numerical" extern="1">
		<LN2 public="1" get="inline" set="null" expr="cast 0.69314718055994530941723212145817656807550013436025" line="6" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 0.69314718055994530941723212145817656807550013436025</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LN2>
		<LN10 public="1" get="inline" set="null" expr="cast 2.30258509299404568401799145468436420760110148862877" line="7" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 2.30258509299404568401799145468436420760110148862877</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LN10>
		<LOG2E public="1" get="inline" set="null" expr="cast 1.442695040888963387" line="8" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 1.442695040888963387</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOG2E>
		<LOG10E public="1" get="inline" set="null" expr="cast 0.4342944819032518" line="9" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 0.4342944819032518</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOG10E>
		<SQRTS1_2 public="1" get="inline" set="null" expr="cast 0.7071067811865476" line="10" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 0.7071067811865476</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SQRTS1_2>
		<EPSILON public="1" get="inline" set="null" expr="cast 0.0000001" line="11" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 0.0000001</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EPSILON>
		<napier public="1" get="inline" set="null" expr="cast 2.71828182845904523536028747135266249775724709369995" line="12" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 2.71828182845904523536028747135266249775724709369995</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</napier>
		<toDegree public="1" get="inline" set="null" expr="cast 180 / 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679" line="13" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 180 / 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</toDegree>
		<toRadian public="1" get="inline" set="null" expr="cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 180" line="14" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 180</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</toRadian>
		<archimedes public="1" get="inline" set="null" expr="cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679" line="15" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</archimedes>
		<halfPI public="1" get="inline" set="null" expr="cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 2" line="16" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</halfPI>
		<ninty public="1" get="inline" set="null" expr="cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 4" line="17" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 / 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ninty>
		<pythagoras public="1" get="inline" set="null" expr="cast 1.41421356237309504880168872420969807856967187537694807317667973799" line="18" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 1.41421356237309504880168872420969807856967187537694807317667973799</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pythagoras>
		<theodorus public="1" get="inline" set="null" expr="cast 1.73205080756887729352744634150587236" line="19" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 1.73205080756887729352744634150587236</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</theodorus>
		<root5 public="1" get="inline" set="null" expr="cast 2.23606797749978969640917366873127623" line="20" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 2.23606797749978969640917366873127623</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</root5>
		<feigenbaum public="1" get="inline" set="null" expr="cast 4.669201609102990671853203821578" line="21" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 4.669201609102990671853203821578</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</feigenbaum>
		<feigenbaum2 public="1" get="inline" set="null" expr="cast 2.502907875095892822283902873218" line="22" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 2.502907875095892822283902873218</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</feigenbaum2>
		<goldenRatio public="1" get="inline" set="null" expr="cast 1.61803398874989484820458683436563811772030917980576" line="23" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 1.61803398874989484820458683436563811772030917980576</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</goldenRatio>
		<aperys public="1" get="inline" set="null" expr="cast 1.20205690315959428539973816151144999076498629234049" line="24" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 1.20205690315959428539973816151144999076498629234049</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</aperys>
		<eulerMascheroni public="1" get="inline" set="null" expr="cast 0.57721566490153286060651209008240243104215933593992" line="25" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 0.57721566490153286060651209008240243104215933593992</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</eulerMascheroni>
		<catalan public="1" get="inline" set="null" expr="cast 0.91596559417721901505460351493238411077414937428167" line="26" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 0.91596559417721901505460351493238411077414937428167</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</catalan>
		<lemniscate public="1" get="inline" set="null" expr="cast 5.24411510858423962092967917978223882736550990286324" line="27" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 5.24411510858423962092967917978223882736550990286324</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lemniscate>
		<gammaQuarter public="1" get="inline" set="null" expr="cast 3.62560990822190831193068515586767200299516768288006" line="28" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 3.62560990822190831193068515586767200299516768288006</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</gammaQuarter>
		<gammaThird public="1" get="inline" set="null" expr="cast 2.67893853470774763365569294097467764412868937795730" line="29" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 2.67893853470774763365569294097467764412868937795730</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</gammaThird>
		<zeta public="1" get="inline" set="null" expr="cast 1.03692775514336992633136548645703416805708091950191" line="30" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 1.03692775514336992633136548645703416805708091950191</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</zeta>
		<khinchin public="1" get="inline" set="null" expr="cast 2.68545" line="31" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 2.68545</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</khinchin>
		<glaisher public="1" get="inline" set="null" expr="cast 1.28243" line="32" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 1.28243</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</glaisher>
		<mertens public="1" get="inline" set="null" expr="cast 0.261497" line="33" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 0.261497</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</mertens>
		<twinPrime public="1" get="inline" set="null" expr="cast 0.660162" line="34" static="1">
			<x path="geom.MathConstants"/>
			<meta>
				<m n=":value"><e>cast 0.660162</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</twinPrime>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="geom.Numerical" params="" file="src/geom/Numerical.hx">
		<clz32 public="1" get="inline" set="null" line="40" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* This is probably broken?  More investigation required.</haxe_doc>
		</clz32>
		<maxInt2 public="1" get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>*  Provides Math.max for Integer</haxe_doc>
		</maxInt2>
		<minInt2 public="1" get="inline" set="null" line="68" static="1">
			<f a="a:b:c">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>*  Provides Math.min for Integer</haxe_doc>
		</minInt2>
		<minInt3 public="1" get="inline" set="null" line="79" static="1">
			<f a="a:b:c">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>*  Provides Math.min for 3 Integer</haxe_doc>
		</minInt3>
		<maxInt3 public="1" get="inline" set="null" line="98" static="1">
			<f a="a:b:c">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>*  Provides Math.max for 3 Integer</haxe_doc>
		</maxInt3>
	</class>
	<class path="geom.constraints.Chain" params="" file="src/geom/constraints/Chain.hx">
		<joints public="1" expr="new Array&lt;Matrix1x4&gt;()">
			<c path="Array"><x path="geom.matrix.Matrix1x4"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Matrix1x4>()]]></e></m></meta>
		</joints>
		<points><x path="Int"/></points>
		<distance><x path="Float"/></distance>
		<update public="1" get="inline" set="null" line="16"><f a="anchor:render">
	<x path="geom.matrix.Matrix1x4"/>
	<f a="i:joint">
		<x path="Int"/>
		<x path="geom.matrix.Matrix1x4"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="11"><f a="x:y:points_:distance_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="geom.constraints.Collision" params="" file="src/geom/constraints/Collision.hx">
		<joints expr="new Array&lt;Matrix1x4&gt;()">
			<c path="Array"><x path="geom.matrix.Matrix1x4"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Matrix1x4>()]]></e></m></meta>
		</joints>
		<points><x path="Int"/></points>
		<distance><x path="Float"/></distance>
		<circleSize><x path="Float"/></circleSize>
		<x><x path="Float"/></x>
		<y><x path="Float"/></y>
		<update public="1" get="inline" set="null" line="29"><f a="anchor:render">
	<x path="geom.matrix.Matrix1x4"/>
	<f a="i:joint">
		<x path="Int"/>
		<x path="geom.matrix.Matrix1x4"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="14"><f a="x_:y_:points_:circleSize_:collisionArea:distance_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="geom.constraints.Fabrik" params="" file="src/geom/constraints/Fabrik.hx">
		<joints public="1" expr="new Array&lt;Matrix1x4&gt;()">
			<c path="Array"><x path="geom.matrix.Matrix1x4"/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Matrix1x4>()]]></e></m></meta>
		</joints>
		<points><x path="Int"/></points>
		<distance><x path="Float"/></distance>
		<x><x path="Float"/></x>
		<y><x path="Float"/></y>
		<update public="1" get="inline" set="null" line="20"><f a="anchor:render">
	<x path="geom.matrix.Matrix1x4"/>
	<f a="i:joint">
		<x path="Int"/>
		<x path="geom.matrix.Matrix1x4"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="13"><f a="x_:y_:points_:distance_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="geom.constraints.Inner" params="" file="src/geom/constraints/Inner.hx">
		<point public="1"><x path="geom.matrix.Matrix1x4"/></point>
		<distance><x path="Float"/></distance>
		<update public="1" get="inline" set="null" line="14"><f a="anchor">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="10"><f a="x:y:distance_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="geom.constraints.Interval" params="" file="src/geom/constraints/Interval.hx">
		<from><icast><c path="geom.structure.Range"/></icast></from>
		<this><c path="geom.structure.Range"/></this>
		<to><icast><c path="geom.structure.Range"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.constraints._Interval.Interval_Impl_" params="" file="src/geom/constraints/Interval.hx" private="1" module="geom.constraints.Interval">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="interval">
			<c path="geom.structure.Range"/>
			<x path="geom.constraints.Interval"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<valid public="1" get="inline" set="null" line="9" static="1">
		<f a="this">
			<c path="geom.structure.Range"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</valid>
	<fix public="1" get="inline" set="null" line="13" static="1">
		<f a="this">
			<c path="geom.structure.Range"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fix>
	<clampClosed public="1" get="inline" set="null" line="21" static="1">
		<f a="this:v">
			<c path="geom.structure.Range"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clampClosed>
	<clampOpen public="1" get="inline" set="null" line="27" static="1">
		<f a="this:v">
			<c path="geom.structure.Range"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clampOpen>
	<close public="1" get="inline" set="null" line="33" static="1">
		<f a="this:v:?delta" v="::0.00001">
			<c path="geom.structure.Range"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":value"><e>{ delta : 0.00001 }</e></m>
			<m n=":impl"/>
		</meta>
	</close>
	<above public="1" get="inline" set="null" line="38" static="1">
		<f a="this:v">
			<c path="geom.structure.Range"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</above>
	<below public="1" get="inline" set="null" line="42" static="1">
		<f a="this:v">
			<c path="geom.structure.Range"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</below>
	<inClampOpen public="1" get="inline" set="null" line="46" static="1">
		<f a="this:v">
			<c path="geom.structure.Range"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</inClampOpen>
	<inClampClosed public="1" get="inline" set="null" line="50" static="1">
		<f a="this:v">
			<c path="geom.structure.Range"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</inClampClosed>
	<unit public="1" get="inline" set="null" line="54" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unit>
	<unitFloat public="1" get="inline" set="null" line="59" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unitFloat>
	<unitNegative public="1" get="inline" set="null" line="64" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unitNegative>
	<inUnitFloat public="1" get="inline" set="null" line="69" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></inUnitFloat>
	<random public="1" get="inline" set="null" line="73" static="1">
		<f a="this">
			<c path="geom.structure.Range"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</random>
	<randomInt public="1" get="inline" set="null" line="77" static="1">
		<f a="this">
			<c path="geom.structure.Range"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</randomInt>
</class></impl>
	</abstract>
	<class path="geom.constraints._Interval.Interval_Impl_" params="" file="src/geom/constraints/Interval.hx" private="1" module="geom.constraints.Interval">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="interval">
				<c path="geom.structure.Range"/>
				<x path="geom.constraints.Interval"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<valid public="1" get="inline" set="null" line="9" static="1">
			<f a="this">
				<c path="geom.structure.Range"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</valid>
		<fix public="1" get="inline" set="null" line="13" static="1">
			<f a="this">
				<c path="geom.structure.Range"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fix>
		<clampClosed public="1" get="inline" set="null" line="21" static="1">
			<f a="this:v">
				<c path="geom.structure.Range"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clampClosed>
		<clampOpen public="1" get="inline" set="null" line="27" static="1">
			<f a="this:v">
				<c path="geom.structure.Range"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clampOpen>
		<close public="1" get="inline" set="null" line="33" static="1">
			<f a="this:v:?delta" v="::0.00001">
				<c path="geom.structure.Range"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ delta : 0.00001 }</e></m>
				<m n=":impl"/>
			</meta>
		</close>
		<above public="1" get="inline" set="null" line="38" static="1">
			<f a="this:v">
				<c path="geom.structure.Range"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</above>
		<below public="1" get="inline" set="null" line="42" static="1">
			<f a="this:v">
				<c path="geom.structure.Range"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</below>
		<inClampOpen public="1" get="inline" set="null" line="46" static="1">
			<f a="this:v">
				<c path="geom.structure.Range"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</inClampOpen>
		<inClampClosed public="1" get="inline" set="null" line="50" static="1">
			<f a="this:v">
				<c path="geom.structure.Range"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</inClampClosed>
		<unit public="1" get="inline" set="null" line="54" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unit>
		<unitFloat public="1" get="inline" set="null" line="59" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unitFloat>
		<unitNegative public="1" get="inline" set="null" line="64" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></unitNegative>
		<inUnitFloat public="1" get="inline" set="null" line="69" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></inUnitFloat>
		<random public="1" get="inline" set="null" line="73" static="1">
			<f a="this">
				<c path="geom.structure.Range"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</random>
		<randomInt public="1" get="inline" set="null" line="77" static="1">
			<f a="this">
				<c path="geom.structure.Range"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</randomInt>
	</class>
	<abstract path="geom.constraints.RadianInterval" params="" file="src/geom/constraints/Interval.hx" module="geom.constraints.Interval">
		<from><icast><x path="geom.constraints.Interval"/></icast></from>
		<this><x path="geom.constraints.Interval"/></this>
		<to><icast><x path="geom.constraints.Interval"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.constraints._Interval.RadianInterval_Impl_" params="" file="src/geom/constraints/Interval.hx" private="1" module="geom.constraints.Interval">
	<_new public="1" get="inline" set="null" line="84" static="1">
		<f a=""><x path="geom.constraints.RadianInterval"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<wrap public="1" get="inline" set="null" line="88" static="1">
		<f a="this:v">
			<x path="geom.constraints.Interval"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</wrap>
	<inPiWrap public="1" get="inline" set="null" line="92" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></inPiWrap>
	<wrapRadian public="1" get="inline" set="null" line="96" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></wrapRadian>
</class></impl>
	</abstract>
	<class path="geom.constraints._Interval.RadianInterval_Impl_" params="" file="src/geom/constraints/Interval.hx" private="1" module="geom.constraints.Interval">
		<_new public="1" get="inline" set="null" line="84" static="1">
			<f a=""><x path="geom.constraints.RadianInterval"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<wrap public="1" get="inline" set="null" line="88" static="1">
			<f a="this:v">
				<x path="geom.constraints.Interval"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</wrap>
		<inPiWrap public="1" get="inline" set="null" line="92" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></inPiWrap>
		<wrapRadian public="1" get="inline" set="null" line="96" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></wrapRadian>
	</class>
	<class path="geom.curve.Bezier" params="" file="src/geom/curve/Bezier.hx">
		<approxInterval public="1" get="inline" set="null" line="6" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></approxInterval>
		<approxInverseInterval public="1" get="inline" set="null" line="13" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></approxInverseInterval>
		<quadError public="1" get="inline" set="null" line="20" static="1"><f a="p0:p1:p2">
	<x path="geom.matrix.Matrix1x2"/>
	<x path="geom.matrix.Matrix1x2"/>
	<x path="geom.matrix.Matrix1x2"/>
	<x path="Float"/>
</f></quadError>
		<subdiv public="1" get="inline" set="null" line="29" static="1"><f a="tol:p0:p1:p2">
	<x path="Float"/>
	<x path="geom.matrix.Matrix1x2"/>
	<x path="geom.matrix.Matrix1x2"/>
	<x path="geom.matrix.Matrix1x2"/>
	<c path="Array"><x path="Float"/></c>
</f></subdiv>
		<quadratic public="1" get="inline" set="null" line="78" static="1"><f a="t:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadratic>
		<quadSegment public="1" get="inline" set="null" line="83" static="1"><f a="t0:t1:s:c:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></quadSegment>
		<cubic public="1" get="inline" set="null" line="88" static="1"><f a="t:s:c1:c2:e">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></cubic>
	</class>
	<class path="geom.curve.ComplexTrig" params="" file="src/geom/curve/ComplexTrig.hx">
		<sin public="1" get="inline" set="null" line="8" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></sin>
		<cos public="1" get="inline" set="null" line="17" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></cos>
		<tan public="1" get="inline" set="null" line="26" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></tan>
		<sinh public="1" get="inline" set="null" line="36" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></sinh>
		<cosh public="1" get="inline" set="null" line="45" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></cosh>
		<tanh public="1" get="inline" set="null" line="54" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></tanh>
	</class>
	<class path="geom.curve.Cubic" params="" file="src/geom/curve/Cubic.hx">
		<cube public="1" get="inline" set="null" line="4" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></cube>
		<cbrt public="1" get="inline" set="null" line="9" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></cbrt>
	</class>
	<class path="geom.curve.Hyperbolic" params="" file="src/geom/curve/Hyperbolic.hx">
		<sinh public="1" get="inline" set="null" line="7" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></sinh>
		<cosech public="1" get="inline" set="null" line="12" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></cosech>
		<sech public="1" get="inline" set="null" line="16" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></sech>
		<cosh public="1" get="inline" set="null" line="20" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></cosh>
		<coth public="1" get="inline" set="null" line="25" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></coth>
		<tanh public="1" get="inline" set="null" line="29" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></tanh>
		<acosh public="1" get="inline" set="null" line="43" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></acosh>
		<asinh public="1" get="inline" set="null" line="47" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></asinh>
		<atanh public="1" get="inline" set="null" line="51" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></atanh>
	</class>
	<class path="geom.curve.Logarithmic" params="" file="src/geom/curve/Logarithmic.hx">
		<expm1 public="1" get="inline" set="null" line="4" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></expm1>
		<log1p public="1" get="inline" set="null" line="8" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></log1p>
		<log10 public="1" get="inline" set="null" line="12" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></log10>
		<log2 public="1" get="inline" set="null" line="17" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></log2>
	</class>
	<abstract path="geom.flat.Float32Flat" params="" file="src/geom/flat/Float32Flat.hx">
		<from><icast><x path="haxe.io.Float32Array"/></icast></from>
		<this><x path="haxe.io.Float32Array"/></this>
		<to><icast><x path="haxe.io.Float32Array"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat.Float32Flat_Impl_" params="" file="src/geom/flat/Float32Flat.hx" private="1" module="geom.flat.Float32Flat">
	<readItem public="1" get="inline" set="null" line="10" static="1">
		<f a="this:k">
			<x path="haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="15" static="1">
		<f a="this:k:v">
			<x path="haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="21" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<x path="haxe.io.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="41" static="1">
		<f a="this">
			<x path="haxe.io.Float32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="45" static="1">
		<f a="this:id">
			<x path="haxe.io.Float32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="51" static="1">
		<f a="this">
			<x path="haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="55" static="1">
		<f a="this:pos_">
			<x path="haxe.io.Float32Array"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="61" static="1">
		<f a="this">
			<x path="haxe.io.Float32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<x path="haxe.io.Float32Array"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="66" static="1">
		<f a="this">
			<x path="haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="71" static="1">
		<f a="this">
			<x path="haxe.io.Float32Array"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<getArray public="1" get="inline" set="null" line="75" static="1">
		<f a="this">
			<x path="haxe.io.Float32Array"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat.Float32Flat_Impl_" params="" file="src/geom/flat/Float32Flat.hx" private="1" module="geom.flat.Float32Flat">
		<readItem public="1" get="inline" set="null" line="10" static="1">
			<f a="this:k">
				<x path="haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="15" static="1">
			<f a="this:k:v">
				<x path="haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="21" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<x path="haxe.io.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="41" static="1">
			<f a="this">
				<x path="haxe.io.Float32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="45" static="1">
			<f a="this:id">
				<x path="haxe.io.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="51" static="1">
			<f a="this">
				<x path="haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="55" static="1">
			<f a="this:pos_">
				<x path="haxe.io.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="61" static="1">
			<f a="this">
				<x path="haxe.io.Float32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<x path="haxe.io.Float32Array"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="66" static="1">
			<f a="this">
				<x path="haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="71" static="1">
			<f a="this">
				<x path="haxe.io.Float32Array"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<getArray public="1" get="inline" set="null" line="75" static="1">
			<f a="this">
				<x path="haxe.io.Float32Array"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat10" params="" file="src/geom/flat/Float32Flat10.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat10.Float32Flat10_Impl_" params="" file="src/geom/flat/Float32Flat10.hx" private="1" module="geom.flat.Float32Flat10">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat10.Float32Flat10_Impl_" params="" file="src/geom/flat/Float32Flat10.hx" private="1" module="geom.flat.Float32Flat10">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat16" params="" file="src/geom/flat/Float32Flat16.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat16.Float32Flat16_Impl_" params="" file="src/geom/flat/Float32Flat16.hx" private="1" module="geom.flat.Float32Flat16">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat16.Float32Flat16_Impl_" params="" file="src/geom/flat/Float32Flat16.hx" private="1" module="geom.flat.Float32Flat16">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat2" params="" file="src/geom/flat/Float32Flat2.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat2.Float32Flat2_Impl_" params="" file="src/geom/flat/Float32Flat2.hx" private="1" module="geom.flat.Float32Flat2">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat2.Float32Flat2_Impl_" params="" file="src/geom/flat/Float32Flat2.hx" private="1" module="geom.flat.Float32Flat2">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat3" params="" file="src/geom/flat/Float32Flat3.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat3.Float32Flat3_Impl_" params="" file="src/geom/flat/Float32Flat3.hx" private="1" module="geom.flat.Float32Flat3">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat3.Float32Flat3_Impl_" params="" file="src/geom/flat/Float32Flat3.hx" private="1" module="geom.flat.Float32Flat3">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat4" params="" file="src/geom/flat/Float32Flat4.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat4.Float32Flat4_Impl_" params="" file="src/geom/flat/Float32Flat4.hx" private="1" module="geom.flat.Float32Flat4">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat4.Float32Flat4_Impl_" params="" file="src/geom/flat/Float32Flat4.hx" private="1" module="geom.flat.Float32Flat4">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat5" params="" file="src/geom/flat/Float32Flat5.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat5.Float32Flat5_Impl_" params="" file="src/geom/flat/Float32Flat5.hx" private="1" module="geom.flat.Float32Flat5">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat5.Float32Flat5_Impl_" params="" file="src/geom/flat/Float32Flat5.hx" private="1" module="geom.flat.Float32Flat5">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat6" params="" file="src/geom/flat/Float32Flat6.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat6.Float32Flat6_Impl_" params="" file="src/geom/flat/Float32Flat6.hx" private="1" module="geom.flat.Float32Flat6">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat6.Float32Flat6_Impl_" params="" file="src/geom/flat/Float32Flat6.hx" private="1" module="geom.flat.Float32Flat6">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat7" params="" file="src/geom/flat/Float32Flat7.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat7.Float32Flat7_Impl_" params="" file="src/geom/flat/Float32Flat7.hx" private="1" module="geom.flat.Float32Flat7">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat7.Float32Flat7_Impl_" params="" file="src/geom/flat/Float32Flat7.hx" private="1" module="geom.flat.Float32Flat7">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat8" params="" file="src/geom/flat/Float32Flat8.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat8.Float32Flat8_Impl_" params="" file="src/geom/flat/Float32Flat8.hx" private="1" module="geom.flat.Float32Flat8">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat8.Float32Flat8_Impl_" params="" file="src/geom/flat/Float32Flat8.hx" private="1" module="geom.flat.Float32Flat8">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32Flat9" params="" file="src/geom/flat/Float32Flat9.hx">
		<this><x path="geom.flat.Float32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32Flat9.Float32Flat9_Impl_" params="" file="src/geom/flat/Float32Flat9.hx" private="1" module="geom.flat.Float32Flat9">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32Flat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Float32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32Flat9.Float32Flat9_Impl_" params="" file="src/geom/flat/Float32Flat9.hx" private="1" module="geom.flat.Float32Flat9">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32Flat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Float32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Float32FlatRGBA" params="" file="src/geom/flat/Float32FlatRGBA.hx">
		<this><x path="geom.flat.Float32Flat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32FlatRGBA.Float32FlatRGBA_Impl_" params="" file="src/geom/flat/Float32FlatRGBA.hx" private="1" module="geom.flat.Float32FlatRGBA">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32FlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="10" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="13" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="23" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="33" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="43" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="49" static="1">
		<f a="this:col">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="64" static="1">
		<f a="this:col">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="72" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="80" static="1">
		<f a="this:k">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="85" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="89" static="1">
		<f a="this:color:times">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="93" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="geom.flat.Float32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="102" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32FlatRGBA.Float32FlatRGBA_Impl_" params="" file="src/geom/flat/Float32FlatRGBA.hx" private="1" module="geom.flat.Float32FlatRGBA">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32FlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="10" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="13" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="23" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="33" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="43" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="49" static="1">
			<f a="this:col">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="64" static="1">
			<f a="this:col">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="72" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="80" static="1">
			<f a="this:k">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="85" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="89" static="1">
			<f a="this:color:times">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="93" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="geom.flat.Float32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="102" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="geom.flat.Float32FlatTriangle" params="" file="src/geom/flat/Float32FlatTriangle.hx">
		<this><x path="geom.flat.Float32Flat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Float32FlatTriangle.Float32FlatTriangle_Impl_" params="" file="src/geom/flat/Float32FlatTriangle.hx" private="1" module="geom.flat.Float32FlatTriangle">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Float32FlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="12" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="15" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="20" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="23" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="31" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="36" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="39" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="44" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="47" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="52" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="55" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="60" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="63" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="68" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="71" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="76" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="79" static="1">
		<f a="this:v">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<transform public="1" set="method" line="83" static="1">
		<f a="this:m">
			<x path="geom.flat.Float32Flat9"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transform>
	<transformAll public="1" set="method" line="101" static="1">
		<f a="this:m">
			<x path="geom.flat.Float32Flat9"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformAll>
	<triangle public="1" set="method" line="110" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="134" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="138" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="142" static="1">
		<f a="this:x">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="151" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="155" static="1">
		<f a="this:y">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="164" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="168" static="1">
		<f a="this:z">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="177" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="182" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="187" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="191" static="1">
		<f a="this:dx:dy">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="199" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="204" static="1">
		<f a="this:px:py">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="212" static="1">
		<f a="this:px:py">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="217" static="1">
		<f a="this:x:y:theta">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="223" static="1">
		<f a="this:x:y:cos:sin">
			<x path="geom.flat.Float32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="252" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="258" static="1">
		<f a="this">
			<x path="geom.flat.Float32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
</class></impl>
	</abstract>
	<class path="geom.flat._Float32FlatTriangle.Float32FlatTriangle_Impl_" params="" file="src/geom/flat/Float32FlatTriangle.hx" private="1" module="geom.flat.Float32FlatTriangle">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Float32FlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="12" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="15" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="20" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="23" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="31" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="36" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="39" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="44" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="47" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="52" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="55" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="60" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="63" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="68" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="71" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="76" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="79" static="1">
			<f a="this:v">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<transform public="1" set="method" line="83" static="1">
			<f a="this:m">
				<x path="geom.flat.Float32Flat9"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transform>
		<transformAll public="1" set="method" line="101" static="1">
			<f a="this:m">
				<x path="geom.flat.Float32Flat9"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformAll>
		<triangle public="1" set="method" line="110" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="134" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="138" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="142" static="1">
			<f a="this:x">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="151" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="155" static="1">
			<f a="this:y">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="164" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="168" static="1">
			<f a="this:z">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="177" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="182" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="187" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="191" static="1">
			<f a="this:dx:dy">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="199" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="204" static="1">
			<f a="this:px:py">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="212" static="1">
			<f a="this:px:py">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="217" static="1">
			<f a="this:x:y:theta">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="223" static="1">
			<f a="this:x:y:cos:sin">
				<x path="geom.flat.Float32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="252" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="258" static="1">
			<f a="this">
				<x path="geom.flat.Float32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
	</class>
	<abstract path="geom.flat.FloatFlat" params="" file="src/geom/flat/FloatFlat.hx">
		<from><icast><c path="Array"><x path="Float"/></c></icast></from>
		<this><c path="Array"><x path="Float"/></c></this>
		<to><icast><c path="Array"><x path="Float"/></c></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat.FloatFlat_Impl_" params="" file="src/geom/flat/FloatFlat.hx" private="1" module="geom.flat.FloatFlat">
	<readItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="14" static="1">
		<f a="this:k:v">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="20" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="35" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="44" static="1">
		<f a="this:id">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="50" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="54" static="1">
		<f a="this:pos_">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="60" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="63" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="70" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<getArray public="1" get="inline" set="null" line="74" static="1">
		<f a="this">
			<c path="Array"><x path="Float"/></c>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat.FloatFlat_Impl_" params="" file="src/geom/flat/FloatFlat.hx" private="1" module="geom.flat.FloatFlat">
		<readItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="14" static="1">
			<f a="this:k:v">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="20" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="35" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="44" static="1">
			<f a="this:id">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="50" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="54" static="1">
			<f a="this:pos_">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="60" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="63" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="70" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<getArray public="1" get="inline" set="null" line="74" static="1">
			<f a="this">
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat10" params="" file="src/geom/flat/FloatFlat10.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat10.FloatFlat10_Impl_" params="" file="src/geom/flat/FloatFlat10.hx" private="1" module="geom.flat.FloatFlat10">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat10.FloatFlat10_Impl_" params="" file="src/geom/flat/FloatFlat10.hx" private="1" module="geom.flat.FloatFlat10">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat16" params="" file="src/geom/flat/FloatFlat16.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat16.FloatFlat16_Impl_" params="" file="src/geom/flat/FloatFlat16.hx" private="1" module="geom.flat.FloatFlat16">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat16.FloatFlat16_Impl_" params="" file="src/geom/flat/FloatFlat16.hx" private="1" module="geom.flat.FloatFlat16">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat2" params="" file="src/geom/flat/FloatFlat2.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat2.FloatFlat2_Impl_" params="" file="src/geom/flat/FloatFlat2.hx" private="1" module="geom.flat.FloatFlat2">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat2.FloatFlat2_Impl_" params="" file="src/geom/flat/FloatFlat2.hx" private="1" module="geom.flat.FloatFlat2">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat3" params="" file="src/geom/flat/FloatFlat3.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat3.FloatFlat3_Impl_" params="" file="src/geom/flat/FloatFlat3.hx" private="1" module="geom.flat.FloatFlat3">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat3.FloatFlat3_Impl_" params="" file="src/geom/flat/FloatFlat3.hx" private="1" module="geom.flat.FloatFlat3">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat4" params="" file="src/geom/flat/FloatFlat4.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat4.FloatFlat4_Impl_" params="" file="src/geom/flat/FloatFlat4.hx" private="1" module="geom.flat.FloatFlat4">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat4.FloatFlat4_Impl_" params="" file="src/geom/flat/FloatFlat4.hx" private="1" module="geom.flat.FloatFlat4">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat5" params="" file="src/geom/flat/FloatFlat5.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat5.FloatFlat5_Impl_" params="" file="src/geom/flat/FloatFlat5.hx" private="1" module="geom.flat.FloatFlat5">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat5.FloatFlat5_Impl_" params="" file="src/geom/flat/FloatFlat5.hx" private="1" module="geom.flat.FloatFlat5">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat6" params="" file="src/geom/flat/FloatFlat6.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat6.FloatFlat6_Impl_" params="" file="src/geom/flat/FloatFlat6.hx" private="1" module="geom.flat.FloatFlat6">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat6.FloatFlat6_Impl_" params="" file="src/geom/flat/FloatFlat6.hx" private="1" module="geom.flat.FloatFlat6">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat7" params="" file="src/geom/flat/FloatFlat7.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat7.FloatFlat7_Impl_" params="" file="src/geom/flat/FloatFlat7.hx" private="1" module="geom.flat.FloatFlat7">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat7.FloatFlat7_Impl_" params="" file="src/geom/flat/FloatFlat7.hx" private="1" module="geom.flat.FloatFlat7">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat8" params="" file="src/geom/flat/FloatFlat8.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat8.FloatFlat8_Impl_" params="" file="src/geom/flat/FloatFlat8.hx" private="1" module="geom.flat.FloatFlat8">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat8.FloatFlat8_Impl_" params="" file="src/geom/flat/FloatFlat8.hx" private="1" module="geom.flat.FloatFlat8">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlat9" params="" file="src/geom/flat/FloatFlat9.hx">
		<this><x path="geom.flat.FloatFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlat9.FloatFlat9_Impl_" params="" file="src/geom/flat/FloatFlat9.hx" private="1" module="geom.flat.FloatFlat9">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<index public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</index>
	<get_index get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_index>
	<set_index get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.FloatFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_index>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlat9.FloatFlat9_Impl_" params="" file="src/geom/flat/FloatFlat9.hx" private="1" module="geom.flat.FloatFlat9">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<index public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</index>
		<get_index get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_index>
		<set_index get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.FloatFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_index>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.FloatFlatRGBA" params="" file="src/geom/flat/FloatFlatRGBA.hx">
		<this><x path="geom.flat.FloatFlat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlatRGBA.FloatFlatRGBA_Impl_" params="" file="src/geom/flat/FloatFlatRGBA.hx" private="1" module="geom.flat.FloatFlatRGBA">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="10" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="13" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="23" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="33" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="43" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="49" static="1">
		<f a="this:col">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="64" static="1">
		<f a="this:col">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="72" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="80" static="1">
		<f a="this:k">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="85" static="1">
		<f a="this:k:v">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="89" static="1">
		<f a="this:color:times">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="93" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="geom.flat.FloatFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="102" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlatRGBA.FloatFlatRGBA_Impl_" params="" file="src/geom/flat/FloatFlatRGBA.hx" private="1" module="geom.flat.FloatFlatRGBA">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="10" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="13" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="23" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="33" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="43" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="49" static="1">
			<f a="this:col">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="64" static="1">
			<f a="this:col">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="72" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="80" static="1">
			<f a="this:k">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="85" static="1">
			<f a="this:k:v">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="89" static="1">
			<f a="this:color:times">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="93" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="geom.flat.FloatFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="102" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Float"/>
</f></blueChannel>
	</class>
	<abstract path="geom.flat.FloatFlatTriangle" params="" file="src/geom/flat/FloatFlatTriangle.hx">
		<this><x path="geom.flat.FloatFlat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._FloatFlatTriangle.FloatFlatTriangle_Impl_" params="" file="src/geom/flat/FloatFlatTriangle.hx" private="1" module="geom.flat.FloatFlatTriangle">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.FloatFlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="12" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="15" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="20" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="23" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="28" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="31" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="36" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="39" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="44" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="47" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="52" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="55" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="60" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="63" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="68" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="71" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="76" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="79" static="1">
		<f a="this:v">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<transform public="1" set="method" line="83" static="1">
		<f a="this:m">
			<x path="geom.flat.FloatFlat9"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transform>
	<transformAll public="1" set="method" line="101" static="1">
		<f a="this:m">
			<x path="geom.flat.FloatFlat9"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformAll>
	<triangle public="1" set="method" line="110" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="134" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="138" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="142" static="1">
		<f a="this:x">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="151" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="155" static="1">
		<f a="this:y">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="164" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="168" static="1">
		<f a="this:z">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="177" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="182" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="187" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<moveDelta set="method" line="191" static="1">
		<f a="this:dx:dy">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="199" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="204" static="1">
		<f a="this:px:py">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="212" static="1">
		<f a="this:px:py">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="217" static="1">
		<f a="this:x:y:theta">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="223" static="1">
		<f a="this:x:y:cos:sin">
			<x path="geom.flat.FloatFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="252" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="258" static="1">
		<f a="this">
			<x path="geom.flat.FloatFlat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
</class></impl>
	</abstract>
	<class path="geom.flat._FloatFlatTriangle.FloatFlatTriangle_Impl_" params="" file="src/geom/flat/FloatFlatTriangle.hx" private="1" module="geom.flat.FloatFlatTriangle">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.FloatFlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="12" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="15" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="20" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="23" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="28" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="31" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="36" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="39" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="44" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="47" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="52" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="55" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="60" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="63" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="68" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="71" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="76" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="79" static="1">
			<f a="this:v">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<transform public="1" set="method" line="83" static="1">
			<f a="this:m">
				<x path="geom.flat.FloatFlat9"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transform>
		<transformAll public="1" set="method" line="101" static="1">
			<f a="this:m">
				<x path="geom.flat.FloatFlat9"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformAll>
		<triangle public="1" set="method" line="110" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="134" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="138" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="142" static="1">
			<f a="this:x">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="151" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="155" static="1">
			<f a="this:y">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="164" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="168" static="1">
			<f a="this:z">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="177" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="182" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="187" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<moveDelta set="method" line="191" static="1">
			<f a="this:dx:dy">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="199" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="204" static="1">
			<f a="this:px:py">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="212" static="1">
			<f a="this:px:py">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="217" static="1">
			<f a="this:x:y:theta">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="223" static="1">
			<f a="this:x:y:cos:sin">
				<x path="geom.flat.FloatFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="252" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="258" static="1">
			<f a="this">
				<x path="geom.flat.FloatFlat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
	</class>
	<abstract path="geom.flat.Int32Flat" params="" file="src/geom/flat/Int32Flat.hx">
		<from><icast><x path="haxe.io.Int32Array"/></icast></from>
		<this><x path="haxe.io.Int32Array"/></this>
		<to><icast><x path="haxe.io.Int32Array"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat.Int32Flat_Impl_" params="" file="src/geom/flat/Int32Flat.hx" private="1" module="geom.flat.Int32Flat">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1">
		<f a="this:k:v">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="25" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="33" static="1">
		<f a="this:pos_">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="44" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<getArray public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<x path="haxe.io.Int32Array"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat.Int32Flat_Impl_" params="" file="src/geom/flat/Int32Flat.hx" private="1" module="geom.flat.Int32Flat">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1">
			<f a="this:k:v">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="25" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="33" static="1">
			<f a="this:pos_">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="44" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<getArray public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<x path="haxe.io.Int32Array"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat10" params="" file="src/geom/flat/Int32Flat10.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat10.Int32Flat10_Impl_" params="" file="src/geom/flat/Int32Flat10.hx" private="1" module="geom.flat.Int32Flat10">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat10.Int32Flat10_Impl_" params="" file="src/geom/flat/Int32Flat10.hx" private="1" module="geom.flat.Int32Flat10">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat16" params="" file="src/geom/flat/Int32Flat16.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat16.Int32Flat16_Impl_" params="" file="src/geom/flat/Int32Flat16.hx" private="1" module="geom.flat.Int32Flat16">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat16.Int32Flat16_Impl_" params="" file="src/geom/flat/Int32Flat16.hx" private="1" module="geom.flat.Int32Flat16">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat2" params="" file="src/geom/flat/Int32Flat2.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat2.Int32Flat2_Impl_" params="" file="src/geom/flat/Int32Flat2.hx" private="1" module="geom.flat.Int32Flat2">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat2.Int32Flat2_Impl_" params="" file="src/geom/flat/Int32Flat2.hx" private="1" module="geom.flat.Int32Flat2">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat3" params="" file="src/geom/flat/Int32Flat3.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat3.Int32Flat3_Impl_" params="" file="src/geom/flat/Int32Flat3.hx" private="1" module="geom.flat.Int32Flat3">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat3.Int32Flat3_Impl_" params="" file="src/geom/flat/Int32Flat3.hx" private="1" module="geom.flat.Int32Flat3">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat4" params="" file="src/geom/flat/Int32Flat4.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat4.Int32Flat4_Impl_" params="" file="src/geom/flat/Int32Flat4.hx" private="1" module="geom.flat.Int32Flat4">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat4.Int32Flat4_Impl_" params="" file="src/geom/flat/Int32Flat4.hx" private="1" module="geom.flat.Int32Flat4">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat5" params="" file="src/geom/flat/Int32Flat5.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat5.Int32Flat5_Impl_" params="" file="src/geom/flat/Int32Flat5.hx" private="1" module="geom.flat.Int32Flat5">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat5.Int32Flat5_Impl_" params="" file="src/geom/flat/Int32Flat5.hx" private="1" module="geom.flat.Int32Flat5">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat6" params="" file="src/geom/flat/Int32Flat6.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat6.Int32Flat6_Impl_" params="" file="src/geom/flat/Int32Flat6.hx" private="1" module="geom.flat.Int32Flat6">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat6.Int32Flat6_Impl_" params="" file="src/geom/flat/Int32Flat6.hx" private="1" module="geom.flat.Int32Flat6">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat7" params="" file="src/geom/flat/Int32Flat7.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat7.Int32Flat7_Impl_" params="" file="src/geom/flat/Int32Flat7.hx" private="1" module="geom.flat.Int32Flat7">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat7.Int32Flat7_Impl_" params="" file="src/geom/flat/Int32Flat7.hx" private="1" module="geom.flat.Int32Flat7">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat8" params="" file="src/geom/flat/Int32Flat8.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat8.Int32Flat8_Impl_" params="" file="src/geom/flat/Int32Flat8.hx" private="1" module="geom.flat.Int32Flat8">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat8.Int32Flat8_Impl_" params="" file="src/geom/flat/Int32Flat8.hx" private="1" module="geom.flat.Int32Flat8">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32Flat9" params="" file="src/geom/flat/Int32Flat9.hx">
		<this><x path="geom.flat.Int32Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32Flat9.Int32Flat9_Impl_" params="" file="src/geom/flat/Int32Flat9.hx" private="1" module="geom.flat.Int32Flat9">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32Flat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.Int32Flat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32Flat9.Int32Flat9_Impl_" params="" file="src/geom/flat/Int32Flat9.hx" private="1" module="geom.flat.Int32Flat9">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32Flat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.Int32Flat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.Int32FlatRGBA" params="" file="src/geom/flat/Int32FlatRGBA.hx">
		<this><x path="geom.flat.Int32Flat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32FlatRGBA.Int32FlatRGBA_Impl_" params="" file="src/geom/flat/Int32FlatRGBA.hx" private="1" module="geom.flat.Int32FlatRGBA">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32FlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="11" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="14" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="23" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="33" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="43" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="49" static="1">
		<f a="this:col">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="64" static="1">
		<f a="this:col">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="72" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="80" static="1">
		<f a="this:k">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="85" static="1">
		<f a="this:k:v">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="89" static="1">
		<f a="this:color:times">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="93" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="geom.flat.Int32Flat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="102" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32FlatRGBA.Int32FlatRGBA_Impl_" params="" file="src/geom/flat/Int32FlatRGBA.hx" private="1" module="geom.flat.Int32FlatRGBA">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32FlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="11" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="14" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="23" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="33" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="43" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="49" static="1">
			<f a="this:col">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="64" static="1">
			<f a="this:col">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="72" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="80" static="1">
			<f a="this:k">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="85" static="1">
			<f a="this:k:v">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="89" static="1">
			<f a="this:color:times">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="93" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="geom.flat.Int32Flat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="102" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></blueChannel>
	</class>
	<abstract path="geom.flat.Int32FlatTriangle" params="" file="src/geom/flat/Int32FlatTriangle.hx">
		<this><x path="geom.flat.Int32Flat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._Int32FlatTriangle.Int32FlatTriangle_Impl_" params="" file="src/geom/flat/Int32FlatTriangle.hx" private="1" module="geom.flat.Int32FlatTriangle">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.Int32FlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="13" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="16" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="21" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="24" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="29" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="32" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="37" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="40" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="45" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="48" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="53" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="56" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="61" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="64" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="69" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="72" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="77" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="80" static="1">
		<f a="this:v">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<triangle public="1" set="method" line="85" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="109" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="113" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="117" static="1">
		<f a="this:x_">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="126" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="130" static="1">
		<f a="this:y_">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="139" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="143" static="1">
		<f a="this:z_">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="152" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="157" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="162" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<transform public="1" set="method" line="166" static="1">
		<f a="this:m">
			<x path="geom.flat.Int32Flat9"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transform>
	<transformAll public="1" set="method" line="184" static="1">
		<f a="this:m">
			<x path="geom.flat.Int32Flat9"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformAll>
	<moveDelta get="inline" set="null" line="192" static="1">
		<f a="this:dx:dy">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="201" static="1"><f a="n">
	<x path="Float"/>
	<x path="Float"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="206" static="1">
		<f a="this:px:py">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="214" static="1">
		<f a="this:px:py">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="219" static="1">
		<f a="this:x:y:theta">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="225" static="1">
		<f a="this:x:y:cos:sin">
			<x path="geom.flat.Int32Flat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="260" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="266" static="1">
		<f a="this">
			<x path="geom.flat.Int32Flat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
</class></impl>
	</abstract>
	<class path="geom.flat._Int32FlatTriangle.Int32FlatTriangle_Impl_" params="" file="src/geom/flat/Int32FlatTriangle.hx" private="1" module="geom.flat.Int32FlatTriangle">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.Int32FlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="13" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="16" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="21" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="24" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="29" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="32" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="37" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="40" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="45" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="48" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="53" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="56" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="61" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="64" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="69" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="72" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="77" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="80" static="1">
			<f a="this:v">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<triangle public="1" set="method" line="85" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="109" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="113" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="117" static="1">
			<f a="this:x_">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="126" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="130" static="1">
			<f a="this:y_">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="139" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="143" static="1">
			<f a="this:z_">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="152" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="157" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="162" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<transform public="1" set="method" line="166" static="1">
			<f a="this:m">
				<x path="geom.flat.Int32Flat9"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transform>
		<transformAll public="1" set="method" line="184" static="1">
			<f a="this:m">
				<x path="geom.flat.Int32Flat9"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformAll>
		<moveDelta get="inline" set="null" line="192" static="1">
			<f a="this:dx:dy">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="201" static="1"><f a="n">
	<x path="Float"/>
	<x path="Float"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="206" static="1">
			<f a="this:px:py">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="214" static="1">
			<f a="this:px:py">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="219" static="1">
			<f a="this:x:y:theta">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="225" static="1">
			<f a="this:x:y:cos:sin">
				<x path="geom.flat.Int32Flat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="260" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="266" static="1">
			<f a="this">
				<x path="geom.flat.Int32Flat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
	</class>
	<abstract path="geom.flat.IntFlat" params="" file="src/geom/flat/IntFlat.hx">
		<from><icast><c path="Array"><x path="Int"/></c></icast></from>
		<this><c path="Array"><x path="Int"/></c></this>
		<to><icast><c path="Array"><x path="Int"/></c></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat.IntFlat_Impl_" params="" file="src/geom/flat/IntFlat.hx" private="1" module="geom.flat.IntFlat">
	<readItem public="1" get="inline" set="null" line="7" static="1">
		<f a="this:k">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="12" static="1">
		<f a="this:k:v">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="17" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="24" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="32" static="1">
		<f a="this:pos_">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="38" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="43" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="48" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<getArray public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat.IntFlat_Impl_" params="" file="src/geom/flat/IntFlat.hx" private="1" module="geom.flat.IntFlat">
		<readItem public="1" get="inline" set="null" line="7" static="1">
			<f a="this:k">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="12" static="1">
			<f a="this:k:v">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="17" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="24" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="32" static="1">
			<f a="this:pos_">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="38" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="43" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="48" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<getArray public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat10" params="" file="src/geom/flat/IntFlat10.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat10.IntFlat10_Impl_" params="" file="src/geom/flat/IntFlat10.hx" private="1" module="geom.flat.IntFlat10">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat10.IntFlat10_Impl_" params="" file="src/geom/flat/IntFlat10.hx" private="1" module="geom.flat.IntFlat10">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat16" params="" file="src/geom/flat/IntFlat16.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat16.IntFlat16_Impl_" params="" file="src/geom/flat/IntFlat16.hx" private="1" module="geom.flat.IntFlat16">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat16.IntFlat16_Impl_" params="" file="src/geom/flat/IntFlat16.hx" private="1" module="geom.flat.IntFlat16">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat2" params="" file="src/geom/flat/IntFlat2.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat2.IntFlat2_Impl_" params="" file="src/geom/flat/IntFlat2.hx" private="1" module="geom.flat.IntFlat2">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat2.IntFlat2_Impl_" params="" file="src/geom/flat/IntFlat2.hx" private="1" module="geom.flat.IntFlat2">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat3" params="" file="src/geom/flat/IntFlat3.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat3.IntFlat3_Impl_" params="" file="src/geom/flat/IntFlat3.hx" private="1" module="geom.flat.IntFlat3">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat3.IntFlat3_Impl_" params="" file="src/geom/flat/IntFlat3.hx" private="1" module="geom.flat.IntFlat3">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat4" params="" file="src/geom/flat/IntFlat4.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat4.IntFlat4_Impl_" params="" file="src/geom/flat/IntFlat4.hx" private="1" module="geom.flat.IntFlat4">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat4.IntFlat4_Impl_" params="" file="src/geom/flat/IntFlat4.hx" private="1" module="geom.flat.IntFlat4">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat5" params="" file="src/geom/flat/IntFlat5.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat5.IntFlat5_Impl_" params="" file="src/geom/flat/IntFlat5.hx" private="1" module="geom.flat.IntFlat5">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat5.IntFlat5_Impl_" params="" file="src/geom/flat/IntFlat5.hx" private="1" module="geom.flat.IntFlat5">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat6" params="" file="src/geom/flat/IntFlat6.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat6.IntFlat6_Impl_" params="" file="src/geom/flat/IntFlat6.hx" private="1" module="geom.flat.IntFlat6">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat6.IntFlat6_Impl_" params="" file="src/geom/flat/IntFlat6.hx" private="1" module="geom.flat.IntFlat6">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat7" params="" file="src/geom/flat/IntFlat7.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat7.IntFlat7_Impl_" params="" file="src/geom/flat/IntFlat7.hx" private="1" module="geom.flat.IntFlat7">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat7.IntFlat7_Impl_" params="" file="src/geom/flat/IntFlat7.hx" private="1" module="geom.flat.IntFlat7">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat8" params="" file="src/geom/flat/IntFlat8.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat8.IntFlat8_Impl_" params="" file="src/geom/flat/IntFlat8.hx" private="1" module="geom.flat.IntFlat8">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat8.IntFlat8_Impl_" params="" file="src/geom/flat/IntFlat8.hx" private="1" module="geom.flat.IntFlat8">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlat9" params="" file="src/geom/flat/IntFlat9.hx">
		<this><x path="geom.flat.IntFlat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlat9.IntFlat9_Impl_" params="" file="src/geom/flat/IntFlat9.hx" private="1" module="geom.flat.IntFlat9">
	<readItem public="1" get="inline" set="null" line="4" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="13" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="18" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="22" static="1">
		<f a="this:id">
			<x path="geom.flat.IntFlat"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="27" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat"/>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlat9.IntFlat9_Impl_" params="" file="src/geom/flat/IntFlat9.hx" private="1" module="geom.flat.IntFlat9">
		<readItem public="1" get="inline" set="null" line="4" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="13" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="18" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="22" static="1">
			<f a="this:id">
				<x path="geom.flat.IntFlat"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="27" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.IntFlatRGBA" params="" file="src/geom/flat/IntFlatRGBA.hx">
		<this><x path="geom.flat.IntFlat4"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlatRGBA.IntFlatRGBA_Impl_" params="" file="src/geom/flat/IntFlatRGBA.hx" private="1" module="geom.flat.IntFlatRGBA">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlatRGBA"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<red public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</red>
	<get_red set="method" line="11" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_red>
	<set_red set="method" line="14" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_red>
	<green public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</green>
	<get_green get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_green>
	<set_green get="inline" set="null" line="23" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_green>
	<blue public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</blue>
	<get_blue get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_blue>
	<set_blue get="inline" set="null" line="33" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_blue>
	<alpha public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</alpha>
	<get_alpha get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_alpha>
	<set_alpha get="inline" set="null" line="43" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_alpha>
	<rgb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</rgb>
	<set_rgb get="inline" set="null" line="49" static="1">
		<f a="this:col">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_rgb>
	<get_rgb get="inline" set="null" line="57" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_rgb>
	<argb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</argb>
	<set_argb get="inline" set="null" line="64" static="1">
		<f a="this:col">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_argb>
	<get_argb get="inline" set="null" line="72" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_argb>
	<readItem public="1" get="inline" set="null" line="80" static="1">
		<f a="this:k">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="85" static="1">
		<f a="this:k:v">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<colorTriangles public="1" get="inline" set="null" line="89" static="1">
		<f a="this:color:times">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</colorTriangles>
	<cornerColors public="1" get="inline" set="null" line="93" static="1">
		<f a="this:colorA:colorB:colorC">
			<x path="geom.flat.IntFlat4"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cornerColors>
	<hex public="1" get="inline" set="null" line="102" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hex>
	<hexAll public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat4"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hexAll>
	<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></alphaChannel>
	<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></redChannel>
	<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></greenChannel>
	<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></blueChannel>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlatRGBA.IntFlatRGBA_Impl_" params="" file="src/geom/flat/IntFlatRGBA.hx" private="1" module="geom.flat.IntFlatRGBA">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlatRGBA"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<red public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</red>
		<get_red set="method" line="11" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_red>
		<set_red set="method" line="14" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_red>
		<green public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</green>
		<get_green get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_green>
		<set_green get="inline" set="null" line="23" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_green>
		<blue public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</blue>
		<get_blue get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_blue>
		<set_blue get="inline" set="null" line="33" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_blue>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</alpha>
		<get_alpha get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_alpha>
		<set_alpha get="inline" set="null" line="43" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_alpha>
		<rgb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</rgb>
		<set_rgb get="inline" set="null" line="49" static="1">
			<f a="this:col">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_rgb>
		<get_rgb get="inline" set="null" line="57" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_rgb>
		<argb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</argb>
		<set_argb get="inline" set="null" line="64" static="1">
			<f a="this:col">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_argb>
		<get_argb get="inline" set="null" line="72" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_argb>
		<readItem public="1" get="inline" set="null" line="80" static="1">
			<f a="this:k">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="85" static="1">
			<f a="this:k:v">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<colorTriangles public="1" get="inline" set="null" line="89" static="1">
			<f a="this:color:times">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</colorTriangles>
		<cornerColors public="1" get="inline" set="null" line="93" static="1">
			<f a="this:colorA:colorB:colorC">
				<x path="geom.flat.IntFlat4"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cornerColors>
		<hex public="1" get="inline" set="null" line="102" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hex>
		<hexAll public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat4"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hexAll>
		<alphaChannel public="1" get="inline" set="null" line="117" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></alphaChannel>
		<redChannel public="1" get="inline" set="null" line="120" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></redChannel>
		<greenChannel public="1" get="inline" set="null" line="123" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></greenChannel>
		<blueChannel public="1" get="inline" set="null" line="126" static="1"><f a="int">
	<x path="Int"/>
	<x path="Int"/>
</f></blueChannel>
	</class>
	<abstract path="geom.flat.IntFlatTriangle" params="" file="src/geom/flat/IntFlatTriangle.hx">
		<this><x path="geom.flat.IntFlat9"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._IntFlatTriangle.IntFlatTriangle_Impl_" params="" file="src/geom/flat/IntFlatTriangle.hx" private="1" module="geom.flat.IntFlatTriangle">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.IntFlatTriangle"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<ax public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</ax>
	<get_ax set="method" line="12" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ax>
	<set_ax set="method" line="15" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ax>
	<ay public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</ay>
	<get_ay set="method" line="20" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_ay>
	<set_ay set="method" line="23" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_ay>
	<az public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</az>
	<get_az set="method" line="28" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_az>
	<set_az set="method" line="31" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_az>
	<bx public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bx>
	<get_bx set="method" line="36" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bx>
	<set_bx set="method" line="39" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bx>
	<by public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</by>
	<get_by set="method" line="44" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_by>
	<set_by set="method" line="47" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_by>
	<bz public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bz>
	<get_bz set="method" line="52" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bz>
	<set_bz set="method" line="55" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_bz>
	<cx public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cx>
	<get_cx set="method" line="60" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cx>
	<set_cx set="method" line="63" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cx>
	<cy public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cy>
	<get_cy set="method" line="68" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cy>
	<set_cy set="method" line="71" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cy>
	<cz public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</cz>
	<get_cz set="method" line="76" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_cz>
	<set_cz set="method" line="79" static="1">
		<f a="this:v">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_cz>
	<triangle public="1" set="method" line="84" static="1">
		<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":keep"/>
		</meta>
	</triangle>
	<adjustWinding public="1" set="method" line="108" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</adjustWinding>
	<x public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x get="inline" set="null" line="112" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<set_x get="inline" set="null" line="116" static="1">
		<f a="this:x_">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_x>
	<y public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</y>
	<get_y get="inline" set="null" line="125" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_y>
	<set_y get="inline" set="null" line="129" static="1">
		<f a="this:y_">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_y>
	<z public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</z>
	<get_z get="inline" set="null" line="138" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_z>
	<set_z get="inline" set="null" line="142" static="1">
		<f a="this:z_">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_z>
	<right public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</right>
	<get_right get="inline" set="null" line="151" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<bottom public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</bottom>
	<get_bottom get="inline" set="null" line="156" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_bottom>
	<back public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</back>
	<get_back get="inline" set="null" line="161" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_back>
	<transform public="1" set="method" line="165" static="1">
		<f a="this:m">
			<x path="geom.flat.IntFlat9"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transform>
	<transformAll public="1" set="method" line="183" static="1">
		<f a="this:m">
			<x path="geom.flat.IntFlat9"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformAll>
	<moveDelta get="inline" set="null" line="191" static="1">
		<f a="this:dx:dy">
			<x path="geom.flat.IntFlat9"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</moveDelta>
	<sign public="1" get="inline" set="null" line="200" static="1"><f a="n">
	<x path="Float"/>
	<x path="Float"/>
</f></sign>
	<liteHit public="1" get="inline" set="null" line="205" static="1">
		<f a="this:px:py">
			<x path="geom.flat.IntFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</liteHit>
	<fullHit public="1" set="method" line="213" static="1">
		<f a="this:px:py">
			<x path="geom.flat.IntFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fullHit>
	<rotate public="1" get="inline" set="null" line="218" static="1">
		<f a="this:x:y:theta">
			<x path="geom.flat.IntFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<rotateTrig public="1" get="inline" set="null" line="224" static="1">
		<f a="this:x:y:cos:sin">
			<x path="geom.flat.IntFlat9"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateTrig>
	<prettyString public="1" get="inline" set="null" line="259" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyString>
	<prettyAll public="1" get="inline" set="null" line="265" static="1">
		<f a="this">
			<x path="geom.flat.IntFlat9"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</prettyAll>
</class></impl>
	</abstract>
	<class path="geom.flat._IntFlatTriangle.IntFlatTriangle_Impl_" params="" file="src/geom/flat/IntFlatTriangle.hx" private="1" module="geom.flat.IntFlatTriangle">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.IntFlatTriangle"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<ax public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</ax>
		<get_ax set="method" line="12" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ax>
		<set_ax set="method" line="15" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ax>
		<ay public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</ay>
		<get_ay set="method" line="20" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_ay>
		<set_ay set="method" line="23" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_ay>
		<az public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</az>
		<get_az set="method" line="28" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_az>
		<set_az set="method" line="31" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_az>
		<bx public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bx>
		<get_bx set="method" line="36" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bx>
		<set_bx set="method" line="39" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bx>
		<by public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</by>
		<get_by set="method" line="44" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_by>
		<set_by set="method" line="47" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_by>
		<bz public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bz>
		<get_bz set="method" line="52" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bz>
		<set_bz set="method" line="55" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_bz>
		<cx public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cx>
		<get_cx set="method" line="60" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cx>
		<set_cx set="method" line="63" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cx>
		<cy public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cy>
		<get_cy set="method" line="68" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cy>
		<set_cy set="method" line="71" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cy>
		<cz public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</cz>
		<get_cz set="method" line="76" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_cz>
		<set_cz set="method" line="79" static="1">
			<f a="this:v">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_cz>
		<triangle public="1" set="method" line="84" static="1">
			<f a="this:ax_:ay_:az_:bx_:by_:bz_:cx_:cy_:cz_">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":keep"/>
			</meta>
		</triangle>
		<adjustWinding public="1" set="method" line="108" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</adjustWinding>
		<x public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x get="inline" set="null" line="112" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<set_x get="inline" set="null" line="116" static="1">
			<f a="this:x_">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</y>
		<get_y get="inline" set="null" line="125" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_y>
		<set_y get="inline" set="null" line="129" static="1">
			<f a="this:y_">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_y>
		<z public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</z>
		<get_z get="inline" set="null" line="138" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_z>
		<set_z get="inline" set="null" line="142" static="1">
			<f a="this:z_">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_z>
		<right public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</right>
		<get_right get="inline" set="null" line="151" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<bottom public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</bottom>
		<get_bottom get="inline" set="null" line="156" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_bottom>
		<back public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</back>
		<get_back get="inline" set="null" line="161" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_back>
		<transform public="1" set="method" line="165" static="1">
			<f a="this:m">
				<x path="geom.flat.IntFlat9"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transform>
		<transformAll public="1" set="method" line="183" static="1">
			<f a="this:m">
				<x path="geom.flat.IntFlat9"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformAll>
		<moveDelta get="inline" set="null" line="191" static="1">
			<f a="this:dx:dy">
				<x path="geom.flat.IntFlat9"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</moveDelta>
		<sign public="1" get="inline" set="null" line="200" static="1"><f a="n">
	<x path="Float"/>
	<x path="Float"/>
</f></sign>
		<liteHit public="1" get="inline" set="null" line="205" static="1">
			<f a="this:px:py">
				<x path="geom.flat.IntFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</liteHit>
		<fullHit public="1" set="method" line="213" static="1">
			<f a="this:px:py">
				<x path="geom.flat.IntFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fullHit>
		<rotate public="1" get="inline" set="null" line="218" static="1">
			<f a="this:x:y:theta">
				<x path="geom.flat.IntFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<rotateTrig public="1" get="inline" set="null" line="224" static="1">
			<f a="this:x:y:cos:sin">
				<x path="geom.flat.IntFlat9"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateTrig>
		<prettyString public="1" get="inline" set="null" line="259" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyString>
		<prettyAll public="1" get="inline" set="null" line="265" static="1">
			<f a="this">
				<x path="geom.flat.IntFlat9"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</prettyAll>
	</class>
	<abstract path="geom.flat.UInt16Flat" params="" file="src/geom/flat/UInt16Flat.hx">
		<from><icast><x path="haxe.io.UInt16Array"/></icast></from>
		<this><x path="haxe.io.UInt16Array"/></this>
		<to><icast><x path="haxe.io.UInt16Array"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat.UInt16Flat_Impl_" params="" file="src/geom/flat/UInt16Flat.hx" private="1" module="geom.flat.UInt16Flat">
	<readItem public="1" get="inline" set="null" line="8" static="1">
		<f a="this:k">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="13" static="1">
		<f a="this:k:v">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="25" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="33" static="1">
		<f a="this:pos_">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<updateLen get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateLen>
	<hasNext public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</hasNext>
	<next public="1" get="inline" set="null" line="44" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<increment public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</increment>
	<getArray public="1" get="inline" set="null" line="53" static="1">
		<f a="this">
			<x path="haxe.io.UInt16Array"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat.UInt16Flat_Impl_" params="" file="src/geom/flat/UInt16Flat.hx" private="1" module="geom.flat.UInt16Flat">
		<readItem public="1" get="inline" set="null" line="8" static="1">
			<f a="this:k">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="13" static="1">
			<f a="this:k:v">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="25" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="33" static="1">
			<f a="this:pos_">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<updateLen get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateLen>
		<hasNext public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="44" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<increment public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</increment>
		<getArray public="1" get="inline" set="null" line="53" static="1">
			<f a="this">
				<x path="haxe.io.UInt16Array"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat10" params="" file="src/geom/flat/UInt16Flat10.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat10.UInt16Flat10_Impl_" params="" file="src/geom/flat/UInt16Flat10.hx" private="1" module="geom.flat.UInt16Flat10">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat10"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat10.UInt16Flat10_Impl_" params="" file="src/geom/flat/UInt16Flat10.hx" private="1" module="geom.flat.UInt16Flat10">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat10"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat16" params="" file="src/geom/flat/UInt16Flat16.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat16.UInt16Flat16_Impl_" params="" file="src/geom/flat/UInt16Flat16.hx" private="1" module="geom.flat.UInt16Flat16">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat16.UInt16Flat16_Impl_" params="" file="src/geom/flat/UInt16Flat16.hx" private="1" module="geom.flat.UInt16Flat16">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat2" params="" file="src/geom/flat/UInt16Flat2.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat2.UInt16Flat2_Impl_" params="" file="src/geom/flat/UInt16Flat2.hx" private="1" module="geom.flat.UInt16Flat2">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat2.UInt16Flat2_Impl_" params="" file="src/geom/flat/UInt16Flat2.hx" private="1" module="geom.flat.UInt16Flat2">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat3" params="" file="src/geom/flat/UInt16Flat3.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat3.UInt16Flat3_Impl_" params="" file="src/geom/flat/UInt16Flat3.hx" private="1" module="geom.flat.UInt16Flat3">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat3.UInt16Flat3_Impl_" params="" file="src/geom/flat/UInt16Flat3.hx" private="1" module="geom.flat.UInt16Flat3">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat4" params="" file="src/geom/flat/UInt16Flat4.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat4.UInt16Flat4_Impl_" params="" file="src/geom/flat/UInt16Flat4.hx" private="1" module="geom.flat.UInt16Flat4">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat4.UInt16Flat4_Impl_" params="" file="src/geom/flat/UInt16Flat4.hx" private="1" module="geom.flat.UInt16Flat4">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat5" params="" file="src/geom/flat/UInt16Flat5.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat5.UInt16Flat5_Impl_" params="" file="src/geom/flat/UInt16Flat5.hx" private="1" module="geom.flat.UInt16Flat5">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat5"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat5.UInt16Flat5_Impl_" params="" file="src/geom/flat/UInt16Flat5.hx" private="1" module="geom.flat.UInt16Flat5">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat5"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat6" params="" file="src/geom/flat/UInt16Flat6.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat6.UInt16Flat6_Impl_" params="" file="src/geom/flat/UInt16Flat6.hx" private="1" module="geom.flat.UInt16Flat6">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat6"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat6.UInt16Flat6_Impl_" params="" file="src/geom/flat/UInt16Flat6.hx" private="1" module="geom.flat.UInt16Flat6">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat6"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat7" params="" file="src/geom/flat/UInt16Flat7.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat7.UInt16Flat7_Impl_" params="" file="src/geom/flat/UInt16Flat7.hx" private="1" module="geom.flat.UInt16Flat7">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat7"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat7.UInt16Flat7_Impl_" params="" file="src/geom/flat/UInt16Flat7.hx" private="1" module="geom.flat.UInt16Flat7">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat7"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat8" params="" file="src/geom/flat/UInt16Flat8.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat8.UInt16Flat8_Impl_" params="" file="src/geom/flat/UInt16Flat8.hx" private="1" module="geom.flat.UInt16Flat8">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat8.UInt16Flat8_Impl_" params="" file="src/geom/flat/UInt16Flat8.hx" private="1" module="geom.flat.UInt16Flat8">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.flat.UInt16Flat9" params="" file="src/geom/flat/UInt16Flat9.hx">
		<this><x path="geom.flat.UInt16Flat"/></this>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.flat._UInt16Flat9.UInt16Flat9_Impl_" params="" file="src/geom/flat/UInt16Flat9.hx" private="1" module="geom.flat.UInt16Flat9">
	<readItem public="1" get="inline" set="null" line="5" static="1">
		<f a="this:k">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</readItem>
	<writeItem public="1" get="inline" set="null" line="9" static="1">
		<f a="this:k:v">
			<x path="geom.flat.UInt16Flat"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
	</writeItem>
	<_new public="1" get="inline" set="null" line="14" static="1">
		<f a="len">
			<x path="Int"/>
			<x path="geom.flat.UInt16Flat9"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<pos public="1" get="accessor" set="accessor" static="1">
		<x path="UInt"/>
		<meta><m n=":impl"/></meta>
	</pos>
	<get_pos get="inline" set="null" line="19" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pos>
	<set_pos get="inline" set="null" line="23" static="1">
		<f a="this:id">
			<x path="geom.flat.UInt16Flat"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pos>
	<getArray public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<x path="geom.flat.UInt16Flat"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getArray>
</class></impl>
	</abstract>
	<class path="geom.flat._UInt16Flat9.UInt16Flat9_Impl_" params="" file="src/geom/flat/UInt16Flat9.hx" private="1" module="geom.flat.UInt16Flat9">
		<readItem public="1" get="inline" set="null" line="5" static="1">
			<f a="this:k">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</readItem>
		<writeItem public="1" get="inline" set="null" line="9" static="1">
			<f a="this:k:v">
				<x path="geom.flat.UInt16Flat"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
		</writeItem>
		<_new public="1" get="inline" set="null" line="14" static="1">
			<f a="len">
				<x path="Int"/>
				<x path="geom.flat.UInt16Flat9"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<pos public="1" get="accessor" set="accessor" static="1">
			<x path="UInt"/>
			<meta><m n=":impl"/></meta>
		</pos>
		<get_pos get="inline" set="null" line="19" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pos>
		<set_pos get="inline" set="null" line="23" static="1">
			<f a="this:id">
				<x path="geom.flat.UInt16Flat"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pos>
		<getArray public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<x path="geom.flat.UInt16Flat"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getArray>
	</class>
	<abstract path="geom.matrix.Complex" params="" file="src/geom/matrix/Complex.hx">
		<from>
			<icast><c path="geom.structure.Mat1x2"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromRealImaginary"><a>
	<real><x path="Float"/></real>
	<imaginary><x path="Float"/></imaginary>
</a></icast>
			<icast field="fromRi"><a>
	<r><x path="Float"/></r>
	<i><x path="Float"/></i>
</a></icast>
			<icast field="fromRealI"><a>
	<real><x path="Float"/></real>
	<i><x path="Float"/></i>
</a></icast>
		</from>
		<this><c path="geom.structure.Mat1x2"/></this>
		<to>
			<icast><c path="geom.structure.Mat1x2"/></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<haxe_doc>Complex - A Complex Float Type.  
   { x, y }
   
   For Convinence you can declare in several ways eg:  
   var c0: Complex = '1 + 2i';  
   var c1: Complex = { real: 1., imaginary: 2. };  
   var c2: Complex = { r: 1., i: 2. };  
   var c3: Complex = new Complex({ x: 1., y: 2. });  
   
   You can use normal operations  
   var c4 = c0 * c1;  
   var c5 = c0 + c1;  
   
   You can extract either part  
   var real = c0.real;  
   var imaginary = c0.i;  
   
   You can trace it.
   trace( Complex.fromString( c0 ) ); // '1. + 2. i'
   
   Trig functions are contained in geom.curve.ComplexTrig, but do not have tests beyond compile.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._Complex.Complex_Impl_" params="" file="src/geom/matrix/Complex.hx" private="1" module="geom.matrix.Complex">
	<fromString public="1" get="inline" set="null" line="39" static="1">
		<f a="s">
			<c path="String"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = '1 + 2i';
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromString>
	<fromRealImaginary public="1" get="inline" set="null" line="57" static="1">
		<f a="c">
			<a>
				<real><x path="Float"/></real>
				<imaginary><x path="Float"/></imaginary>
			</a>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { real: 1., imaginary: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRealImaginary>
	<fromRi public="1" get="inline" set="null" line="70" static="1">
		<f a="c">
			<a>
				<r><x path="Float"/></r>
				<i><x path="Float"/></i>
			</a>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { r: 1., i: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRi>
	<fromRealI public="1" get="inline" set="null" line="83" static="1">
		<f a="c">
			<a>
				<real><x path="Float"/></real>
				<i><x path="Float"/></i>
			</a>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { real: 1., i: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
	</fromRealI>
	<toString public="1" get="inline" set="null" line="97" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c: Complex = { r: 1., i: 2. };
     * ... var s: String = c;
     * ... // js seems to remove the .'s from the numbers not sure on other targets
     * ... s == '1. + 2. i' || s == '1 + 2 i'; }) == true
     * </code></pre>]]></haxe_doc>
	</toString>
	<_new public="1" get="inline" set="null" line="103" static="1">
		<f a="m">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="110" static="1">
		<f a=""><x path="geom.matrix.Complex"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Complex.zero() == new Complex({ x: 0., y: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="119" static="1">
		<f a=""><x path="geom.matrix.Complex"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Complex.unit() == new Complex({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<i public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</i>
	<get_i get="inline" set="null" line="124" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_i>
	<set_i get="inline" set="null" line="128" static="1">
		<f a="this:v">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_i>
	<real public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</real>
	<get_real get="inline" set="null" line="134" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_real>
	<set_real get="inline" set="null" line="137" static="1">
		<f a="this:v">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_real>
	<clone public="1" get="inline" set="null" line="141" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<equal public="1" get="inline" set="null" line="153" static="1">
		<f a="a:b">
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 1., y: 2. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="169" static="1">
		<f a="a:b">
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 1., y: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<add public="1" get="inline" set="null" line="181" static="1">
		<f a="a:b">
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.unit();
     * ... a + a == new Complex({ x: 2., y: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="193" static="1">
		<f a="a:b">
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.unit();
     * ... a - a == Complex.zero(); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<scale public="1" get="inline" set="null" line="205" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scale>
	<multiply public="1" get="inline" set="null" line="218" static="1">
		<f a="a:b">
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3., y: 2. });
     * ... var b = new Complex({ x: 1., y: 7. });
     * ... a * b == new Complex({ x: -11., y: 23. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</multiply>
	<addExponents public="1" get="inline" set="null" line="222" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</addExponents>
	<conjugate public="1" get="inline" set="null" line="234" static="1">
		<f a="a">
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = ~a;
     * ... b == new Complex({ x: 1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<divide public="1" get="inline" set="null" line="262" static="1">
		<f a="c1:c2">
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: -3. });
     * ... var b = new Complex({ x: 1., y: 2. });
     * ... a / b == new Complex({ x:-1, y: -1 });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</divide>
	<negate public="1" get="inline" set="null" line="278" static="1">
		<f a="a">
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = -a;
     * ... b == new Complex({ x: -1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<magnitudeSquared public="1" get="inline" set="null" line="289" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 2., y: 4. });
     * ... a.magnitudeSquared() == 4. + 16.; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitudeSquared>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</magnitude>
	<get_magnitude get="inline" set="null" line="294" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_magnitude>
	<set_magnitude get="inline" set="null" line="298" static="1">
		<f a="this:length">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_magnitude>
	<phase public="1" get="inline" set="null" line="310" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</phase>
	<isReal public="1" get="inline" set="null" line="314" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</isReal>
	<isImaginary public="1" get="inline" set="null" line="318" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</isImaginary>
	<cis public="1" get="inline" set="null" line="322" static="1"><f a="angle">
	<x path="Float"/>
	<x path="geom.matrix.Complex"/>
</f></cis>
	<fromCircle public="1" get="inline" set="null" line="326" static="1">
		<f a="this:r:angle">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":impl"/></meta>
	</fromCircle>
	<square public="1" get="inline" set="null" line="330" static="1">
		<f a="this:c">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Complex"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":impl"/></meta>
	</square>
	<exp public="1" get="inline" set="null" line="340" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></exp>
	<ln public="1" get="inline" set="null" line="348" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></ln>
	<reciprocal public="1" get="inline" set="null" line="357" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":impl"/></meta>
	</reciprocal>
	<pow public="1" get="inline" set="null" line="363" static="1"><f a="c:n">
	<x path="geom.matrix.Complex"/>
	<x path="Float"/>
	<x path="geom.matrix.Complex"/>
</f></pow>
	<squareRoot public="1" get="inline" set="null" line="371" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></squareRoot>
	<root2 public="1" get="inline" set="null" line="375" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Complex"/>
		</f>
		<meta><m n=":impl"/></meta>
	</root2>
</class></impl>
	</abstract>
	<class path="geom.matrix._Complex.Complex_Impl_" params="" file="src/geom/matrix/Complex.hx" private="1" module="geom.matrix.Complex">
		<fromString public="1" get="inline" set="null" line="39" static="1">
			<f a="s">
				<c path="String"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = '1 + 2i';
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromString>
		<fromRealImaginary public="1" get="inline" set="null" line="57" static="1">
			<f a="c">
				<a>
					<real><x path="Float"/></real>
					<imaginary><x path="Float"/></imaginary>
				</a>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { real: 1., imaginary: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRealImaginary>
		<fromRi public="1" get="inline" set="null" line="70" static="1">
			<f a="c">
				<a>
					<r><x path="Float"/></r>
					<i><x path="Float"/></i>
				</a>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { r: 1., i: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRi>
		<fromRealI public="1" get="inline" set="null" line="83" static="1">
			<f a="c">
				<a>
					<real><x path="Float"/></real>
					<i><x path="Float"/></i>
				</a>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c0: Complex = { real: 1., i: 2. };
     * ... var c1 = new Complex({ x: 1., y: 2. });
     * ... c1 == c0; }) == true
     * </code></pre>]]></haxe_doc>
		</fromRealI>
		<toString public="1" get="inline" set="null" line="97" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var c: Complex = { r: 1., i: 2. };
     * ... var s: String = c;
     * ... // js seems to remove the .'s from the numbers not sure on other targets
     * ... s == '1. + 2. i' || s == '1 + 2 i'; }) == true
     * </code></pre>]]></haxe_doc>
		</toString>
		<_new public="1" get="inline" set="null" line="103" static="1">
			<f a="m">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="110" static="1">
			<f a=""><x path="geom.matrix.Complex"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Complex.zero() == new Complex({ x: 0., y: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="119" static="1">
			<f a=""><x path="geom.matrix.Complex"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Complex.unit() == new Complex({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<i public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</i>
		<get_i get="inline" set="null" line="124" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_i>
		<set_i get="inline" set="null" line="128" static="1">
			<f a="this:v">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_i>
		<real public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</real>
		<get_real get="inline" set="null" line="134" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_real>
		<set_real get="inline" set="null" line="137" static="1">
			<f a="this:v">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_real>
		<clone public="1" get="inline" set="null" line="141" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<equal public="1" get="inline" set="null" line="153" static="1">
			<f a="a:b">
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 1., y: 2. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="169" static="1">
			<f a="a:b">
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = new Complex({ x: 1., y: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<add public="1" get="inline" set="null" line="181" static="1">
			<f a="a:b">
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.unit();
     * ... a + a == new Complex({ x: 2., y: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="193" static="1">
			<f a="a:b">
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Complex.unit();
     * ... a - a == Complex.zero(); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<scale public="1" get="inline" set="null" line="205" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scale>
		<multiply public="1" get="inline" set="null" line="218" static="1">
			<f a="a:b">
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 3., y: 2. });
     * ... var b = new Complex({ x: 1., y: 7. });
     * ... a * b == new Complex({ x: -11., y: 23. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</multiply>
		<addExponents public="1" get="inline" set="null" line="222" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</addExponents>
		<conjugate public="1" get="inline" set="null" line="234" static="1">
			<f a="a">
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = ~a;
     * ... b == new Complex({ x: 1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<divide public="1" get="inline" set="null" line="262" static="1">
			<f a="c1:c2">
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: -3. });
     * ... var b = new Complex({ x: 1., y: 2. });
     * ... a / b == new Complex({ x:-1, y: -1 });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</divide>
		<negate public="1" get="inline" set="null" line="278" static="1">
			<f a="a">
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 1., y: 2. });
     * ... var b = -a;
     * ... b == new Complex({ x: -1., y: -2. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<magnitudeSquared public="1" get="inline" set="null" line="289" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Complex({ x: 2., y: 4. });
     * ... a.magnitudeSquared() == 4. + 16.; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitudeSquared>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</magnitude>
		<get_magnitude get="inline" set="null" line="294" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_magnitude>
		<set_magnitude get="inline" set="null" line="298" static="1">
			<f a="this:length">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_magnitude>
		<phase public="1" get="inline" set="null" line="310" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</phase>
		<isReal public="1" get="inline" set="null" line="314" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</isReal>
		<isImaginary public="1" get="inline" set="null" line="318" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</isImaginary>
		<cis public="1" get="inline" set="null" line="322" static="1"><f a="angle">
	<x path="Float"/>
	<x path="geom.matrix.Complex"/>
</f></cis>
		<fromCircle public="1" get="inline" set="null" line="326" static="1">
			<f a="this:r:angle">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":impl"/></meta>
		</fromCircle>
		<square public="1" get="inline" set="null" line="330" static="1">
			<f a="this:c">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Complex"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":impl"/></meta>
		</square>
		<exp public="1" get="inline" set="null" line="340" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></exp>
		<ln public="1" get="inline" set="null" line="348" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></ln>
		<reciprocal public="1" get="inline" set="null" line="357" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":impl"/></meta>
		</reciprocal>
		<pow public="1" get="inline" set="null" line="363" static="1"><f a="c:n">
	<x path="geom.matrix.Complex"/>
	<x path="Float"/>
	<x path="geom.matrix.Complex"/>
</f></pow>
		<squareRoot public="1" get="inline" set="null" line="371" static="1"><f a="c">
	<x path="geom.matrix.Complex"/>
	<x path="geom.matrix.Complex"/>
</f></squareRoot>
		<root2 public="1" get="inline" set="null" line="375" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Complex"/>
			</f>
			<meta><m n=":impl"/></meta>
		</root2>
	</class>
	<abstract path="geom.matrix.DualQuaternion" params="" file="src/geom/matrix/DualQuaternion.hx">
		<from><icast><c path="geom.structure.DualQ"/></icast></from>
		<this><c path="geom.structure.DualQ"/></this>
		<to>
			<icast><c path="geom.structure.DualQ"/></icast>
			<icast field="toMatrix4x3"><x path="geom.matrix.Matrix4x3"/></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._DualQuaternion.DualQuaternion_Impl_" params="" file="src/geom/matrix/DualQuaternion.hx" private="1" module="geom.matrix.DualQuaternion">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="dq">
			<c path="geom.structure.DualQ"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="geom.matrix.DualQuaternion"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> DualQuaternion.zero() == new DualQuaternion({real:{ x: 0., y: 0., z: 0., w: 1. },dual:{x:0.,y:0.,z:0.,w:0.}})
     * </code></pre>]]></haxe_doc>
	</zero>
	<clone public="1" get="inline" set="null" line="22" static="1">
		<f a="this">
			<c path="geom.structure.DualQ"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<equal public="1" get="inline" set="null" line="38" static="1">
		<f a="a:b">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var c = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var d = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var e = new DualQuaternion( { real: a, dual: b } );
     * ... var f = new DualQuaternion( { real: c, dual: d } );
     * ... e == f; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="54" static="1">
		<f a="a:b">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var c = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );
     * ... var d = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );
     * ... var e = new DualQuaternion( { real: a, dual: b } );
     * ... var f = new DualQuaternion( { real: c, dual: d } );
     * ... e != f; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<scaleMultiply public="1" get="inline" set="null" line="58" static="1">
		<f a="a:v">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="Float"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</scaleMultiply>
	<divide public="1" get="inline" set="null" line="62" static="1">
		<f a="a:v">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="Float"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<add public="1" get="inline" set="null" line="76" static="1">
		<f a="a:b">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b = Quaternion.unit();
     * ... var c = new DualQuaternion( { real: a, dual: b } );
     * ... c + c == new DualQuaternion( { real:{ x: 2., y: 2., z: 2., w: 2. }, dual: { x: 2., y: 2., z: 2., w: 2. } } ); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="90" static="1">
		<f a="a:b">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b = Quaternion.unit();
     * ... var c = new DualQuaternion( { real: a, dual: b } );
     * ... c - c == new DualQuaternion( { real: Quaternion.zero(), dual: Quaternion.zero() } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<negate public="1" get="inline" set="null" line="105" static="1">
		<f a="a">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var c = new DualQuaternion({ real: a, dual: a } );
     * ... var b = -c;
     * ... var e = new Quaternion({ x: -1., y: -2., z: -3., w: -1. });
     * ... var f = new DualQuaternion({ real: e, dual: e });
     * ... b == f; }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<create public="1" get="inline" set="null" line="109" static="1"><f a="r:t">
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.DualQuaternion"/>
</f></create>
	<applyScale public="1" get="inline" set="null" line="118" static="1">
		<f a="this:s">
			<c path="geom.structure.DualQ"/>
			<x path="Float"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</applyScale>
	<scalar public="1" get="inline" set="null" line="131" static="1">
		<f a="s">
			<x path="Float"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<haxe_doc>* allow scaling a DualQuaternion untested
     * usage:
     * var scaledDualQuaternion = DualQuaternion.scalar( 3 ) * dualQ;
     * source:  *http://roartindon.blogspot.com/2015/04/encoding-uniform-scale-in-quaternions.html</haxe_doc>
	</scalar>
	<dotProduct public="1" get="inline" set="null" line="136" static="1"><f a="a:b">
	<x path="geom.matrix.DualQuaternion"/>
	<x path="geom.matrix.DualQuaternion"/>
	<x path="Float"/>
</f></dotProduct>
	<normalize public="1" get="inline" set="null" line="140" static="1">
		<f a="this">
			<c path="geom.structure.DualQ"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</normalize>
	<conjugate public="1" get="inline" set="null" line="147" static="1">
		<f a="a">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</conjugate>
	<getTranslation public="1" get="inline" set="null" line="151" static="1">
		<f a="this">
			<c path="geom.structure.DualQ"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTranslation>
	<multiplyQ public="1" get="inline" set="null" line="157" static="1">
		<f a="q1:q2">
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
			<x path="geom.matrix.DualQuaternion"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyQ>
	<toMatrix4x3 public="1" get="inline" set="null" line="162" static="1">
		<f a="this">
			<c path="geom.structure.DualQ"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toMatrix4x3>
</class></impl>
	</abstract>
	<class path="geom.matrix._DualQuaternion.DualQuaternion_Impl_" params="" file="src/geom/matrix/DualQuaternion.hx" private="1" module="geom.matrix.DualQuaternion">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="dq">
				<c path="geom.structure.DualQ"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="geom.matrix.DualQuaternion"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> DualQuaternion.zero() == new DualQuaternion({real:{ x: 0., y: 0., z: 0., w: 1. },dual:{x:0.,y:0.,z:0.,w:0.}})
     * </code></pre>]]></haxe_doc>
		</zero>
		<clone public="1" get="inline" set="null" line="22" static="1">
			<f a="this">
				<c path="geom.structure.DualQ"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<equal public="1" get="inline" set="null" line="38" static="1">
			<f a="a:b">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var c = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var d = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var e = new DualQuaternion( { real: a, dual: b } );
     * ... var f = new DualQuaternion( { real: c, dual: d } );
     * ... e == f; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="54" static="1">
			<f a="a:b">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var b = new Quaternion( { x: 1., y: 2., z: 3., w: 1. } );
     * ... var c = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );
     * ... var d = new Quaternion( { x: 1., y: 2., z: 4., w: 1. } );
     * ... var e = new DualQuaternion( { real: a, dual: b } );
     * ... var f = new DualQuaternion( { real: c, dual: d } );
     * ... e != f; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<scaleMultiply public="1" get="inline" set="null" line="58" static="1">
			<f a="a:v">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="Float"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</scaleMultiply>
		<divide public="1" get="inline" set="null" line="62" static="1">
			<f a="a:v">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="Float"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<add public="1" get="inline" set="null" line="76" static="1">
			<f a="a:b">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b = Quaternion.unit();
     * ... var c = new DualQuaternion( { real: a, dual: b } );
     * ... c + c == new DualQuaternion( { real:{ x: 2., y: 2., z: 2., w: 2. }, dual: { x: 2., y: 2., z: 2., w: 2. } } ); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="90" static="1">
			<f a="a:b">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b = Quaternion.unit();
     * ... var c = new DualQuaternion( { real: a, dual: b } );
     * ... c - c == new DualQuaternion( { real: Quaternion.zero(), dual: Quaternion.zero() } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<negate public="1" get="inline" set="null" line="105" static="1">
			<f a="a">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var c = new DualQuaternion({ real: a, dual: a } );
     * ... var b = -c;
     * ... var e = new Quaternion({ x: -1., y: -2., z: -3., w: -1. });
     * ... var f = new DualQuaternion({ real: e, dual: e });
     * ... b == f; }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<create public="1" get="inline" set="null" line="109" static="1"><f a="r:t">
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.DualQuaternion"/>
</f></create>
		<applyScale public="1" get="inline" set="null" line="118" static="1">
			<f a="this:s">
				<c path="geom.structure.DualQ"/>
				<x path="Float"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</applyScale>
		<scalar public="1" get="inline" set="null" line="131" static="1">
			<f a="s">
				<x path="Float"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<haxe_doc>* allow scaling a DualQuaternion untested
     * usage:
     * var scaledDualQuaternion = DualQuaternion.scalar( 3 ) * dualQ;
     * source:  *http://roartindon.blogspot.com/2015/04/encoding-uniform-scale-in-quaternions.html</haxe_doc>
		</scalar>
		<dotProduct public="1" get="inline" set="null" line="136" static="1"><f a="a:b">
	<x path="geom.matrix.DualQuaternion"/>
	<x path="geom.matrix.DualQuaternion"/>
	<x path="Float"/>
</f></dotProduct>
		<normalize public="1" get="inline" set="null" line="140" static="1">
			<f a="this">
				<c path="geom.structure.DualQ"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</normalize>
		<conjugate public="1" get="inline" set="null" line="147" static="1">
			<f a="a">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</conjugate>
		<getTranslation public="1" get="inline" set="null" line="151" static="1">
			<f a="this">
				<c path="geom.structure.DualQ"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTranslation>
		<multiplyQ public="1" get="inline" set="null" line="157" static="1">
			<f a="q1:q2">
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
				<x path="geom.matrix.DualQuaternion"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyQ>
		<toMatrix4x3 public="1" get="inline" set="null" line="162" static="1">
			<f a="this">
				<c path="geom.structure.DualQ"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toMatrix4x3>
	</class>
	<typedef path="geom.matrix.Vec2" params="" file="src/geom/matrix/Matrix1x2.hx" module="geom.matrix.Matrix1x2"><x path="geom.matrix.Matrix1x2"/></typedef>
	<abstract path="geom.matrix.Matrix1x2" params="" file="src/geom/matrix/Matrix1x2.hx">
		<from>
			<icast><c path="geom.structure.Mat1x2"/></icast>
			<icast field="fromVec3"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="geom.structure.Mat1x2"/></this>
		<to>
			<icast><c path="geom.structure.Mat1x2"/></icast>
			<icast field="toTpoint"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></icast>
			<icast field="toVec3"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<haxe_doc>{ x, y }</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._Matrix1x2.Matrix1x2_Impl_" params="" file="src/geom/matrix/Matrix1x2.hx" private="1" module="geom.matrix.Matrix1x2">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="m">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<clone public="1" get="inline" set="null" line="11" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<get_self public="1" get="inline" set="null" line="16" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_self>
	<lerpClampT public="1" get="inline" set="null" line="19" static="1">
		<f a="this:p:t">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lerpClampT>
	<lerp public="1" get="inline" set="null" line="24" static="1">
		<f a="this:p:t">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lerp>
	<sumXY public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sumXY>
	<zero public="1" get="inline" set="null" line="38" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.zero() == new Matrix1x2({ x: 0., y: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="47" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</magnitude>
	<get_magnitude get="inline" set="null" line="57" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ( new Matrix1x2( { x: 4., y: 3. } ) ).magnitude == 5
     * </code></pre>]]></haxe_doc>
	</get_magnitude>
	<set_magnitude get="inline" set="null" line="70" static="1">
		<f a="this:length">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = new Matrix1x2( { x: 9., y: 12. } );
     * ... m.magnitude = 5;
     * ... ( m.x == 3. && m.y == 4. ) == true; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</set_magnitude>
	<topLeft public="1" get="inline" set="null" line="87" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topLeft() == new Matrix1x2({ x: -1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</topLeft>
	<topRight public="1" get="inline" set="null" line="96" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topRight() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</topRight>
	<bottomLeft public="1" get="inline" set="null" line="105" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomLeft() == new Matrix1x2({ x: -1., y: -1. })
     * </code></pre>]]></haxe_doc>
	</bottomLeft>
	<bottomRight public="1" get="inline" set="null" line="114" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomRight() == new Matrix1x2({ x: 1., y: -1. })
     * </code></pre>]]></haxe_doc>
	</bottomRight>
	<north public="1" get="inline" set="null" line="123" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.north() == new Matrix1x2({ x: 0., y: 1. })
     * </code></pre>]]></haxe_doc>
	</north>
	<south public="1" get="inline" set="null" line="132" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.south() == new Matrix1x2({ x: 0., y: -1. })
     * </code></pre>]]></haxe_doc>
	</south>
	<west public="1" get="inline" set="null" line="141" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.west() == new Matrix1x2({ x: -1., y: 0. })
     * </code></pre>]]></haxe_doc>
	</west>
	<east public="1" get="inline" set="null" line="150" static="1">
		<f a=""><x path="geom.matrix.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east() == new Matrix1x2({ x: 1., y: 0. })
     * </code></pre>]]></haxe_doc>
	</east>
	<negate public="1" get="inline" set="null" line="155" static="1">
		<f a="a">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
	</negate>
	<add public="1" get="inline" set="null" line="165" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() + Matrix1x2.unit() == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="174" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() - Matrix1x2.unit() == new Matrix1x2( { x: 0., y: 0. } )
     * </code></pre>]]></haxe_doc>
	</subtract>
	<dot public="1" get="inline" set="null" line="179" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</dot>
	<scaleMultiply public="1" get="inline" set="null" line="189" static="1">
		<f a="a:v">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() * 2 == new Matrix1x2( { x: 2., y: 2. } )
     * >>> 2 * Matrix1x2.unit() == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
	</scaleMultiply>
	<divide public="1" get="inline" set="null" line="198" static="1">
		<f a="a:v">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() / 2 == new Matrix1x2( { x: 0.5, y: 0.5 } )
     * </code></pre>]]></haxe_doc>
	</divide>
	<equal public="1" get="inline" set="null" line="211" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a == b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="224" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 5. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a != b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<perp public="1" get="inline" set="null" line="234" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"perp" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</perp>
	<mid public="1" get="inline" set="null" line="249" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3.,  y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 4.,  y: 2. } ); 
     * ... var c = new Matrix1x2( { x: 3.5, y: 1.5 } );
     * ... var mid = Matrix1x2.mid( a, b ); 
     * ... mid == c;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</mid>
	<distanceBetweenSquare public="1" get="inline" set="null" line="263" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* test with 3,4,5 triangle
     *
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetweenSquare( b ); }) == 25
     * </code></pre>]]></haxe_doc>
	</distanceBetweenSquare>
	<distanceBetweenSquare_ public="1" get="inline" set="null" line="270" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</distanceBetweenSquare_>
	<distanceBetween public="1" get="inline" set="null" line="286" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* test with 3,4,5 triangle
     *
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetween( b ); }) == 5
     * </code></pre>]]></haxe_doc>
	</distanceBetween>
	<span public="1" get="inline" set="null" line="295" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"span" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</span>
	<normalize public="1" get="inline" set="null" line="304" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"normalize" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</normalize>
	<lenSquare public="1" get="inline" set="null" line="316" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 3. } ); 
     * ... a.lenSquare(); }) == 18
     * </code></pre>]]></haxe_doc>
	</lenSquare>
	<distance public="1" get="inline" set="null" line="327" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 4. } ); 
     * ... a.distance(); }) == 5
     * </code></pre>]]></haxe_doc>
	</distance>
	<isLeft public="1" get="inline" set="null" line="349" static="1">
		<f a="this:a:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"isLeft" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</isLeft>
	<triangleArea public="1" get="inline" set="null" line="358" static="1">
		<f a="a:b:c">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"triangleArea" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</triangleArea>
	<sign public="1" get="inline" set="null" line="368" static="1">
		<f a="n">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.sign( -7. ) == -1
     * >>> Matrix1x2.sign( 7. ) == 1
     * </code></pre>]]></haxe_doc>
	</sign>
	<thetaDifference public="1" get="inline" set="null" line="384" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.thetaDifference( Matrix1x2.east(),        Matrix1x2.zero() ) == 0
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomRight(), Matrix1x2.zero() ) == -Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.south(),       Matrix1x2.zero() ) == -Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomLeft(),  Matrix1x2.zero() ) == -3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.west(),        Matrix1x2.zero() ) == Math.PI
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topLeft(),     Matrix1x2.zero() ) == 3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.north(),       Matrix1x2.zero() ) == Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topRight(),    Matrix1x2.zero() ) == Math.PI/4
     * </code></pre>]]></haxe_doc>
	</thetaDifference>
	<inTri public="1" get="inline" set="null" line="396" static="1">
		<f a="this:a:b:c">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</inTri>
	<inTri2 public="1" get="inline" set="null" line="408" static="1">
		<f a="this:a:b:c">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri2" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</inTri2>
	<inRect public="1" get="inline" set="null" line="451" static="1">
		<f a="this:b:c">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight()/2; 
     * ... var b = Matrix1x2.zero(); 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == true
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.zero(); 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == false
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero(); 
     * ... a.inRect( b, c ); }) == false
     * >>> ({ 
     * ... var a = Matrix1x2.bottomRight()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero(); 
     * ... a.inRect( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</inRect>
	<convex public="1" get="inline" set="null" line="478" static="1">
		<f a="a:b:c">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var l = new Matrix1x2( { x: 1., y: 0. });
     * ... var t = new Matrix1x2( { x: 2., y: 1. });
     * ... var r = new Matrix1x2( { x: 4., y: 0. });
     * ... var b = new Matrix1x2( { x: 3., y: -1. });
     * ... (!Matrix1x2.convex( l, t, r ) && Matrix1x2.convex( l, b, r )) == true;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</convex>
	<cross public="1" get="inline" set="null" line="487" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"cross" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</cross>
	<theta public="1" get="inline" set="null" line="503" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east().theta()        == 0.
     * >>> Matrix1x2.bottomRight().theta() == -Math.PI/4
     * >>> Matrix1x2.south().theta()       == -Math.PI/2
     * >>> Matrix1x2.bottomLeft().theta()  == -3*Math.PI/4
     * >>> Matrix1x2.west().theta()        == Math.PI
     * >>> Matrix1x2.topLeft().theta()     == 3*Math.PI/4
     * >>> Matrix1x2.north().theta()       == Math.PI/2
     * >>> Matrix1x2.topRight().theta()    == Math.PI/4
     * </code></pre>]]></haxe_doc>
	</theta>
	<close public="1" get="inline" set="null" line="515" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":value"><e>{ delta : 0.00001 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 0.5, y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</close>
	<xClose public="1" get="inline" set="null" line="527" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":value"><e>{ delta : 0.00001 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = new Matrix1x2( { x: 0.5, y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</xClose>
	<yClose public="1" get="inline" set="null" line="540" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":value"><e>{ delta : 0.00001 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</yClose>
	<pivotAround public="1" get="inline" set="null" line="553" static="1">
		<f a="this:omega:pivot">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight(); 
     * ... var b = a.pivotAround( Math.PI/2, Matrix1x2.topRight()/2 ); 
     * ... b.close( Matrix1x2.north() ); }) == true
     * </code></pre>]]></haxe_doc>
	</pivotAround>
	<toTpoint public="1" get="inline" set="null" line="567" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<t path="geom.tydef.Tpoint"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"toTPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</toTpoint>
	<toVec3 public="1" get="inline" set="null" line="581" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVec3>
	<fromVec3 public="1" get="inline" set="null" line="599" static="1">
		<f a="v3">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... var c: Matrix1x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec3>
	<fromArrayPos public="1" get="inline" set="null" line="608" static="1">
		<f a="arr:pos">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.fromArrayPos( [ 0., 1., 2. ], 1) ==  new Matrix1x2({x:1.,y:2.})
     * </code></pre>]]></haxe_doc>
	</fromArrayPos>
	<toArrayPos public="1" get="inline" set="null" line="620" static="1">
		<f a="this:arr:pos">
			<c path="geom.structure.Mat1x2"/>
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 5., y: 6. } ); 
     * ... var arr = [ 0., 1., 2. ]; 
     * ... a.toArrayPos( arr, 1 ); }) == [ 0., 5., 6. ]
     * </code></pre>]]></haxe_doc>
	</toArrayPos>
</class></impl>
	</abstract>
	<class path="geom.matrix._Matrix1x2.Matrix1x2_Impl_" params="" file="src/geom/matrix/Matrix1x2.hx" private="1" module="geom.matrix.Matrix1x2">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="m">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<clone public="1" get="inline" set="null" line="11" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<get_self public="1" get="inline" set="null" line="16" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_self>
		<lerpClampT public="1" get="inline" set="null" line="19" static="1">
			<f a="this:p:t">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lerpClampT>
		<lerp public="1" get="inline" set="null" line="24" static="1">
			<f a="this:p:t">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lerp>
		<sumXY public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sumXY>
		<zero public="1" get="inline" set="null" line="38" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.zero() == new Matrix1x2({ x: 0., y: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="47" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</magnitude>
		<get_magnitude get="inline" set="null" line="57" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ( new Matrix1x2( { x: 4., y: 3. } ) ).magnitude == 5
     * </code></pre>]]></haxe_doc>
		</get_magnitude>
		<set_magnitude get="inline" set="null" line="70" static="1">
			<f a="this:length">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = new Matrix1x2( { x: 9., y: 12. } );
     * ... m.magnitude = 5;
     * ... ( m.x == 3. && m.y == 4. ) == true; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</set_magnitude>
		<topLeft public="1" get="inline" set="null" line="87" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topLeft() == new Matrix1x2({ x: -1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</topLeft>
		<topRight public="1" get="inline" set="null" line="96" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topRight() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</topRight>
		<bottomLeft public="1" get="inline" set="null" line="105" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomLeft() == new Matrix1x2({ x: -1., y: -1. })
     * </code></pre>]]></haxe_doc>
		</bottomLeft>
		<bottomRight public="1" get="inline" set="null" line="114" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomRight() == new Matrix1x2({ x: 1., y: -1. })
     * </code></pre>]]></haxe_doc>
		</bottomRight>
		<north public="1" get="inline" set="null" line="123" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.north() == new Matrix1x2({ x: 0., y: 1. })
     * </code></pre>]]></haxe_doc>
		</north>
		<south public="1" get="inline" set="null" line="132" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.south() == new Matrix1x2({ x: 0., y: -1. })
     * </code></pre>]]></haxe_doc>
		</south>
		<west public="1" get="inline" set="null" line="141" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.west() == new Matrix1x2({ x: -1., y: 0. })
     * </code></pre>]]></haxe_doc>
		</west>
		<east public="1" get="inline" set="null" line="150" static="1">
			<f a=""><x path="geom.matrix.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east() == new Matrix1x2({ x: 1., y: 0. })
     * </code></pre>]]></haxe_doc>
		</east>
		<negate public="1" get="inline" set="null" line="155" static="1">
			<f a="a">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
		</negate>
		<add public="1" get="inline" set="null" line="165" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() + Matrix1x2.unit() == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="174" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() - Matrix1x2.unit() == new Matrix1x2( { x: 0., y: 0. } )
     * </code></pre>]]></haxe_doc>
		</subtract>
		<dot public="1" get="inline" set="null" line="179" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</dot>
		<scaleMultiply public="1" get="inline" set="null" line="189" static="1">
			<f a="a:v">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() * 2 == new Matrix1x2( { x: 2., y: 2. } )
     * >>> 2 * Matrix1x2.unit() == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
		</scaleMultiply>
		<divide public="1" get="inline" set="null" line="198" static="1">
			<f a="a:v">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() / 2 == new Matrix1x2( { x: 0.5, y: 0.5 } )
     * </code></pre>]]></haxe_doc>
		</divide>
		<equal public="1" get="inline" set="null" line="211" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a == b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="224" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 5. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a != b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<perp public="1" get="inline" set="null" line="234" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"perp" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</perp>
		<mid public="1" get="inline" set="null" line="249" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3.,  y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 4.,  y: 2. } ); 
     * ... var c = new Matrix1x2( { x: 3.5, y: 1.5 } );
     * ... var mid = Matrix1x2.mid( a, b ); 
     * ... mid == c;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</mid>
		<distanceBetweenSquare public="1" get="inline" set="null" line="263" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* test with 3,4,5 triangle
     *
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetweenSquare( b ); }) == 25
     * </code></pre>]]></haxe_doc>
		</distanceBetweenSquare>
		<distanceBetweenSquare_ public="1" get="inline" set="null" line="270" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</distanceBetweenSquare_>
		<distanceBetween public="1" get="inline" set="null" line="286" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* test with 3,4,5 triangle
     *
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetween( b ); }) == 5
     * </code></pre>]]></haxe_doc>
		</distanceBetween>
		<span public="1" get="inline" set="null" line="295" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"span" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</span>
		<normalize public="1" get="inline" set="null" line="304" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"normalize" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</normalize>
		<lenSquare public="1" get="inline" set="null" line="316" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 3. } ); 
     * ... a.lenSquare(); }) == 18
     * </code></pre>]]></haxe_doc>
		</lenSquare>
		<distance public="1" get="inline" set="null" line="327" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 4. } ); 
     * ... a.distance(); }) == 5
     * </code></pre>]]></haxe_doc>
		</distance>
		<isLeft public="1" get="inline" set="null" line="349" static="1">
			<f a="this:a:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"isLeft" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</isLeft>
		<triangleArea public="1" get="inline" set="null" line="358" static="1">
			<f a="a:b:c">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"triangleArea" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</triangleArea>
		<sign public="1" get="inline" set="null" line="368" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.sign( -7. ) == -1
     * >>> Matrix1x2.sign( 7. ) == 1
     * </code></pre>]]></haxe_doc>
		</sign>
		<thetaDifference public="1" get="inline" set="null" line="384" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.thetaDifference( Matrix1x2.east(),        Matrix1x2.zero() ) == 0
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomRight(), Matrix1x2.zero() ) == -Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.south(),       Matrix1x2.zero() ) == -Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomLeft(),  Matrix1x2.zero() ) == -3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.west(),        Matrix1x2.zero() ) == Math.PI
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topLeft(),     Matrix1x2.zero() ) == 3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.north(),       Matrix1x2.zero() ) == Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topRight(),    Matrix1x2.zero() ) == Math.PI/4
     * </code></pre>]]></haxe_doc>
		</thetaDifference>
		<inTri public="1" get="inline" set="null" line="396" static="1">
			<f a="this:a:b:c">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</inTri>
		<inTri2 public="1" get="inline" set="null" line="408" static="1">
			<f a="this:a:b:c">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri2" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</inTri2>
		<inRect public="1" get="inline" set="null" line="451" static="1">
			<f a="this:b:c">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight()/2; 
     * ... var b = Matrix1x2.zero(); 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == true
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.zero(); 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == false
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero(); 
     * ... a.inRect( b, c ); }) == false
     * >>> ({ 
     * ... var a = Matrix1x2.bottomRight()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero(); 
     * ... a.inRect( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</inRect>
		<convex public="1" get="inline" set="null" line="478" static="1">
			<f a="a:b:c">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var l = new Matrix1x2( { x: 1., y: 0. });
     * ... var t = new Matrix1x2( { x: 2., y: 1. });
     * ... var r = new Matrix1x2( { x: 4., y: 0. });
     * ... var b = new Matrix1x2( { x: 3., y: -1. });
     * ... (!Matrix1x2.convex( l, t, r ) && Matrix1x2.convex( l, b, r )) == true;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</convex>
		<cross public="1" get="inline" set="null" line="487" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"cross" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</cross>
		<theta public="1" get="inline" set="null" line="503" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east().theta()        == 0.
     * >>> Matrix1x2.bottomRight().theta() == -Math.PI/4
     * >>> Matrix1x2.south().theta()       == -Math.PI/2
     * >>> Matrix1x2.bottomLeft().theta()  == -3*Math.PI/4
     * >>> Matrix1x2.west().theta()        == Math.PI
     * >>> Matrix1x2.topLeft().theta()     == 3*Math.PI/4
     * >>> Matrix1x2.north().theta()       == Math.PI/2
     * >>> Matrix1x2.topRight().theta()    == Math.PI/4
     * </code></pre>]]></haxe_doc>
		</theta>
		<close public="1" get="inline" set="null" line="515" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ delta : 0.00001 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 0.5, y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</close>
		<xClose public="1" get="inline" set="null" line="527" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ delta : 0.00001 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = new Matrix1x2( { x: 0.5, y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</xClose>
		<yClose public="1" get="inline" set="null" line="540" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ delta : 0.00001 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</yClose>
		<pivotAround public="1" get="inline" set="null" line="553" static="1">
			<f a="this:omega:pivot">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight(); 
     * ... var b = a.pivotAround( Math.PI/2, Matrix1x2.topRight()/2 ); 
     * ... b.close( Matrix1x2.north() ); }) == true
     * </code></pre>]]></haxe_doc>
		</pivotAround>
		<toTpoint public="1" get="inline" set="null" line="567" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<t path="geom.tydef.Tpoint"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"toTPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</toTpoint>
		<toVec3 public="1" get="inline" set="null" line="581" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVec3>
		<fromVec3 public="1" get="inline" set="null" line="599" static="1">
			<f a="v3">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... var c: Matrix1x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec3>
		<fromArrayPos public="1" get="inline" set="null" line="608" static="1">
			<f a="arr:pos">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.fromArrayPos( [ 0., 1., 2. ], 1) ==  new Matrix1x2({x:1.,y:2.})
     * </code></pre>]]></haxe_doc>
		</fromArrayPos>
		<toArrayPos public="1" get="inline" set="null" line="620" static="1">
			<f a="this:arr:pos">
				<c path="geom.structure.Mat1x2"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 5., y: 6. } ); 
     * ... var arr = [ 0., 1., 2. ]; 
     * ... a.toArrayPos( arr, 1 ); }) == [ 0., 5., 6. ]
     * </code></pre>]]></haxe_doc>
		</toArrayPos>
	</class>
	<typedef path="geom.matrix.Vec4" params="" file="src/geom/matrix/Matrix1x4.hx" module="geom.matrix.Matrix1x4"><x path="geom.matrix.Matrix1x4"/></typedef>
	<abstract path="geom.matrix.Matrix1x4" params="" file="src/geom/matrix/Matrix1x4.hx">
		<from>
			<icast><c path="geom.structure.Mat1x4"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="fromArray"><c path="Array"><x path="Float"/></c></icast>
		</from>
		<this><c path="geom.structure.Mat1x4"/></this>
		<to>
			<icast><c path="geom.structure.Mat1x4"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
		</to>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._Matrix1x4.Matrix1x4_Impl_" params="" file="src/geom/matrix/Matrix1x4.hx" private="1" module="geom.matrix.Matrix1x4">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="m">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="16" static="1">
		<f a=""><x path="geom.matrix.Matrix1x4"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.zero() == new Matrix1x4({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="25" static="1">
		<f a=""><x path="geom.matrix.Matrix1x4"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.unit() == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<clone public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<identity public="1" get="inline" set="null" line="38" static="1">
		<f a="out">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.identity( Matrix1x4.zero() ) == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</identity>
	<copy public="1" get="inline" set="null" line="55" static="1">
		<f a="pin:pout">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Matrix1x4.zero();
     * ... var c = Matrix1x4.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
	</copy>
	<projectPoint public="1" get="inline" set="null" line="68" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"projectPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</projectPoint>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitude>
	<get_magnitude get="inline" set="null" line="82" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_magnitude>
	<set_magnitude get="inline" set="null" line="86" static="1">
		<f a="this:length">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_magnitude>
	<equal public="1" get="inline" set="null" line="109" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="127" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<magnitudeSquared public="1" get="inline" set="null" line="136" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitudeSquared>
	<add public="1" get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... a + a == new Matrix1x4({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... a - a == Matrix1x4.zero();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<scalarProduct public="1" get="inline" set="null" line="172" static="1"><f a="a:b">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="Float"/>
</f></scalarProduct>
	<dotProd public="1" get="inline" set="null" line="176" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</dotProd>
	<scaleMultiply public="1" get="inline" set="null" line="181" static="1">
		<f a="a:v">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</scaleMultiply>
	<transformPoint public="1" get="inline" set="null" line="185" static="1">
		<f a="this:t">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformPoint>
	<divide public="1" get="inline" set="null" line="192" static="1">
		<f a="a:v">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<divide2 public="1" get="inline" set="null" line="196" static="1">
		<f a="v:a">
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide2>
	<conjugate public="1" get="inline" set="null" line="208" static="1">
		<f a="a">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<negate public="1" get="inline" set="null" line="224" static="1">
		<f a="a">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<multiplyV public="1" get="inline" set="null" line="232" static="1"><f a="a:b:out">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
</f></multiplyV>
	<multiplyQ public="1" get="inline" set="null" line="248" static="1"><f a="q:v:out">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
</f></multiplyQ>
	<cross public="1" get="inline" set="null" line="263" static="1">
		<f a="this:v">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cross>
	<normalize public="1" get="inline" set="null" line="346" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</normalize>
	<constrainDistance public="1" get="inline" set="null" line="351" static="1">
		<f a="this:anchor:distance">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</constrainDistance>
	<fromVec public="1" get="inline" set="null" line="365" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Matrix1x4 = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="379" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<fromArray public="1" get="inline" set="null" line="397" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: Matrix1x4 = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromArray>
	<toArray public="1" get="inline" set="null" line="409" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
	</toArray>
</class></impl>
	</abstract>
	<class path="geom.matrix._Matrix1x4.Matrix1x4_Impl_" params="" file="src/geom/matrix/Matrix1x4.hx" private="1" module="geom.matrix.Matrix1x4">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="m">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="16" static="1">
			<f a=""><x path="geom.matrix.Matrix1x4"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.zero() == new Matrix1x4({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="25" static="1">
			<f a=""><x path="geom.matrix.Matrix1x4"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.unit() == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<clone public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<identity public="1" get="inline" set="null" line="38" static="1">
			<f a="out">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.identity( Matrix1x4.zero() ) == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</identity>
		<copy public="1" get="inline" set="null" line="55" static="1">
			<f a="pin:pout">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Matrix1x4.zero();
     * ... var c = Matrix1x4.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
		</copy>
		<projectPoint public="1" get="inline" set="null" line="68" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"projectPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</projectPoint>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitude>
		<get_magnitude get="inline" set="null" line="82" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_magnitude>
		<set_magnitude get="inline" set="null" line="86" static="1">
			<f a="this:length">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_magnitude>
		<equal public="1" get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="127" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<magnitudeSquared public="1" get="inline" set="null" line="136" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitudeSquared>
		<add public="1" get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... a + a == new Matrix1x4({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... a - a == Matrix1x4.zero();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<scalarProduct public="1" get="inline" set="null" line="172" static="1"><f a="a:b">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="Float"/>
</f></scalarProduct>
		<dotProd public="1" get="inline" set="null" line="176" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</dotProd>
		<scaleMultiply public="1" get="inline" set="null" line="181" static="1">
			<f a="a:v">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</scaleMultiply>
		<transformPoint public="1" get="inline" set="null" line="185" static="1">
			<f a="this:t">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformPoint>
		<divide public="1" get="inline" set="null" line="192" static="1">
			<f a="a:v">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<divide2 public="1" get="inline" set="null" line="196" static="1">
			<f a="v:a">
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide2>
		<conjugate public="1" get="inline" set="null" line="208" static="1">
			<f a="a">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<negate public="1" get="inline" set="null" line="224" static="1">
			<f a="a">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<multiplyV public="1" get="inline" set="null" line="232" static="1"><f a="a:b:out">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
</f></multiplyV>
		<multiplyQ public="1" get="inline" set="null" line="248" static="1"><f a="q:v:out">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
</f></multiplyQ>
		<cross public="1" get="inline" set="null" line="263" static="1">
			<f a="this:v">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cross>
		<normalize public="1" get="inline" set="null" line="346" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</normalize>
		<constrainDistance public="1" get="inline" set="null" line="351" static="1">
			<f a="this:anchor:distance">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</constrainDistance>
		<fromVec public="1" get="inline" set="null" line="365" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Matrix1x4 = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="379" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<fromArray public="1" get="inline" set="null" line="397" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: Matrix1x4 = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromArray>
		<toArray public="1" get="inline" set="null" line="409" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
		</toArray>
	</class>
	<abstract path="geom.matrix.Matrix2x2" params="" file="src/geom/matrix/Matrix2x2.hx">
		<from>
			<icast><c path="geom.structure.Mat2x2"/></icast>
			<icast field="from3x3"><x path="geom.matrix.Matrix3x3"/></icast>
			<icast field="from4x3"><x path="geom.matrix.Matrix4x3"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="geom.structure.Mat2x2"/></this>
		<to>
			<icast><c path="geom.structure.Mat2x2"/></icast>
			<icast field="to3x3"><x path="geom.matrix.Matrix3x3"/></icast>
			<icast field="to4x3"><x path="geom.matrix.Matrix4x3"/></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<haxe_doc>![2x2](../bootstrap/img/matrix2x2.png)</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._Matrix2x2.Matrix2x2_Impl_" params="" file="src/geom/matrix/Matrix2x2.hx" private="1" module="geom.matrix.Matrix2x2">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="m">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<clone public="1" get="inline" set="null" line="9" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<create public="1" get="inline" set="null" line="14" static="1">
		<f a="this:a:b:c:d">
			<c path="geom.structure.Mat2x2"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</create>
	<zero public="1" get="inline" set="null" line="25" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.zero() == new Matrix2x2( { a: 0., b: 0., c: 0., d: 0. } )
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="35" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.unit() == new Matrix2x2( { a: 1., b: 0., c: 0., d: 1. } )
     * </code></pre>]]></haxe_doc>
	</unit>
	<topLeft public="1" get="inline" set="null" line="48" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.topLeft() == new Matrix2x2( { a: 1., b: 0.
     * ...                                       , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</topLeft>
	<topRight public="1" get="inline" set="null" line="61" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.topRight() == new Matrix2x2( { a: 1., b: 0.
     * ...                                        , c: 0., d: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</topRight>
	<bottomLeft public="1" get="inline" set="null" line="74" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.bottomLeft() == new Matrix2x2( { a: -1., b: 0.
     * ...                                          , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</bottomLeft>
	<bottomRight public="1" get="inline" set="null" line="87" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.bottomRight() == new Matrix2x2( { a: 1., b: 0.
     * ...                                           , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</bottomRight>
	<north public="1" get="inline" set="null" line="100" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.north() == new Matrix2x2( { a: 0., b: 0.
     * ...                                     , c: 0., d: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</north>
	<south public="1" get="inline" set="null" line="113" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.south() == new Matrix2x2( { a: 0., b: 0.
     * ...                                     , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</south>
	<west public="1" get="inline" set="null" line="126" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.west() == new Matrix2x2( { a: -1., b: 0.
     * ...                                    , c: 0.,  d: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</west>
	<east public="1" get="inline" set="null" line="139" static="1">
		<f a=""><x path="geom.matrix.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.east() == new Matrix2x2( { a: 1., b: 0.
     * ...                                    , c: 0., d: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</east>
	<scale public="1" get="inline" set="null" line="150" static="1">
		<f a="p">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.scale( new Matrix1x2( { x: 2., y: 2. } ) ) == new Matrix2x2( { a: 2., b: 0., c: 0.,  d: 2. } )
     * </code></pre>]]></haxe_doc>
	</scale>
	<rotation public="1" get="inline" set="null" line="160" static="1">
		<f a="alpha">
			<x path="Float"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
	</rotation>
	<transpose public="1" get="inline" set="null" line="170" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
	</transpose>
	<add public="1" get="inline" set="null" line="183" static="1">
		<f a="m0:m1">
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a + a == new Matrix2x2({ a: 2., b: 0., c: 0., d: 2. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<equal public="1" get="inline" set="null" line="197" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="215" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 1. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 4., d: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<sub public="1" get="inline" set="null" line="227" static="1">
		<f a="m0:m1">
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a - a == Matrix2x2.zero();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</sub>
	<multiplyValue public="1" get="inline" set="null" line="232" static="1">
		<f a="v:m">
			<x path="Float"/>
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyValue>
	<scaleMultiply public="1" get="inline" set="null" line="237" static="1">
		<f a="p:m">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply>
	<multiply public="1" get="inline" set="null" line="242" static="1">
		<f a="a2:b2">
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<multiplyPoint public="1" get="inline" set="null" line="247" static="1">
		<f a="this:p">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</multiplyPoint>
	<det public="1" get="inline" set="null" line="253" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</det>
	<inverse public="1" get="inline" set="null" line="257" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</inverse>
	<to3x3 public="1" get="inline" set="null" line="268" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to3x3>
	<to4x3 public="1" get="inline" set="null" line="274" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to4x3>
	<from3x3 public="1" get="inline" set="null" line="280" static="1">
		<f a="m3">
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</from3x3>
	<from4x3 public="1" get="inline" set="null" line="285" static="1">
		<f a="m4">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</from4x3>
	<fromArr public="1" get="inline" set="null" line="290" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="295" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromVec public="1" get="inline" set="null" line="310" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);
     * ... var c: Matrix2x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="324" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<setXY public="1" get="inline" set="null" line="345" static="1">
		<f a="this:x:y:v">
			<c path="geom.structure.Mat2x2"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a.setXY( 0, 0, 1. );
     * ... a.setXY( 1, 0, 2. );
     * ... a.setXY( 0, 1, 3. );
     * ... a.setXY( 1, 1, 4. );
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</setXY>
	<getXY public="1" get="inline" set="null" line="360" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat2x2"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a.getXY( 0, 0 ) == 1 && a.getXY( 1, 0 ) == 2 && a.getXY( 0, 1 ) == 3 && a.getXY( 1, 1 ) == 4;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</getXY>
</class></impl>
	</abstract>
	<class path="geom.matrix._Matrix2x2.Matrix2x2_Impl_" params="" file="src/geom/matrix/Matrix2x2.hx" private="1" module="geom.matrix.Matrix2x2">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="m">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<clone public="1" get="inline" set="null" line="9" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<create public="1" get="inline" set="null" line="14" static="1">
			<f a="this:a:b:c:d">
				<c path="geom.structure.Mat2x2"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</create>
		<zero public="1" get="inline" set="null" line="25" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.zero() == new Matrix2x2( { a: 0., b: 0., c: 0., d: 0. } )
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="35" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.unit() == new Matrix2x2( { a: 1., b: 0., c: 0., d: 1. } )
     * </code></pre>]]></haxe_doc>
		</unit>
		<topLeft public="1" get="inline" set="null" line="48" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.topLeft() == new Matrix2x2( { a: 1., b: 0.
     * ...                                       , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</topLeft>
		<topRight public="1" get="inline" set="null" line="61" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.topRight() == new Matrix2x2( { a: 1., b: 0.
     * ...                                        , c: 0., d: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</topRight>
		<bottomLeft public="1" get="inline" set="null" line="74" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.bottomLeft() == new Matrix2x2( { a: -1., b: 0.
     * ...                                          , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</bottomLeft>
		<bottomRight public="1" get="inline" set="null" line="87" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.bottomRight() == new Matrix2x2( { a: 1., b: 0.
     * ...                                           , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</bottomRight>
		<north public="1" get="inline" set="null" line="100" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.north() == new Matrix2x2( { a: 0., b: 0.
     * ...                                     , c: 0., d: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</north>
		<south public="1" get="inline" set="null" line="113" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.south() == new Matrix2x2( { a: 0., b: 0.
     * ...                                     , c: 0., d: -1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</south>
		<west public="1" get="inline" set="null" line="126" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.west() == new Matrix2x2( { a: -1., b: 0.
     * ...                                    , c: 0.,  d: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</west>
		<east public="1" get="inline" set="null" line="139" static="1">
			<f a=""><x path="geom.matrix.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix2x2.east() == new Matrix2x2( { a: 1., b: 0.
     * ...                                    , c: 0., d: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</east>
		<scale public="1" get="inline" set="null" line="150" static="1">
			<f a="p">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.scale( new Matrix1x2( { x: 2., y: 2. } ) ) == new Matrix2x2( { a: 2., b: 0., c: 0.,  d: 2. } )
     * </code></pre>]]></haxe_doc>
		</scale>
		<rotation public="1" get="inline" set="null" line="160" static="1">
			<f a="alpha">
				<x path="Float"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
		</rotation>
		<transpose public="1" get="inline" set="null" line="170" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
		</transpose>
		<add public="1" get="inline" set="null" line="183" static="1">
			<f a="m0:m1">
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a + a == new Matrix2x2({ a: 2., b: 0., c: 0., d: 2. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<equal public="1" get="inline" set="null" line="197" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="215" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 1. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 4., d: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<sub public="1" get="inline" set="null" line="227" static="1">
			<f a="m0:m1">
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a - a == Matrix2x2.zero();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</sub>
		<multiplyValue public="1" get="inline" set="null" line="232" static="1">
			<f a="v:m">
				<x path="Float"/>
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyValue>
		<scaleMultiply public="1" get="inline" set="null" line="237" static="1">
			<f a="p:m">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply>
		<multiply public="1" get="inline" set="null" line="242" static="1">
			<f a="a2:b2">
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<multiplyPoint public="1" get="inline" set="null" line="247" static="1">
			<f a="this:p">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</multiplyPoint>
		<det public="1" get="inline" set="null" line="253" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</det>
		<inverse public="1" get="inline" set="null" line="257" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</inverse>
		<to3x3 public="1" get="inline" set="null" line="268" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to3x3>
		<to4x3 public="1" get="inline" set="null" line="274" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to4x3>
		<from3x3 public="1" get="inline" set="null" line="280" static="1">
			<f a="m3">
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</from3x3>
		<from4x3 public="1" get="inline" set="null" line="285" static="1">
			<f a="m4">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</from4x3>
		<fromArr public="1" get="inline" set="null" line="290" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="295" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromVec public="1" get="inline" set="null" line="310" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);
     * ... var c: Matrix2x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="324" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix2x2.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 0., 0., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<setXY public="1" get="inline" set="null" line="345" static="1">
			<f a="this:x:y:v">
				<c path="geom.structure.Mat2x2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a.setXY( 0, 0, 1. );
     * ... a.setXY( 1, 0, 2. );
     * ... a.setXY( 0, 1, 3. );
     * ... a.setXY( 1, 1, 4. );
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</setXY>
		<getXY public="1" get="inline" set="null" line="360" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat2x2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a.getXY( 0, 0 ) == 1 && a.getXY( 1, 0 ) == 2 && a.getXY( 0, 1 ) == 3 && a.getXY( 1, 1 ) == 4;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</getXY>
	</class>
	<abstract path="geom.matrix.Matrix3x3" params="" file="src/geom/matrix/Matrix3x3.hx">
		<from>
			<icast><c path="geom.structure.Mat3x3"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="from2x2"><x path="geom.matrix.Matrix2x2"/></icast>
			<icast field="from4x3"><x path="geom.matrix.Matrix4x3"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="geom.structure.Mat3x3"/></this>
		<to>
			<icast><c path="geom.structure.Mat3x3"/></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="to2x2"><x path="geom.matrix.Matrix2x2"/></icast>
			<icast field="to4x3"><x path="geom.matrix.Matrix4x3"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<haxe_doc>![3x3](../bootstrap/img/matrix3x3.png)</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._Matrix3x3.Matrix3x3_Impl_" params="" file="src/geom/matrix/Matrix3x3.hx" private="1" module="geom.matrix.Matrix3x3">
	<_new public="1" get="inline" set="null" line="9" static="1">
		<f a="m">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="20" static="1">
		<f a=""><x path="geom.matrix.Matrix3x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix3x3.zero() == new Matrix3x3( { a: 0., b: 0., c: 0.
     * ...                                    , d: 0., e: 0., f: 0.
     * ...                                    , g: 0., h: 0., i: 0. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="35" static="1">
		<f a=""><x path="geom.matrix.Matrix3x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix3x3.unit() == new Matrix3x3({ a: 1., b: 0., c: 0.
     * ...                                  , d: 0., e: 1., f: 0.
     * ...                                  , g: 0., h: 0., i: 1. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<radianX public="1" get="inline" set="null" line="41" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></radianX>
	<rotateX public="1" get="inline" set="null" line="49" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateX>
	<radianY public="1" get="inline" set="null" line="51" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></radianY>
	<rotateY public="1" get="inline" set="null" line="59" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateY>
	<radianZ public="1" get="inline" set="null" line="61" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></radianZ>
	<rotateZ public="1" get="inline" set="null" line="69" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateZ>
	<rotate public="1" get="inline" set="null" line="71" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<xShear public="1" get="inline" set="null" line="73" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></xShear>
	<shearX public="1" get="inline" set="null" line="80" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</shearX>
	<yShear public="1" get="inline" set="null" line="82" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></yShear>
	<shearY public="1" get="inline" set="null" line="88" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</shearY>
	<xFlip public="1" get="inline" set="null" line="90" static="1"><f a=""><x path="geom.matrix.Matrix3x3"/></f></xFlip>
	<flipX public="1" get="inline" set="null" line="96" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</flipX>
	<yFlip public="1" get="inline" set="null" line="98" static="1"><f a=""><x path="geom.matrix.Matrix3x3"/></f></yFlip>
	<flipY public="1" get="inline" set="null" line="104" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</flipY>
	<xyFlip public="1" get="inline" set="null" line="106" static="1"><f a=""><x path="geom.matrix.Matrix3x3"/></f></xyFlip>
	<flipXY public="1" get="inline" set="null" line="112" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</flipXY>
	<sxyz public="1" get="inline" set="null" line="114" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></sxyz>
	<scaleXYZ public="1" get="inline" set="null" line="120" static="1">
		<f a="this:x:y:z">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleXYZ>
	<sx public="1" get="inline" set="null" line="122" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></sx>
	<scaleX public="1" get="inline" set="null" line="128" static="1">
		<f a="this:x">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleX>
	<sy public="1" get="inline" set="null" line="130" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></sy>
	<scaleY public="1" get="inline" set="null" line="136" static="1">
		<f a="this:y">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleY>
	<sz public="1" get="inline" set="null" line="138" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></sz>
	<scaleZ public="1" get="inline" set="null" line="144" static="1">
		<f a="this:z">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleZ>
	<scale public="1" get="inline" set="null" line="148" static="1">
		<f a="this:s">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scale>
	<scale2D public="1" get="inline" set="null" line="152" static="1">
		<f a="this:s">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scale2D>
	<tx public="1" get="inline" set="null" line="158" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></tx>
	<translateX public="1" get="inline" set="null" line="164" static="1">
		<f a="this:x">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateX>
	<ty public="1" get="inline" set="null" line="168" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></ty>
	<txy public="1" get="inline" set="null" line="174" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></txy>
	<translateXY public="1" get="inline" set="null" line="180" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateXY>
	<add public="1" get="inline" set="null" line="184" static="1">
		<f a="m0:m1">
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<subtract public="1" get="inline" set="null" line="190" static="1">
		<f a="m0:m1">
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtract>
	<scaleMultiply4D public="1" get="inline" set="null" line="196" static="1">
		<f a="p:m">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply4D>
	<scaleMultiply2D public="1" get="inline" set="null" line="202" static="1">
		<f a="p:m">
			<x path="geom.matrix.Matrix1x2"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply2D>
	<scaleMultiply3D public="1" get="inline" set="null" line="208" static="1">
		<f a="p:m">
			<t path="geom.tydef.Tmatrix1x3"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply3D>
	<multiplyV public="1" get="inline" set="null" line="214" static="1">
		<f a="v:m">
			<x path="Float"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyV>
	<multiply public="1" get="inline" set="null" line="220" static="1">
		<f a="p:q">
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<equal public="1" get="inline" set="null" line="236" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="259" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 8. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<cofactor public="1" get="inline" set="null" line="263" static="1">
		<f a="this:a:b:c:d">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cofactor>
	<det public="1" get="inline" set="null" line="267" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</det>
	<inverse public="1" get="inline" set="null" line="273" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</inverse>
	<fromArr public="1" get="inline" set="null" line="286" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="292" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<to2x2 public="1" get="inline" set="null" line="298" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to2x2>
	<to3D public="1" get="inline" set="null" line="304" static="1"><f a="m2">
	<x path="geom.matrix.Matrix2x2"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></to3D>
	<from2x2 public="1" get="inline" set="null" line="311" static="1">
		<f a="m2">
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from2x2>
	<to4x3 public="1" get="inline" set="null" line="317" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to4x3>
	<from4x3 public="1" get="inline" set="null" line="323" static="1">
		<f a="m4">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from4x3>
	<fromVec public="1" get="inline" set="null" line="329" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="335" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toVector>
	<setXY public="1" get="inline" set="null" line="343" static="1">
		<f a="this:x:y:v">
			<c path="geom.structure.Mat3x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setXY>
	<getXY public="1" get="inline" set="null" line="350" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat3x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getXY>
</class></impl>
	</abstract>
	<class path="geom.matrix._Matrix3x3.Matrix3x3_Impl_" params="" file="src/geom/matrix/Matrix3x3.hx" private="1" module="geom.matrix.Matrix3x3">
		<_new public="1" get="inline" set="null" line="9" static="1">
			<f a="m">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="20" static="1">
			<f a=""><x path="geom.matrix.Matrix3x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix3x3.zero() == new Matrix3x3( { a: 0., b: 0., c: 0.
     * ...                                    , d: 0., e: 0., f: 0.
     * ...                                    , g: 0., h: 0., i: 0. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="35" static="1">
			<f a=""><x path="geom.matrix.Matrix3x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix3x3.unit() == new Matrix3x3({ a: 1., b: 0., c: 0.
     * ...                                  , d: 0., e: 1., f: 0.
     * ...                                  , g: 0., h: 0., i: 1. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<radianX public="1" get="inline" set="null" line="41" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></radianX>
		<rotateX public="1" get="inline" set="null" line="49" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateX>
		<radianY public="1" get="inline" set="null" line="51" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></radianY>
		<rotateY public="1" get="inline" set="null" line="59" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateY>
		<radianZ public="1" get="inline" set="null" line="61" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></radianZ>
		<rotateZ public="1" get="inline" set="null" line="69" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateZ>
		<rotate public="1" get="inline" set="null" line="71" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<xShear public="1" get="inline" set="null" line="73" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></xShear>
		<shearX public="1" get="inline" set="null" line="80" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</shearX>
		<yShear public="1" get="inline" set="null" line="82" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></yShear>
		<shearY public="1" get="inline" set="null" line="88" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</shearY>
		<xFlip public="1" get="inline" set="null" line="90" static="1"><f a=""><x path="geom.matrix.Matrix3x3"/></f></xFlip>
		<flipX public="1" get="inline" set="null" line="96" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</flipX>
		<yFlip public="1" get="inline" set="null" line="98" static="1"><f a=""><x path="geom.matrix.Matrix3x3"/></f></yFlip>
		<flipY public="1" get="inline" set="null" line="104" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</flipY>
		<xyFlip public="1" get="inline" set="null" line="106" static="1"><f a=""><x path="geom.matrix.Matrix3x3"/></f></xyFlip>
		<flipXY public="1" get="inline" set="null" line="112" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</flipXY>
		<sxyz public="1" get="inline" set="null" line="114" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></sxyz>
		<scaleXYZ public="1" get="inline" set="null" line="120" static="1">
			<f a="this:x:y:z">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleXYZ>
		<sx public="1" get="inline" set="null" line="122" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></sx>
		<scaleX public="1" get="inline" set="null" line="128" static="1">
			<f a="this:x">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleX>
		<sy public="1" get="inline" set="null" line="130" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></sy>
		<scaleY public="1" get="inline" set="null" line="136" static="1">
			<f a="this:y">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleY>
		<sz public="1" get="inline" set="null" line="138" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></sz>
		<scaleZ public="1" get="inline" set="null" line="144" static="1">
			<f a="this:z">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleZ>
		<scale public="1" get="inline" set="null" line="148" static="1">
			<f a="this:s">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scale>
		<scale2D public="1" get="inline" set="null" line="152" static="1">
			<f a="this:s">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scale2D>
		<tx public="1" get="inline" set="null" line="158" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></tx>
		<translateX public="1" get="inline" set="null" line="164" static="1">
			<f a="this:x">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateX>
		<ty public="1" get="inline" set="null" line="168" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></ty>
		<txy public="1" get="inline" set="null" line="174" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></txy>
		<translateXY public="1" get="inline" set="null" line="180" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateXY>
		<add public="1" get="inline" set="null" line="184" static="1">
			<f a="m0:m1">
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<subtract public="1" get="inline" set="null" line="190" static="1">
			<f a="m0:m1">
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtract>
		<scaleMultiply4D public="1" get="inline" set="null" line="196" static="1">
			<f a="p:m">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply4D>
		<scaleMultiply2D public="1" get="inline" set="null" line="202" static="1">
			<f a="p:m">
				<x path="geom.matrix.Matrix1x2"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply2D>
		<scaleMultiply3D public="1" get="inline" set="null" line="208" static="1">
			<f a="p:m">
				<t path="geom.tydef.Tmatrix1x3"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply3D>
		<multiplyV public="1" get="inline" set="null" line="214" static="1">
			<f a="v:m">
				<x path="Float"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyV>
		<multiply public="1" get="inline" set="null" line="220" static="1">
			<f a="p:q">
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<equal public="1" get="inline" set="null" line="236" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="259" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 8. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<cofactor public="1" get="inline" set="null" line="263" static="1">
			<f a="this:a:b:c:d">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cofactor>
		<det public="1" get="inline" set="null" line="267" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</det>
		<inverse public="1" get="inline" set="null" line="273" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</inverse>
		<fromArr public="1" get="inline" set="null" line="286" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="292" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<to2x2 public="1" get="inline" set="null" line="298" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to2x2>
		<to3D public="1" get="inline" set="null" line="304" static="1"><f a="m2">
	<x path="geom.matrix.Matrix2x2"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></to3D>
		<from2x2 public="1" get="inline" set="null" line="311" static="1">
			<f a="m2">
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from2x2>
		<to4x3 public="1" get="inline" set="null" line="317" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to4x3>
		<from4x3 public="1" get="inline" set="null" line="323" static="1">
			<f a="m4">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from4x3>
		<fromVec public="1" get="inline" set="null" line="329" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="335" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toVector>
		<setXY public="1" get="inline" set="null" line="343" static="1">
			<f a="this:x:y:v">
				<c path="geom.structure.Mat3x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setXY>
		<getXY public="1" get="inline" set="null" line="350" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat3x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getXY>
	</class>
	<abstract path="geom.matrix.Matrix4x3" params="" file="src/geom/matrix/Matrix4x3.hx">
		<from>
			<icast><c path="geom.structure.Mat4x3"/></icast>
			<icast field="fromNumbered"><t path="geom.tydef.Tmatrix4x4numbered"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="from2x2"><x path="geom.matrix.Matrix2x2"/></icast>
			<icast field="from3x3"><x path="geom.matrix.Matrix3x3"/></icast>
			<icast field="fromWebGL"><c path="js.lib.Float32Array"/></icast>
		</from>
		<this><c path="geom.structure.Mat4x3"/></this>
		<to>
			<icast><c path="geom.structure.Mat4x3"/></icast>
			<icast field="toAffineMatrix"><a>
	<e9><x path="Float"/></e9>
	<e8><x path="Float"/></e8>
	<e6><x path="Float"/></e6>
	<e5><x path="Float"/></e5>
	<e4><x path="Float"/></e4>
	<e2><x path="Float"/></e2>
	<e14><x path="Float"/></e14>
	<e13><x path="Float"/></e13>
	<e12><x path="Float"/></e12>
	<e10><x path="Float"/></e10>
	<e1><x path="Float"/></e1>
	<e0><x path="Float"/></e0>
</a></icast>
			<icast field="toNumbered"><a>
	<_33><x path="Float"/></_33>
	<_32><x path="Float"/></_32>
	<_31><x path="Float"/></_31>
	<_30><x path="Float"/></_30>
	<_23><x path="Float"/></_23>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_13><x path="Float"/></_13>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_03><x path="Float"/></_03>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="to2x2"><x path="geom.matrix.Matrix2x2"/></icast>
			<icast field="to3x3"><x path="geom.matrix.Matrix3x3"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="toWebGL"><c path="js.lib.Float32Array"/></icast>
		</to>
		<haxe_doc>![4x3](../bootstrap/img/matrix4x3.png)</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._Matrix4x3.Matrix4x3_Impl_" params="" file="src/geom/matrix/Matrix4x3.hx" private="1" module="geom.matrix.Matrix4x3">
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="m">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="26" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.zero() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="41" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x3.unit() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<topLeft public="1" get="inline" set="null" line="56" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.topLeft() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                      , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                      , i: 0.,  j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</topLeft>
	<topRight public="1" get="inline" set="null" line="71" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.topRight() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                       , e: 0., f: 1., g: 0., h: 0.
     * ...                                       , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</topRight>
	<bottomLeft public="1" get="inline" set="null" line="86" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.bottomLeft() == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.
     * ...                                         , e: 0.,  f: -1., g: 0., h: 0.
     * ...                                         , i: 0.,  j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</bottomLeft>
	<bottomRight public="1" get="inline" set="null" line="101" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.bottomRight() == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.
     * ...                                          , e: 0., f: -1., g: 0., h: 0.
     * ...                                          , i: 0., j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</bottomRight>
	<north public="1" get="inline" set="null" line="116" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.north() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                    , e: 0., f: 1., g: 0., h: 0.
     * ...                                    , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</north>
	<south public="1" get="inline" set="null" line="131" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.south() == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.
     * ...                                    , e: 0., f: -1., g: 0., h: 0.
     * ...                                    , i: 0., j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</south>
	<west public="1" get="inline" set="null" line="146" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.west() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0.,  f: 0., g: 0., h: 0.
     * ...                                   , i: 0.,  j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</west>
	<east public="1" get="inline" set="null" line="161" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.east() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</east>
	<front public="1" get="inline" set="null" line="176" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.front() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                    , e: 0., f: 0., g: 0., h: 0.
     * ...                                    , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</front>
	<frontNorth public="1" get="inline" set="null" line="191" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontNorth() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                         , e: 0., f: 1., g: 0., h: 0.
     * ...                                         , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontNorth>
	<frontTopLeft public="1" get="inline" set="null" line="206" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontTopLeft() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                           , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                           , i: 0.,  j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontTopLeft>
	<frontTopRight public="1" get="inline" set="null" line="221" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontTopRight() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                            , e: 0., f: 1., g: 0., h: 0.
     * ...                                            , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontTopRight>
	<frontBottomLeft public="1" get="inline" set="null" line="236" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontBottomLeft() == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.
     * ...                                              , e: 0.,  f: -1., g: 0., h: 0.
     * ...                                              , i: 0.,  j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontBottomLeft>
	<frontBottomRight public="1" get="inline" set="null" line="251" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontBottomRight() == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.
     * ...                                               , e: 0., f: -1., g: 0., h: 0.
     * ...                                               , i: 0., j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontBottomRight>
	<frontSouth public="1" get="inline" set="null" line="266" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontSouth() == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.
     * ...                                         , e: 0., f: -1., g: 0., h: 0.
     * ...                                         , i: 0., j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontSouth>
	<frontWest public="1" get="inline" set="null" line="281" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontWest() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                        , e: 0.,  f: 0., g: 0., h: 0.
     * ...                                        , i: 0.,  j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontWest>
	<frontEast public="1" get="inline" set="null" line="296" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontEast() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                        , e: 0., f: 0., g: 0., h: 0.
     * ...                                        , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</frontEast>
	<back public="1" get="inline" set="null" line="311" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.back() == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.
     * ...                                   , e: 0., f: 0., g: 0.,  h: 0.
     * ...                                   , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</back>
	<backTopLeft public="1" get="inline" set="null" line="326" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backTopLeft() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                          , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                          , i: 0.,  j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backTopLeft>
	<backTopRight public="1" get="inline" set="null" line="341" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backTopRight() == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.
     * ...                                           , e: 0., f: 1., g: 0.,  h: 0.
     * ...                                           , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backTopRight>
	<backBottomLeft public="1" get="inline" set="null" line="356" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backBottomLeft() == new Matrix4x3({ a: -1., b: 0.,  c: 0.,  d: 0.
     * ...                                             , e: 0.,  f: -1., g: 0.,  h: 0.
     * ...                                             , i: 0.,  j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backBottomLeft>
	<backBottomRight public="1" get="inline" set="null" line="371" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backBottomRight() == new Matrix4x3({ a: 1., b: 0.,  c: 0.,  d: 0.
     * ...                                              , e: 0., f: -1., g: 0.,  h: 0.
     * ...                                              , i: 0., j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backBottomRight>
	<backNorth public="1" get="inline" set="null" line="386" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backNorth() == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.
     * ...                                        , e: 0., f: 1., g: 0.,  h: 0.
     * ...                                        , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backNorth>
	<backSouth public="1" get="inline" set="null" line="401" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backSouth() == new Matrix4x3({ a: 0., b: 0.,  c: 0.,  d: 0.
     * ...                                        , e: 0., f: -1., g: 0.,  h: 0.
     * ...                                        , i: 0., j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backSouth>
	<backWest public="1" get="inline" set="null" line="416" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backWest() == new Matrix4x3({ a: -1., b: 0., c: 0.,  d: 0.
     * ...                                       , e: 0.,  f: 0., g: 0.,  h: 0.
     * ...                                       , i: 0.,  j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backWest>
	<backEast public="1" get="inline" set="null" line="431" static="1">
		<f a=""><x path="geom.matrix.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backEast() == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.
     * ...                                       , e: 0., f: 0., g: 0.,  h: 0.
     * ...                                       , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</backEast>
	<radianX public="1" get="inline" set="null" line="437" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></radianX>
	<rotateX public="1" get="inline" set="null" line="444" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateX>
	<radianY public="1" get="inline" set="null" line="446" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></radianY>
	<rotateY public="1" get="inline" set="null" line="453" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateY>
	<radianZ public="1" get="inline" set="null" line="455" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></radianZ>
	<rotateZ public="1" get="inline" set="null" line="462" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateZ>
	<sxyz public="1" get="inline" set="null" line="464" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></sxyz>
	<scaleXYZ public="1" get="inline" set="null" line="470" static="1">
		<f a="this:x:y:z">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleXYZ>
	<sx public="1" get="inline" set="null" line="472" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></sx>
	<scaleX public="1" get="inline" set="null" line="478" static="1">
		<f a="this:x">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleX>
	<sy public="1" get="inline" set="null" line="480" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></sy>
	<scaleY public="1" get="inline" set="null" line="486" static="1">
		<f a="this:y">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleY>
	<sz public="1" get="inline" set="null" line="488" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></sz>
	<scaleZ public="1" get="inline" set="null" line="494" static="1">
		<f a="this:z">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleZ>
	<scale public="1" get="inline" set="null" line="496" static="1">
		<f a="this:s">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scale>
	<txyz public="1" get="inline" set="null" line="498" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></txyz>
	<translateXYZ public="1" get="inline" set="null" line="504" static="1">
		<f a="this:x:y:z">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateXYZ>
	<tx public="1" get="inline" set="null" line="506" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></tx>
	<translateX public="1" get="inline" set="null" line="512" static="1">
		<f a="this:x">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateX>
	<ty public="1" get="inline" set="null" line="514" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></ty>
	<translateY public="1" get="inline" set="null" line="520" static="1">
		<f a="this:y">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateY>
	<tz public="1" get="inline" set="null" line="522" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></tz>
	<translateZ public="1" get="inline" set="null" line="528" static="1">
		<f a="this:z">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateZ>
	<txy public="1" get="inline" set="null" line="530" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></txy>
	<translateXY public="1" get="inline" set="null" line="536" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateXY>
	<equal public="1" get="inline" set="null" line="547" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="573" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:11. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<add public="1" get="inline" set="null" line="586" static="1">
		<f a="m0:m1">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit();
     * ... a + a == new Matrix4x3( { a: 2., b: 0., c: 0., d: 0.
     * ...                         , e: 0., f: 2., g: 0., h: 0.
     * ...                         , i: 0., j: 0., k: 2., l: 0. } ); }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<sub public="1" get="inline" set="null" line="599" static="1">
		<f a="m0:m1">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit();
     * ... a - a == Matrix4x3.zero(); }) == true
     * </code></pre>]]></haxe_doc>
	</sub>
	<scaleMultiply1 public="1" get="inline" set="null" line="605" static="1">
		<f a="p:m">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply1>
	<scaleMultiply2 public="1" get="inline" set="null" line="611" static="1">
		<f a="m:p">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply2>
	<scaleDivide public="1" get="inline" set="null" line="617" static="1">
		<f a="m:p">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</scaleDivide>
	<multiply public="1" get="inline" set="null" line="624" static="1">
		<f a="r:s">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<cofactor public="1" get="inline" set="null" line="636" static="1">
		<f a="this:a:b:c:d:e:f:g:h:i">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cofactor>
	<det public="1" get="inline" set="null" line="642" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</det>
	<inverse public="1" get="inline" set="null" line="659" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</inverse>
	<orientation public="1" get="inline" set="null" line="690" static="1"><f a="pos:dir:up">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></orientation>
	<applyRotation public="1" get="inline" set="null" line="697" static="1">
		<f a="this:p">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</applyRotation>
	<applyInverseRotation public="1" get="inline" set="null" line="704" static="1">
		<f a="this:p">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</applyInverseRotation>
	<orthonormalizeRotation public="1" get="inline" set="null" line="711" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<c path="geom.structure.Mat4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</orthonormalizeRotation>
	<makeViewFromOrientation public="1" get="inline" set="null" line="721" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</makeViewFromOrientation>
	<invertNormalizedRotation public="1" get="inline" set="null" line="728" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</invertNormalizedRotation>
	<invertNormalized public="1" get="inline" set="null" line="734" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</invertNormalized>
	<toAffineMatrix public="1" get="inline" set="null" line="742" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<t path="geom.tydef.TAffineMatrix"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toAffineMatrix>
	<fromNumbered public="1" get="inline" set="null" line="749" static="1">
		<f a="m">
			<t path="geom.tydef.Tmatrix4x4numbered"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromNumbered>
	<toNumbered public="1" get="inline" set="null" line="756" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<t path="geom.tydef.Tmatrix4x4numbered"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toNumbered>
	<fromArr public="1" get="inline" set="null" line="764" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="771" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromVec public="1" get="inline" set="null" line="778" static="1">
		<f a="v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromVec>
	<from2x2 public="1" get="inline" set="null" line="785" static="1">
		<f a="m2">
			<x path="geom.matrix.Matrix2x2"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from2x2>
	<to2x2 public="1" get="inline" set="null" line="792" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix2x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to2x2>
	<from3x3 public="1" get="inline" set="null" line="798" static="1">
		<f a="m3">
			<x path="geom.matrix.Matrix3x3"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from3x3>
	<to3x3 public="1" get="inline" set="null" line="805" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.matrix.Matrix3x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to3x3>
	<toVector public="1" get="inline" set="null" line="812" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toVector>
	<setXY public="1" get="inline" set="null" line="820" static="1">
		<f a="this:x:y:v">
			<c path="geom.structure.Mat4x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setXY>
	<getXY public="1" get="inline" set="null" line="827" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat4x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getXY>
	<toWebGL public="1" get="inline" set="null" line="836" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<c path="js.lib.Float32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toWebGL>
	<fromWebGL public="1" get="inline" set="null" line="844" static="1">
		<f a="arr">
			<c path="js.lib.Float32Array"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromWebGL>
	<updateWebGL public="1" get="inline" set="null" line="850" static="1">
		<f a="this:arr">
			<c path="geom.structure.Mat4x3"/>
			<c path="js.lib.Float32Array"/>
			<c path="js.lib.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateWebGL>
	<pretty public="1" get="inline" set="null" line="861" static="1">
		<f a="this:prec">
			<c path="geom.structure.Mat4x3"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</pretty>
	<floatToStringPrecision public="1" set="method" line="919" static="1"><f a="n:prec">
	<x path="Float"/>
	<x path="Int"/>
	<c path="String"/>
</f></floatToStringPrecision>
</class></impl>
	</abstract>
	<class path="geom.matrix._Matrix4x3.Matrix4x3_Impl_" params="" file="src/geom/matrix/Matrix4x3.hx" private="1" module="geom.matrix.Matrix4x3">
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="m">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="26" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.zero() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="41" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x3.unit() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<topLeft public="1" get="inline" set="null" line="56" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.topLeft() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                      , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                      , i: 0.,  j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</topLeft>
		<topRight public="1" get="inline" set="null" line="71" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.topRight() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                       , e: 0., f: 1., g: 0., h: 0.
     * ...                                       , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</topRight>
		<bottomLeft public="1" get="inline" set="null" line="86" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.bottomLeft() == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.
     * ...                                         , e: 0.,  f: -1., g: 0., h: 0.
     * ...                                         , i: 0.,  j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</bottomLeft>
		<bottomRight public="1" get="inline" set="null" line="101" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.bottomRight() == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.
     * ...                                          , e: 0., f: -1., g: 0., h: 0.
     * ...                                          , i: 0., j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</bottomRight>
		<north public="1" get="inline" set="null" line="116" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.north() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                    , e: 0., f: 1., g: 0., h: 0.
     * ...                                    , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</north>
		<south public="1" get="inline" set="null" line="131" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.south() == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.
     * ...                                    , e: 0., f: -1., g: 0., h: 0.
     * ...                                    , i: 0., j: 0.,  k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</south>
		<west public="1" get="inline" set="null" line="146" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.west() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0.,  f: 0., g: 0., h: 0.
     * ...                                   , i: 0.,  j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</west>
		<east public="1" get="inline" set="null" line="161" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.east() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</east>
		<front public="1" get="inline" set="null" line="176" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.front() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                    , e: 0., f: 0., g: 0., h: 0.
     * ...                                    , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</front>
		<frontNorth public="1" get="inline" set="null" line="191" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontNorth() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                         , e: 0., f: 1., g: 0., h: 0.
     * ...                                         , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontNorth>
		<frontTopLeft public="1" get="inline" set="null" line="206" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontTopLeft() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                           , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                           , i: 0.,  j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontTopLeft>
		<frontTopRight public="1" get="inline" set="null" line="221" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontTopRight() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                            , e: 0., f: 1., g: 0., h: 0.
     * ...                                            , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontTopRight>
		<frontBottomLeft public="1" get="inline" set="null" line="236" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontBottomLeft() == new Matrix4x3({ a: -1., b: 0.,  c: 0., d: 0.
     * ...                                              , e: 0.,  f: -1., g: 0., h: 0.
     * ...                                              , i: 0.,  j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontBottomLeft>
		<frontBottomRight public="1" get="inline" set="null" line="251" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontBottomRight() == new Matrix4x3({ a: 1., b: 0.,  c: 0., d: 0.
     * ...                                               , e: 0., f: -1., g: 0., h: 0.
     * ...                                               , i: 0., j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontBottomRight>
		<frontSouth public="1" get="inline" set="null" line="266" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontSouth() == new Matrix4x3({ a: 0., b: 0.,  c: 0., d: 0.
     * ...                                         , e: 0., f: -1., g: 0., h: 0.
     * ...                                         , i: 0., j: 0.,  k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontSouth>
		<frontWest public="1" get="inline" set="null" line="281" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontWest() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                        , e: 0.,  f: 0., g: 0., h: 0.
     * ...                                        , i: 0.,  j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontWest>
		<frontEast public="1" get="inline" set="null" line="296" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.frontEast() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                        , e: 0., f: 0., g: 0., h: 0.
     * ...                                        , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</frontEast>
		<back public="1" get="inline" set="null" line="311" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.back() == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.
     * ...                                   , e: 0., f: 0., g: 0.,  h: 0.
     * ...                                   , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</back>
		<backTopLeft public="1" get="inline" set="null" line="326" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backTopLeft() == new Matrix4x3({ a: -1., b: 0., c: 0., d: 0.
     * ...                                          , e: 0.,  f: 1., g: 0., h: 0.
     * ...                                          , i: 0.,  j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backTopLeft>
		<backTopRight public="1" get="inline" set="null" line="341" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backTopRight() == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.
     * ...                                           , e: 0., f: 1., g: 0.,  h: 0.
     * ...                                           , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backTopRight>
		<backBottomLeft public="1" get="inline" set="null" line="356" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backBottomLeft() == new Matrix4x3({ a: -1., b: 0.,  c: 0.,  d: 0.
     * ...                                             , e: 0.,  f: -1., g: 0.,  h: 0.
     * ...                                             , i: 0.,  j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backBottomLeft>
		<backBottomRight public="1" get="inline" set="null" line="371" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backBottomRight() == new Matrix4x3({ a: 1., b: 0.,  c: 0.,  d: 0.
     * ...                                              , e: 0., f: -1., g: 0.,  h: 0.
     * ...                                              , i: 0., j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backBottomRight>
		<backNorth public="1" get="inline" set="null" line="386" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backNorth() == new Matrix4x3({ a: 0., b: 0., c: 0.,  d: 0.
     * ...                                        , e: 0., f: 1., g: 0.,  h: 0.
     * ...                                        , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backNorth>
		<backSouth public="1" get="inline" set="null" line="401" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backSouth() == new Matrix4x3({ a: 0., b: 0.,  c: 0.,  d: 0.
     * ...                                        , e: 0., f: -1., g: 0.,  h: 0.
     * ...                                        , i: 0., j: 0.,  k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backSouth>
		<backWest public="1" get="inline" set="null" line="416" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backWest() == new Matrix4x3({ a: -1., b: 0., c: 0.,  d: 0.
     * ...                                       , e: 0.,  f: 0., g: 0.,  h: 0.
     * ...                                       , i: 0.,  j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backWest>
		<backEast public="1" get="inline" set="null" line="431" static="1">
			<f a=""><x path="geom.matrix.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.backEast() == new Matrix4x3({ a: 1., b: 0., c: 0.,  d: 0.
     * ...                                       , e: 0., f: 0., g: 0.,  h: 0.
     * ...                                       , i: 0., j: 0., k: -1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</backEast>
		<radianX public="1" get="inline" set="null" line="437" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></radianX>
		<rotateX public="1" get="inline" set="null" line="444" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateX>
		<radianY public="1" get="inline" set="null" line="446" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></radianY>
		<rotateY public="1" get="inline" set="null" line="453" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateY>
		<radianZ public="1" get="inline" set="null" line="455" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></radianZ>
		<rotateZ public="1" get="inline" set="null" line="462" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateZ>
		<sxyz public="1" get="inline" set="null" line="464" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></sxyz>
		<scaleXYZ public="1" get="inline" set="null" line="470" static="1">
			<f a="this:x:y:z">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleXYZ>
		<sx public="1" get="inline" set="null" line="472" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></sx>
		<scaleX public="1" get="inline" set="null" line="478" static="1">
			<f a="this:x">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleX>
		<sy public="1" get="inline" set="null" line="480" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></sy>
		<scaleY public="1" get="inline" set="null" line="486" static="1">
			<f a="this:y">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleY>
		<sz public="1" get="inline" set="null" line="488" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></sz>
		<scaleZ public="1" get="inline" set="null" line="494" static="1">
			<f a="this:z">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleZ>
		<scale public="1" get="inline" set="null" line="496" static="1">
			<f a="this:s">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scale>
		<txyz public="1" get="inline" set="null" line="498" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></txyz>
		<translateXYZ public="1" get="inline" set="null" line="504" static="1">
			<f a="this:x:y:z">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateXYZ>
		<tx public="1" get="inline" set="null" line="506" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></tx>
		<translateX public="1" get="inline" set="null" line="512" static="1">
			<f a="this:x">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateX>
		<ty public="1" get="inline" set="null" line="514" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></ty>
		<translateY public="1" get="inline" set="null" line="520" static="1">
			<f a="this:y">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateY>
		<tz public="1" get="inline" set="null" line="522" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></tz>
		<translateZ public="1" get="inline" set="null" line="528" static="1">
			<f a="this:z">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateZ>
		<txy public="1" get="inline" set="null" line="530" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></txy>
		<translateXY public="1" get="inline" set="null" line="536" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateXY>
		<equal public="1" get="inline" set="null" line="547" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="573" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:11. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<add public="1" get="inline" set="null" line="586" static="1">
			<f a="m0:m1">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit();
     * ... a + a == new Matrix4x3( { a: 2., b: 0., c: 0., d: 0.
     * ...                         , e: 0., f: 2., g: 0., h: 0.
     * ...                         , i: 0., j: 0., k: 2., l: 0. } ); }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<sub public="1" get="inline" set="null" line="599" static="1">
			<f a="m0:m1">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit();
     * ... a - a == Matrix4x3.zero(); }) == true
     * </code></pre>]]></haxe_doc>
		</sub>
		<scaleMultiply1 public="1" get="inline" set="null" line="605" static="1">
			<f a="p:m">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply1>
		<scaleMultiply2 public="1" get="inline" set="null" line="611" static="1">
			<f a="m:p">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply2>
		<scaleDivide public="1" get="inline" set="null" line="617" static="1">
			<f a="m:p">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</scaleDivide>
		<multiply public="1" get="inline" set="null" line="624" static="1">
			<f a="r:s">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<cofactor public="1" get="inline" set="null" line="636" static="1">
			<f a="this:a:b:c:d:e:f:g:h:i">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cofactor>
		<det public="1" get="inline" set="null" line="642" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</det>
		<inverse public="1" get="inline" set="null" line="659" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</inverse>
		<orientation public="1" get="inline" set="null" line="690" static="1"><f a="pos:dir:up">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></orientation>
		<applyRotation public="1" get="inline" set="null" line="697" static="1">
			<f a="this:p">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</applyRotation>
		<applyInverseRotation public="1" get="inline" set="null" line="704" static="1">
			<f a="this:p">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</applyInverseRotation>
		<orthonormalizeRotation public="1" get="inline" set="null" line="711" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<c path="geom.structure.Mat4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</orthonormalizeRotation>
		<makeViewFromOrientation public="1" get="inline" set="null" line="721" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</makeViewFromOrientation>
		<invertNormalizedRotation public="1" get="inline" set="null" line="728" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</invertNormalizedRotation>
		<invertNormalized public="1" get="inline" set="null" line="734" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</invertNormalized>
		<toAffineMatrix public="1" get="inline" set="null" line="742" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<t path="geom.tydef.TAffineMatrix"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toAffineMatrix>
		<fromNumbered public="1" get="inline" set="null" line="749" static="1">
			<f a="m">
				<t path="geom.tydef.Tmatrix4x4numbered"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromNumbered>
		<toNumbered public="1" get="inline" set="null" line="756" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<t path="geom.tydef.Tmatrix4x4numbered"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toNumbered>
		<fromArr public="1" get="inline" set="null" line="764" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="771" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromVec public="1" get="inline" set="null" line="778" static="1">
			<f a="v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromVec>
		<from2x2 public="1" get="inline" set="null" line="785" static="1">
			<f a="m2">
				<x path="geom.matrix.Matrix2x2"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from2x2>
		<to2x2 public="1" get="inline" set="null" line="792" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix2x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to2x2>
		<from3x3 public="1" get="inline" set="null" line="798" static="1">
			<f a="m3">
				<x path="geom.matrix.Matrix3x3"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from3x3>
		<to3x3 public="1" get="inline" set="null" line="805" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.matrix.Matrix3x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to3x3>
		<toVector public="1" get="inline" set="null" line="812" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toVector>
		<setXY public="1" get="inline" set="null" line="820" static="1">
			<f a="this:x:y:v">
				<c path="geom.structure.Mat4x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setXY>
		<getXY public="1" get="inline" set="null" line="827" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat4x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getXY>
		<toWebGL public="1" get="inline" set="null" line="836" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toWebGL>
		<fromWebGL public="1" get="inline" set="null" line="844" static="1">
			<f a="arr">
				<c path="js.lib.Float32Array"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromWebGL>
		<updateWebGL public="1" get="inline" set="null" line="850" static="1">
			<f a="this:arr">
				<c path="geom.structure.Mat4x3"/>
				<c path="js.lib.Float32Array"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateWebGL>
		<pretty public="1" get="inline" set="null" line="861" static="1">
			<f a="this:prec">
				<c path="geom.structure.Mat4x3"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</pretty>
		<floatToStringPrecision public="1" set="method" line="919" static="1"><f a="n:prec">
	<x path="Float"/>
	<x path="Int"/>
	<c path="String"/>
</f></floatToStringPrecision>
	</class>
	<abstract path="geom.matrix.Matrix4x4" params="" file="src/geom/matrix/Matrix4x4.hx">
		<from>
			<icast><c path="geom.structure.Mat4x4"/></icast>
			<icast field="matrix4x3"><x path="geom.matrix.Matrix4x3"/></icast>
			<icast field="fromWebGL"><c path="js.lib.Float32Array"/></icast>
		</from>
		<this><c path="geom.structure.Mat4x4"/></this>
		<to>
			<icast><c path="geom.structure.Mat4x4"/></icast>
			<icast field="toWebGL"><c path="js.lib.Float32Array"/></icast>
		</to>
		<haxe_doc>![4x4](../bootstrap/img/matrix4x4.png)</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._Matrix4x4.Matrix4x4_Impl_" params="" file="src/geom/matrix/Matrix4x4.hx" private="1" module="geom.matrix.Matrix4x4">
	<_new public="1" get="inline" set="null" line="15" static="1">
		<f a="m">
			<c path="geom.structure.Mat4x4"/>
			<x path="geom.matrix.Matrix4x4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="27" static="1">
		<f a=""><x path="geom.matrix.Matrix4x4"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x4.zero() == new Matrix4x4({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0.
     * ...                                   , m: 0., n: 0., o: 0., p: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="44" static="1">
		<f a=""><x path="geom.matrix.Matrix4x4"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x4.unit() == new Matrix4x4({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0.
     * ...                                   , m: 0., n: 0., o: 0., p: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<equal public="1" get="inline" set="null" line="61" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix4x4"/>
			<x path="geom.matrix.Matrix4x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });
     * ... var b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="91" static="1">
		<f a="a:b">
			<x path="geom.matrix.Matrix4x4"/>
			<x path="geom.matrix.Matrix4x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. , m:13.,n:14.,o:15.,p:16.});
     * ... var b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:15. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<multiply public="1" get="inline" set="null" line="96" static="1">
		<f a="r:s">
			<x path="geom.matrix.Matrix4x4"/>
			<x path="geom.matrix.Matrix4x4"/>
			<x path="geom.matrix.Matrix4x4"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<delta public="1" get="inline" set="null" line="116" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat4x4"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Matrix4x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</delta>
	<matrix4x3 public="1" get="inline" set="null" line="126" static="1">
		<f a="m">
			<x path="geom.matrix.Matrix4x3"/>
			<x path="geom.matrix.Matrix4x4"/>
		</f>
		<meta><m n=":from"/></meta>
	</matrix4x3>
	<toWebGL public="1" get="inline" set="null" line="137" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x4"/>
			<c path="js.lib.Float32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toWebGL>
	<fromWebGL public="1" get="inline" set="null" line="145" static="1">
		<f a="arr">
			<c path="js.lib.Float32Array"/>
			<x path="geom.matrix.Matrix4x4"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromWebGL>
	<updateWebGL public="1" get="inline" set="null" line="152" static="1">
		<f a="this:arr">
			<c path="geom.structure.Mat4x4"/>
			<c path="js.lib.Float32Array"/>
			<c path="js.lib.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</updateWebGL>
	<pretty public="1" get="inline" set="null" line="163" static="1">
		<f a="this:prec">
			<c path="geom.structure.Mat4x4"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</pretty>
	<floatToStringPrecision public="1" set="method" line="221" static="1"><f a="n:prec">
	<x path="Float"/>
	<x path="Int"/>
	<c path="String"/>
</f></floatToStringPrecision>
</class></impl>
	</abstract>
	<class path="geom.matrix._Matrix4x4.Matrix4x4_Impl_" params="" file="src/geom/matrix/Matrix4x4.hx" private="1" module="geom.matrix.Matrix4x4">
		<_new public="1" get="inline" set="null" line="15" static="1">
			<f a="m">
				<c path="geom.structure.Mat4x4"/>
				<x path="geom.matrix.Matrix4x4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="27" static="1">
			<f a=""><x path="geom.matrix.Matrix4x4"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x4.zero() == new Matrix4x4({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0.
     * ...                                   , m: 0., n: 0., o: 0., p: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="44" static="1">
			<f a=""><x path="geom.matrix.Matrix4x4"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x4.unit() == new Matrix4x4({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0.
     * ...                                   , m: 0., n: 0., o: 0., p: 1. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<equal public="1" get="inline" set="null" line="61" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix4x4"/>
				<x path="geom.matrix.Matrix4x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });
     * ... var b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:16. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="91" static="1">
			<f a="a:b">
				<x path="geom.matrix.Matrix4x4"/>
				<x path="geom.matrix.Matrix4x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. , m:13.,n:14.,o:15.,p:16.});
     * ... var b = new Matrix4x4({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12., m:13.,n:14.,o:15.,p:15. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<multiply public="1" get="inline" set="null" line="96" static="1">
			<f a="r:s">
				<x path="geom.matrix.Matrix4x4"/>
				<x path="geom.matrix.Matrix4x4"/>
				<x path="geom.matrix.Matrix4x4"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<delta public="1" get="inline" set="null" line="116" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat4x4"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</delta>
		<matrix4x3 public="1" get="inline" set="null" line="126" static="1">
			<f a="m">
				<x path="geom.matrix.Matrix4x3"/>
				<x path="geom.matrix.Matrix4x4"/>
			</f>
			<meta><m n=":from"/></meta>
		</matrix4x3>
		<toWebGL public="1" get="inline" set="null" line="137" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x4"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toWebGL>
		<fromWebGL public="1" get="inline" set="null" line="145" static="1">
			<f a="arr">
				<c path="js.lib.Float32Array"/>
				<x path="geom.matrix.Matrix4x4"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromWebGL>
		<updateWebGL public="1" get="inline" set="null" line="152" static="1">
			<f a="this:arr">
				<c path="geom.structure.Mat4x4"/>
				<c path="js.lib.Float32Array"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</updateWebGL>
		<pretty public="1" get="inline" set="null" line="163" static="1">
			<f a="this:prec">
				<c path="geom.structure.Mat4x4"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</pretty>
		<floatToStringPrecision public="1" set="method" line="221" static="1"><f a="n:prec">
	<x path="Float"/>
	<x path="Int"/>
	<c path="String"/>
</f></floatToStringPrecision>
	</class>
	<class path="geom.matrix.Projection" params="" file="src/geom/matrix/Projection.hx">
		<perspective public="1" get="inline" set="null" line="6" static="1">
			<f a="?angleOfView:?near:?far" v="1.57079632679:0.1:100.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Matrix4x4"/>
			</f>
			<meta><m n=":value"><e>{ far : 100., near : 0.1, angleOfView : 1.57079632679 }</e></m></meta>
			<haxe_doc>@:angleOfView preset to Math.PI/2;</haxe_doc>
		</perspective>
		<perspectiveAspect public="1" get="inline" set="null" line="17" static="1"><f a="fov:aspectRatio:near:far">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x4"/>
</f></perspectiveAspect>
		<projectionWindow public="1" get="inline" set="null" line="34" static="1"><f a="wid:hi:fov">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix4x3"/>
</f></projectionWindow>
	</class>
	<abstract path="geom.matrix.Quaternion" params="" file="src/geom/matrix/Quaternion.hx">
		<from>
			<icast><c path="geom.structure.Mat1x4"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="fromArray"><c path="Array"><x path="Float"/></c></icast>
		</from>
		<this><c path="geom.structure.Mat1x4"/></this>
		<to>
			<icast><c path="geom.structure.Mat1x4"/></icast>
			<icast field="toMatrix4x1"><x path="geom.matrix.Matrix1x4"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="toMatrix4x3"><x path="geom.matrix.Matrix4x3"/></icast>
		</to>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.matrix._Quaternion.Quaternion_Impl_" params="" file="src/geom/matrix/Quaternion.hx" private="1" module="geom.matrix.Quaternion">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a="m">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="geom.matrix.Quaternion"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zero() == new Quaternion({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<zeroNormal public="1" get="inline" set="null" line="26" static="1">
		<f a=""><x path="geom.matrix.Quaternion"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zeroNormal() == new Quaternion({ x: 0., y: 0., z: 0., w: 1. })
     * </code></pre>]]></haxe_doc>
	</zeroNormal>
	<unit public="1" get="inline" set="null" line="35" static="1">
		<f a=""><x path="geom.matrix.Quaternion"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.unit() == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<unitNormal public="1" get="inline" set="null" line="47" static="1">
		<f a=""><x path="geom.matrix.Quaternion"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var q = new Quaternion( { x: 1., y: 1., z: 1., w: 1. } );
     * ... Quaternion.unit().normalize() == q.normalize();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unitNormal>
	<clone public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<xRotate public="1" get="inline" set="null" line="57" static="1"><f a="angle">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></xRotate>
	<yRotate public="1" get="inline" set="null" line="62" static="1"><f a="angle">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></yRotate>
	<zRotate public="1" get="inline" set="null" line="67" static="1"><f a="angle">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></zRotate>
	<xPIhalf public="1" get="inline" set="null" line="72" static="1"><f a=""><x path="geom.matrix.Quaternion"/></f></xPIhalf>
	<yPIhalf public="1" get="inline" set="null" line="77" static="1"><f a=""><x path="geom.matrix.Quaternion"/></f></yPIhalf>
	<zPIhalf public="1" get="inline" set="null" line="82" static="1"><f a=""><x path="geom.matrix.Quaternion"/></f></zPIhalf>
	<createFromAxisAngle public="1" get="inline" set="null" line="89" static="1"><f a="x:y:z:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></createFromAxisAngle>
	<dot public="1" get="inline" set="null" line="104" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</dot>
	<identity public="1" get="inline" set="null" line="126" static="1">
		<f a="out">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.identity( Quaternion.zero() ) == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</identity>
	<toMatrix4x1 public="1" get="inline" set="null" line="134" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toMatrix4x1>
	<copy public="1" get="inline" set="null" line="147" static="1">
		<f a="pin:pout">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Quaternion.zero();
     * ... var c = Quaternion.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
	</copy>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</magnitude>
	<get_magnitude get="inline" set="null" line="156" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_magnitude>
	<set_magnitude get="inline" set="null" line="160" static="1">
		<f a="this:length">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_magnitude>
	<dotProduct public="1" get="inline" set="null" line="174" static="1"><f a="a:b">
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Quaternion"/>
	<x path="Float"/>
</f></dotProduct>
	<equal public="1" get="inline" set="null" line="186" static="1">
		<f a="a:b">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<magnitudeSquared public="1" get="inline" set="null" line="209" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</magnitudeSquared>
	<add public="1" get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... a + a == new Quaternion({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... a - a == Quaternion.zero(); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<scaleMultiply public="1" get="inline" set="null" line="237" static="1">
		<f a="a:v">
			<x path="geom.matrix.Quaternion"/>
			<x path="Float"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</scaleMultiply>
	<divide public="1" get="inline" set="null" line="241" static="1">
		<f a="a:v">
			<x path="geom.matrix.Quaternion"/>
			<x path="Float"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<divide2 public="1" get="inline" set="null" line="245" static="1">
		<f a="v:a">
			<x path="Float"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide2>
	<conjugate public="1" get="inline" set="null" line="257" static="1">
		<f a="a">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<negate public="1" get="inline" set="null" line="273" static="1">
		<f a="a">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<multiplyQ public="1" get="inline" set="null" line="281" static="1">
		<f a="q1:q2">
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyQ>
	<cross public="1" get="inline" set="null" line="288" static="1">
		<f a="this:v">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cross>
	<fromYawPitchRoll public="1" get="inline" set="null" line="301" static="1">
		<f a="yaw:pitch:roll">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<haxe_doc>* used to set yaw pitch and roll ( very similar to set euler ) but static.
     *     x:  Pitch
     *     y:  Yaw
     *     z:  Roll</haxe_doc>
	</fromYawPitchRoll>
	<fromAxisAngle public="1" get="inline" set="null" line="319" static="1"><f a="theta:axis">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Quaternion"/>
</f></fromAxisAngle>
	<lerp public="1" get="inline" set="null" line="326" static="1"><f a="a:b:t">
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Quaternion"/>
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></lerp>
	<euler public="1" get="accessor" set="accessor" static="1">
		<x path="geom.matrix.Quaternion"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* input/output euler as rotation angles around x, y, z axis ( as faux Quaternion ), 
     * but set /gets internally as the Quaternion value</haxe_doc>
	</euler>
	<set_euler get="inline" set="null" line="337" static="1">
		<f a="this:a">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_euler>
	<get_euler get="inline" set="null" line="354" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_euler>
	<slerp public="1" set="method" line="364" static="1">
		<f a="this:v1:t">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Quaternion"/>
			<x path="Float"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</slerp>
	<scalarReal public="1" get="inline" set="null" line="407" static="1"><f a="s">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></scalarReal>
	<scaled public="1" get="inline" set="null" line="412" static="1">
		<f a="this:s">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaled>
	<normalize public="1" get="inline" set="null" line="417" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</normalize>
	<fromVec public="1" get="inline" set="null" line="434" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Quaternion = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="448" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<fromArray public="1" get="inline" set="null" line="465" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.matrix.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: Quaternion = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromArray>
	<toArray public="1" get="inline" set="null" line="477" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
	</toArray>
	<toMatrix4x3 public="1" get="inline" set="null" line="483" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.matrix.Matrix4x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toMatrix4x3>
</class></impl>
	</abstract>
	<class path="geom.matrix._Quaternion.Quaternion_Impl_" params="" file="src/geom/matrix/Quaternion.hx" private="1" module="geom.matrix.Quaternion">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a="m">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="geom.matrix.Quaternion"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zero() == new Quaternion({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<zeroNormal public="1" get="inline" set="null" line="26" static="1">
			<f a=""><x path="geom.matrix.Quaternion"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zeroNormal() == new Quaternion({ x: 0., y: 0., z: 0., w: 1. })
     * </code></pre>]]></haxe_doc>
		</zeroNormal>
		<unit public="1" get="inline" set="null" line="35" static="1">
			<f a=""><x path="geom.matrix.Quaternion"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.unit() == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<unitNormal public="1" get="inline" set="null" line="47" static="1">
			<f a=""><x path="geom.matrix.Quaternion"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var q = new Quaternion( { x: 1., y: 1., z: 1., w: 1. } );
     * ... Quaternion.unit().normalize() == q.normalize();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unitNormal>
		<clone public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<xRotate public="1" get="inline" set="null" line="57" static="1"><f a="angle">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></xRotate>
		<yRotate public="1" get="inline" set="null" line="62" static="1"><f a="angle">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></yRotate>
		<zRotate public="1" get="inline" set="null" line="67" static="1"><f a="angle">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></zRotate>
		<xPIhalf public="1" get="inline" set="null" line="72" static="1"><f a=""><x path="geom.matrix.Quaternion"/></f></xPIhalf>
		<yPIhalf public="1" get="inline" set="null" line="77" static="1"><f a=""><x path="geom.matrix.Quaternion"/></f></yPIhalf>
		<zPIhalf public="1" get="inline" set="null" line="82" static="1"><f a=""><x path="geom.matrix.Quaternion"/></f></zPIhalf>
		<createFromAxisAngle public="1" get="inline" set="null" line="89" static="1"><f a="x:y:z:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></createFromAxisAngle>
		<dot public="1" get="inline" set="null" line="104" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</dot>
		<identity public="1" get="inline" set="null" line="126" static="1">
			<f a="out">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.identity( Quaternion.zero() ) == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</identity>
		<toMatrix4x1 public="1" get="inline" set="null" line="134" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toMatrix4x1>
		<copy public="1" get="inline" set="null" line="147" static="1">
			<f a="pin:pout">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Quaternion.zero();
     * ... var c = Quaternion.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
		</copy>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</magnitude>
		<get_magnitude get="inline" set="null" line="156" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_magnitude>
		<set_magnitude get="inline" set="null" line="160" static="1">
			<f a="this:length">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_magnitude>
		<dotProduct public="1" get="inline" set="null" line="174" static="1"><f a="a:b">
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Quaternion"/>
	<x path="Float"/>
</f></dotProduct>
		<equal public="1" get="inline" set="null" line="186" static="1">
			<f a="a:b">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<magnitudeSquared public="1" get="inline" set="null" line="209" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</magnitudeSquared>
		<add public="1" get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... a + a == new Quaternion({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... a - a == Quaternion.zero(); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<scaleMultiply public="1" get="inline" set="null" line="237" static="1">
			<f a="a:v">
				<x path="geom.matrix.Quaternion"/>
				<x path="Float"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</scaleMultiply>
		<divide public="1" get="inline" set="null" line="241" static="1">
			<f a="a:v">
				<x path="geom.matrix.Quaternion"/>
				<x path="Float"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<divide2 public="1" get="inline" set="null" line="245" static="1">
			<f a="v:a">
				<x path="Float"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide2>
		<conjugate public="1" get="inline" set="null" line="257" static="1">
			<f a="a">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<negate public="1" get="inline" set="null" line="273" static="1">
			<f a="a">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<multiplyQ public="1" get="inline" set="null" line="281" static="1">
			<f a="q1:q2">
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyQ>
		<cross public="1" get="inline" set="null" line="288" static="1">
			<f a="this:v">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cross>
		<fromYawPitchRoll public="1" get="inline" set="null" line="301" static="1">
			<f a="yaw:pitch:roll">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<haxe_doc>* used to set yaw pitch and roll ( very similar to set euler ) but static.
     *     x:  Pitch
     *     y:  Yaw
     *     z:  Roll</haxe_doc>
		</fromYawPitchRoll>
		<fromAxisAngle public="1" get="inline" set="null" line="319" static="1"><f a="theta:axis">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Quaternion"/>
</f></fromAxisAngle>
		<lerp public="1" get="inline" set="null" line="326" static="1"><f a="a:b:t">
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Quaternion"/>
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></lerp>
		<euler public="1" get="accessor" set="accessor" static="1">
			<x path="geom.matrix.Quaternion"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* input/output euler as rotation angles around x, y, z axis ( as faux Quaternion ), 
     * but set /gets internally as the Quaternion value</haxe_doc>
		</euler>
		<set_euler get="inline" set="null" line="337" static="1">
			<f a="this:a">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_euler>
		<get_euler get="inline" set="null" line="354" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_euler>
		<slerp public="1" set="method" line="364" static="1">
			<f a="this:v1:t">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Quaternion"/>
				<x path="Float"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</slerp>
		<scalarReal public="1" get="inline" set="null" line="407" static="1"><f a="s">
	<x path="Float"/>
	<x path="geom.matrix.Quaternion"/>
</f></scalarReal>
		<scaled public="1" get="inline" set="null" line="412" static="1">
			<f a="this:s">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaled>
		<normalize public="1" get="inline" set="null" line="417" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</normalize>
		<fromVec public="1" get="inline" set="null" line="434" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Quaternion = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="448" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<fromArray public="1" get="inline" set="null" line="465" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.matrix.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: Quaternion = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromArray>
		<toArray public="1" get="inline" set="null" line="477" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
		</toArray>
		<toMatrix4x3 public="1" get="inline" set="null" line="483" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.matrix.Matrix4x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toMatrix4x3>
	</class>
	<class path="geom.move.Axis2" params="" file="src/geom/move/Axis2.hx">
		<rxy expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</rxy>
		<sx expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</sx>
		<sy expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</sy>
		<shearx expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</shearx>
		<sheary expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</sheary>
		<tx expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</tx>
		<ty expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</ty>
		<reset public="1" get="inline" set="null" line="17"><f a=""><x path="Void"/></f></reset>
		<spin public="1" get="inline" set="null" line="27"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></spin>
		<alongX public="1" get="inline" set="null" line="31"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></alongX>
		<alongY public="1" get="inline" set="null" line="35"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></alongY>
		<resizeX public="1" get="inline" set="null" line="39"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></resizeX>
		<resizeY public="1" get="inline" set="null" line="43"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></resizeY>
		<shearX public="1" get="inline" set="null" line="47"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></shearX>
		<shearY public="1" get="inline" set="null" line="51"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></shearY>
		<updateCalculateMatrix3x3 public="1" set="method" line="56"><f a="m">
	<x path="geom.matrix.Matrix3x3"/>
	<x path="geom.matrix.Matrix3x3"/>
</f></updateCalculateMatrix3x3>
		<updateCalculateQuaternion public="1" set="method" line="77"><f a="q">
	<x path="geom.matrix.DualQuaternion"/>
	<x path="geom.matrix.DualQuaternion"/>
</f></updateCalculateQuaternion>
		<rotationChanged public="1" get="inline" set="null" line="95"><f a=""><x path="Bool"/></f></rotationChanged>
		<translationChanged public="1" get="inline" set="null" line="99"><f a=""><x path="Bool"/></f></translationChanged>
		<shearChanged public="1" get="inline" set="null" line="103"><f a=""><x path="Bool"/></f></shearChanged>
		<resizeChanged public="1" get="inline" set="null" line="107"><f a=""><x path="Bool"/></f></resizeChanged>
		<new public="1" set="method" line="55"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="geom.move.Axis3" params="" file="src/geom/move/Axis3.hx">
		<rx expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</rx>
		<ry expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</ry>
		<rz expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</rz>
		<tx expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</tx>
		<ty expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</ty>
		<tz expr="new Parameter()">
			<c path="geom.move.Parameter"/>
			<meta><m n=":value"><e>new Parameter()</e></m></meta>
		</tz>
		<reset public="1" get="inline" set="null" line="14"><f a=""><x path="Void"/></f></reset>
		<pitch public="1" get="inline" set="null" line="23"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></pitch>
		<yaw public="1" get="inline" set="null" line="27"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></yaw>
		<roll public="1" get="inline" set="null" line="31"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></roll>
		<alongX public="1" get="inline" set="null" line="35"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></alongX>
		<alongY public="1" get="inline" set="null" line="39"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></alongY>
		<alongZ public="1" get="inline" set="null" line="43"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></alongZ>
		<updateCalculate public="1" set="method" line="48"><f a="q">
	<x path="geom.matrix.DualQuaternion"/>
	<x path="geom.matrix.DualQuaternion"/>
</f></updateCalculate>
		<rotationChanged public="1" get="inline" set="null" line="65"><f a=""><x path="Bool"/></f></rotationChanged>
		<translationChanged public="1" get="inline" set="null" line="69"><f a=""><x path="Bool"/></f></translationChanged>
		<new public="1" set="method" line="47"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="geom.move.Parameter" params="" file="src/geom/move/Parameter.hx">
		<step public="1" expr="0.005">
			<x path="Float"/>
			<meta><m n=":value"><e>0.005</e></m></meta>
		</step>
		<value public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</value>
		<trinary public="1" expr="new Trinary(0.)">
			<c path="geom.move.Trinary"/>
			<meta><m n=":value"><e>new Trinary(0.)</e></m></meta>
		</trinary>
		<update public="1" get="inline" set="null" line="10"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="geom.move.Trit" params="" file="src/geom/move/Trinary.hx" module="geom.move.Trinary">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Float"/></this>
		<to><icast><x path="Float"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="geom.move._Trinary.Trit_Impl_" params="" file="src/geom/move/Trinary.hx" private="1" module="geom.move.Trinary" extern="1">
	<negative public="1" get="inline" set="null" expr="cast -1." line="4" static="1">
		<x path="geom.move.Trit"/>
		<meta>
			<m n=":value"><e>cast -1.</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</negative>
	<zero public="1" get="inline" set="null" expr="cast 0." line="5" static="1">
		<x path="geom.move.Trit"/>
		<meta>
			<m n=":value"><e>cast 0.</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</zero>
	<positive public="1" get="inline" set="null" expr="cast 1." line="6" static="1">
		<x path="geom.move.Trit"/>
		<meta>
			<m n=":value"><e>cast 1.</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</positive>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="geom.move._Trinary.Trit_Impl_" params="" file="src/geom/move/Trinary.hx" private="1" module="geom.move.Trinary" extern="1">
		<negative public="1" get="inline" set="null" expr="cast -1." line="4" static="1">
			<x path="geom.move.Trit"/>
			<meta>
				<m n=":value"><e>cast -1.</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</negative>
		<zero public="1" get="inline" set="null" expr="cast 0." line="5" static="1">
			<x path="geom.move.Trit"/>
			<meta>
				<m n=":value"><e>cast 0.</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</zero>
		<positive public="1" get="inline" set="null" expr="cast 1." line="6" static="1">
			<x path="geom.move.Trit"/>
			<meta>
				<m n=":value"><e>cast 1.</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</positive>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="geom.move.Trinary" params="" file="src/geom/move/Trinary.hx">
		<changed public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</changed>
		<trit public="1" get="accessor" set="accessor">
			<x path="geom.move.Trit"/>
			<meta><m n=":isVar"/></meta>
		</trit>
		<set_trit set="method" line="17"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="geom.move.Trit"/>
</f></set_trit>
		<get_trit set="method" line="26"><f a=""><x path="geom.move.Trit"/></f></get_trit>
		<increment set="method" line="32">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* allows you to toggle forward in states.</haxe_doc>
		</increment>
		<decrement set="method" line="45">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* allows you to toggle backwards in states.</haxe_doc>
		</decrement>
		<new public="1" set="method" line="13"><f a="v">
	<x path="geom.move.Trit"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Like boolean but 3 state with a changed variable so updates are only done when required.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="geom.obj.Quad2D" params="" file="src/geom/obj/Quad2D.hx">
		<A public="1"><x path="geom.matrix.Matrix1x2"/></A>
		<B public="1"><x path="geom.matrix.Matrix1x2"/></B>
		<C public="1"><x path="geom.matrix.Matrix1x2"/></C>
		<D public="1"><x path="geom.matrix.Matrix1x2"/></D>
		<new set="method" line="9"><f a="A:B:C:D">
	<x path="geom.matrix.Matrix1x2"/>
	<x path="geom.matrix.Matrix1x2"/>
	<x path="geom.matrix.Matrix1x2"/>
	<x path="geom.matrix.Matrix1x2"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="geom.obj.Quad3D" params="" file="src/geom/obj/Quad3D.hx">
		<A public="1"><x path="geom.matrix.Matrix1x4"/></A>
		<B public="1"><x path="geom.matrix.Matrix1x4"/></B>
		<C public="1"><x path="geom.matrix.Matrix1x4"/></C>
		<D public="1"><x path="geom.matrix.Matrix1x4"/></D>
		<new set="method" line="9"><f a="A:B:C:D">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="geom.obj.Tri" params="" file="src/geom/obj/Tri.hx">
		<sign public="1" get="inline" set="null" line="77" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<windingAdjusted public="1"><x path="Bool"/></windingAdjusted>
		<ax public="1"><x path="Float"/></ax>
		<bx public="1"><x path="Float"/></bx>
		<cx public="1"><x path="Float"/></cx>
		<ay public="1"><x path="Float"/></ay>
		<by public="1"><x path="Float"/></by>
		<cy public="1"><x path="Float"/></cy>
		<x public="1" get="accessor" set="accessor"><x path="Float"/></x>
		<get_x set="method" line="16"><f a=""><x path="Float"/></f></get_x>
		<set_x set="method" line="19"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor"><x path="Float"/></y>
		<get_y set="method" line="27"><f a=""><x path="Float"/></f></get_y>
		<set_y set="method" line="30"><f a="y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<right public="1" get="accessor" set="null"><x path="Float"/></right>
		<get_right public="1" set="method" line="38"><f a=""><x path="Float"/></f></get_right>
		<bottom public="1" get="accessor" set="null"><x path="Float"/></bottom>
		<get_bottom public="1" set="method" line="42"><f a=""><x path="Float"/></f></get_bottom>
		<moveDelta set="method" line="45"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<liteHit public="1" get="inline" set="null" line="71"><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="82"><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<adjustWinding public="1" set="method" line="86"><f a=""><x path="Bool"/></f></adjustWinding>
		<rotate public="1" get="inline" set="null" line="89"><f a="x:y:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="95"><f a="x:y:cos:sin">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<new public="1" set="method" line="53"><f a="ax_:ay_:bx_:by_:cx_:cy_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>based on trilateral.tri.Trilateral.

   ![tri](../bootstrap/img/triangle.png)</haxe_doc>
	</class>
	<abstract path="geom.obj.Tri3D" params="" file="src/geom/obj/Tri3D.hx">
		<from><icast><c path="geom.structure.TriVec"/></icast></from>
		<this><c path="geom.structure.TriVec"/></this>
		<to><icast><c path="geom.structure.TriVec"/></icast></to>
		<haxe_doc>![triVec](../bootstrap/img/tri3D.png)</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom.obj._Tri3D.Tri3D_Impl_" params="" file="src/geom/obj/Tri3D.hx" private="1" module="geom.obj.Tri3D">
	<_new public="1" set="method" line="8" static="1">
		<f a="tv">
			<c path="geom.structure.TriVec"/>
			<x path="geom.obj.Tri3D"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<add0 public="1" get="inline" set="null" line="9" static="1">
		<f a="tv:p">
			<x path="geom.obj.Tri3D"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.obj.Tri3D"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add0>
	<add1 public="1" get="inline" set="null" line="13" static="1">
		<f a="p:tv">
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.obj.Tri3D"/>
			<x path="geom.obj.Tri3D"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add1>
	<sub public="1" get="inline" set="null" line="17" static="1">
		<f a="tv:p">
			<x path="geom.obj.Tri3D"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.obj.Tri3D"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<scaleMultiply public="1" get="inline" set="null" line="21" static="1">
		<f a="tv:p">
			<x path="geom.obj.Tri3D"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.obj.Tri3D"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply>
	<centre public="1" get="inline" set="null" line="25" static="1">
		<f a="this">
			<c path="geom.structure.TriVec"/>
			<x path="geom.matrix.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</centre>
	<multiplyQ public="1" get="inline" set="null" line="31" static="1">
		<f a="this:q">
			<c path="geom.structure.TriVec"/>
			<x path="geom.matrix.Matrix1x4"/>
			<x path="geom.obj.Tri3D"/>
		</f>
		<meta><m n=":impl"/></meta>
	</multiplyQ>
</class></impl>
	</abstract>
	<class path="geom.obj._Tri3D.Tri3D_Impl_" params="" file="src/geom/obj/Tri3D.hx" private="1" module="geom.obj.Tri3D">
		<_new public="1" set="method" line="8" static="1">
			<f a="tv">
				<c path="geom.structure.TriVec"/>
				<x path="geom.obj.Tri3D"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<add0 public="1" get="inline" set="null" line="9" static="1">
			<f a="tv:p">
				<x path="geom.obj.Tri3D"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.obj.Tri3D"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add0>
		<add1 public="1" get="inline" set="null" line="13" static="1">
			<f a="p:tv">
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.obj.Tri3D"/>
				<x path="geom.obj.Tri3D"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add1>
		<sub public="1" get="inline" set="null" line="17" static="1">
			<f a="tv:p">
				<x path="geom.obj.Tri3D"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.obj.Tri3D"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<scaleMultiply public="1" get="inline" set="null" line="21" static="1">
			<f a="tv:p">
				<x path="geom.obj.Tri3D"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.obj.Tri3D"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply>
		<centre public="1" get="inline" set="null" line="25" static="1">
			<f a="this">
				<c path="geom.structure.TriVec"/>
				<x path="geom.matrix.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</centre>
		<multiplyQ public="1" get="inline" set="null" line="31" static="1">
			<f a="this:q">
				<c path="geom.structure.TriVec"/>
				<x path="geom.matrix.Matrix1x4"/>
				<x path="geom.obj.Tri3D"/>
			</f>
			<meta><m n=":impl"/></meta>
		</multiplyQ>
	</class>
	<class path="geom.structure.DualQ" params="" file="src/geom/structure/DualQ.hx">
		<real public="1"><x path="geom.matrix.Quaternion"/></real>
		<dual public="1"><x path="geom.matrix.Quaternion"/></dual>
		<new set="method" line="8"><f a="real:dual">
	<x path="geom.matrix.Quaternion"/>
	<x path="geom.matrix.Quaternion"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Edge" params="" file="src/geom/structure/Edge.hx">
		<dist public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</dist>
		<edge public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</edge>
		<point public="1"><x path="geom.matrix.Matrix1x4"/></point>
		<norm public="1"><x path="geom.matrix.Matrix1x4"/></norm>
		<new set="method" line="12"><f a="dist:edge:point:norm">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ dist, edge, point, norm }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="geom.structure.Mat1x2" params="" file="src/geom/structure/Mat1x2.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<new set="method" line="9"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ x, y }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat1x4" params="" file="src/geom/structure/Mat1x4.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<new set="method" line="11">
			<f a="x:y:z:?w" v=":::1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<haxe_doc>{ x, y, z, w }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat2x2" params="" file="src/geom/structure/Mat2x2.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<new set="method" line="9"><f a="a:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![2x2](../../bootstrap/img/matrix2x2.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat3x3" params="" file="src/geom/structure/Mat3x3.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<new set="method" line="10"><f a="a:b:c:d:e:f:g:h:i">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![3x3](../../bootstrap/img/matrix3x3.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat4x3" params="" file="src/geom/structure/Mat4x3.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<new set="method" line="10"><f a="a:b:c:d:e:f:g:h:i:j:k:l">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![4x3](../../bootstrap/img/matrix4x3.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat4x4" params="" file="src/geom/structure/Mat4x4.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<m public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</m>
		<n public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</n>
		<o public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</o>
		<p public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</p>
		<new set="method" line="11"><f a="a:b:c:d:e:f:g:h:i:j:k:l:m:n:o:p">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![4x4](../../bootstrap/img/matrix4x4.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Range" params="" file="src/geom/structure/Range.hx">
		<u public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</u>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<new set="method" line="9"><f a="u:l">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ u, l }</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Ray" params="" file="src/geom/structure/Ray.hx">
		<dist public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</dist>
		<edge public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</edge>
		<norm public="1"><x path="geom.matrix.Matrix1x4"/></norm>
		<refl public="1"><x path="geom.matrix.Matrix1x4"/></refl>
		<new set="method" line="12"><f a="dist:edge:norm:refl">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>{ dist, edge, norm, refl }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="geom.structure.TriVec" params="" file="src/geom/structure/TriVec.hx">
		<a public="1"><x path="geom.matrix.Matrix1x4"/></a>
		<b public="1"><x path="geom.matrix.Matrix1x4"/></b>
		<c public="1"><x path="geom.matrix.Matrix1x4"/></c>
		<new set="method" line="11"><f a="a:b:c">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Matrix1x4"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>![triVec](../../bootstrap/img/tri3D.png)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Vertex" params="" file="src/geom/structure/Vertex.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<u public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</u>
		<v public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</v>
		<new set="method" line="13">
			<f a="x:y:z:?w:u:v" v=":::1.::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<haxe_doc>{ x, y, z, w, u, v }</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="geom.systemL.LNode" params="" file="src/geom/systemL/LNode.hx">
		<pos public="1"><x path="geom.matrix.Matrix1x2"/></pos>
		<angle public="1"><x path="Float"/></angle>
		<transform public="1" get="inline" set="null" line="14"><f a="distance">
	<x path="Float"/>
	<c path="geom.systemL.LNode"/>
</f></transform>
		<clone public="1" get="inline" set="null" line="21"><f a=""><c path="geom.systemL.LNode"/></f></clone>
		<addAngle public="1" get="inline" set="null" line="25"><f a="q">
	<x path="Float"/>
	<x path="Void"/>
</f></addAngle>
		<Deg2Rad get="inline" set="null" line="29"><f a="degrees">
	<x path="Float"/>
	<x path="Float"/>
</f></Deg2Rad>
		<new public="1" set="method" line="10"><f a="pos_:angle_">
	<x path="geom.matrix.Matrix1x2"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Basic LSystem node</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<class path="geom.systemL.LNode3D" params="" file="src/geom/systemL/LNode3D.hx">
		<dualQ public="1"><x path="geom.matrix.DualQuaternion"/></dualQ>
		<transform public="1" get="inline" set="null" line="18"><f a="distance">
	<x path="Float"/>
	<c path="geom.systemL.LNode3D"/>
</f></transform>
		<clone public="1" get="inline" set="null" line="25"><f a=""><c path="geom.systemL.LNode3D"/></f></clone>
		<addAngle public="1" get="inline" set="null" line="32"><f a="q">
	<x path="geom.matrix.Quaternion"/>
	<x path="Void"/>
</f></addAngle>
		<new public="1" set="method" line="13"><f a="pos:angle">
	<x path="geom.matrix.Matrix1x4"/>
	<x path="geom.matrix.Quaternion"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>3D LSystem node</haxe_doc>
		<meta><m n=":structInit"/></meta>
	</class>
	<typedef path="geom.tydef.TAffineMatrix" params="" file="src/geom/tydef/TAffineMatrix.hx">
		<a>
			<e9><x path="Float"/></e9>
			<e8><x path="Float"/></e8>
			<e6><x path="Float"/></e6>
			<e5><x path="Float"/></e5>
			<e4><x path="Float"/></e4>
			<e2><x path="Float"/></e2>
			<e14><x path="Float"/></e14>
			<e13><x path="Float"/></e13>
			<e12><x path="Float"/></e12>
			<e10><x path="Float"/></e10>
			<e1><x path="Float"/></e1>
			<e0><x path="Float"/></e0>
		</a>
		<haxe_doc>![affineMatrix](../../bootstrap/img/affineMatrix.png)</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.TTriVec" params="" file="src/geom/tydef/TTriVec.hx">
		<a>
			<c><x path="geom.matrix.Matrix1x4"/></c>
			<b><x path="geom.matrix.Matrix1x4"/></b>
			<a><x path="geom.matrix.Matrix1x4"/></a>
		</a>
		<haxe_doc>triangle corners a,b,c with coordinates x, y, z, w.
   
   { a, b, c }</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.Tmatrix1x3" params="" file="src/geom/tydef/Tmatrix1x3.hx">
		<a>
			<z><x path="Float"/></z>
			<y><x path="Float"/></y>
			<x><x path="Float"/></x>
		</a>
		<haxe_doc>{ x, y, z }</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.Tmatrix2x2" params="" file="src/geom/tydef/Tmatrix2x2.hx">
		<a>
			<d><x path="Float"/></d>
			<c><x path="Float"/></c>
			<b><x path="Float"/></b>
			<a><x path="Float"/></a>
		</a>
		<haxe_doc>![2x2](../../bootstrap/img/matrix2x2.png)</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.Tmatrix2x2numbered" params="" file="src/geom/tydef/Tmatrix2x2numbered.hx">
		<a>
			<_11><x path="Float"/></_11>
			<_10><x path="Float"/></_10>
			<_01><x path="Float"/></_01>
			<_00><x path="Float"/></_00>
		</a>
		<haxe_doc>![2x2](../../bootstrap/img/matrix2x2numbered.png)</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.Tmatrix3x3" params="" file="src/geom/tydef/Tmatrix3x3.hx">
		<a>
			<i><x path="Float"/></i>
			<h><x path="Float"/></h>
			<g><x path="Float"/></g>
			<f><x path="Float"/></f>
			<e><x path="Float"/></e>
			<d><x path="Float"/></d>
			<c><x path="Float"/></c>
			<b><x path="Float"/></b>
			<a><x path="Float"/></a>
		</a>
		<haxe_doc>![3x3](../../bootstrap/img/matrix3x3.png)</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.Tmatrix3x3numbered" params="" file="src/geom/tydef/Tmatrix3x3numbered.hx">
		<a>
			<_22><x path="Float"/></_22>
			<_21><x path="Float"/></_21>
			<_20><x path="Float"/></_20>
			<_12><x path="Float"/></_12>
			<_11><x path="Float"/></_11>
			<_10><x path="Float"/></_10>
			<_02><x path="Float"/></_02>
			<_01><x path="Float"/></_01>
			<_00><x path="Float"/></_00>
		</a>
		<haxe_doc>![2x2](../../bootstrap/img/matrix3x3numbered.png)</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.Tmatrix4x3" params="" file="src/geom/tydef/Tmatrix4x3.hx">
		<a>
			<l><x path="Float"/></l>
			<k><x path="Float"/></k>
			<j><x path="Float"/></j>
			<i><x path="Float"/></i>
			<h><x path="Float"/></h>
			<g><x path="Float"/></g>
			<f><x path="Float"/></f>
			<e><x path="Float"/></e>
			<d><x path="Float"/></d>
			<c><x path="Float"/></c>
			<b><x path="Float"/></b>
			<a><x path="Float"/></a>
		</a>
		<haxe_doc>![4x3](../../bootstrap/img/matrix4x3.png)</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.Tmatrix4x4numbered" params="" file="src/geom/tydef/Tmatrix4x4numbered.hx">
		<a>
			<_33><x path="Float"/></_33>
			<_32><x path="Float"/></_32>
			<_31><x path="Float"/></_31>
			<_30><x path="Float"/></_30>
			<_23><x path="Float"/></_23>
			<_22><x path="Float"/></_22>
			<_21><x path="Float"/></_21>
			<_20><x path="Float"/></_20>
			<_13><x path="Float"/></_13>
			<_12><x path="Float"/></_12>
			<_11><x path="Float"/></_11>
			<_10><x path="Float"/></_10>
			<_03><x path="Float"/></_03>
			<_02><x path="Float"/></_02>
			<_01><x path="Float"/></_01>
			<_00><x path="Float"/></_00>
		</a>
		<haxe_doc>![2x2](../../bootstrap/img/matrix4x4numbered.png)</haxe_doc>
	</typedef>
	<typedef path="geom.tydef.Tpoint" params="" file="src/geom/tydef/Tpoint.hx">
		<a>
			<y><x path="Float"/></y>
			<x><x path="Float"/></x>
		</a>
		<haxe_doc>{ x, y }</haxe_doc>
	</typedef>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/local/lib/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.lib.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Bytes.hx"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/local/lib/haxe/std/haxe/io/BytesData.hx"><c path="js.lib.ArrayBuffer"/></typedef>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><c path="js.lib.Float32Array"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<meta>
		<m n=":keep"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><c path="js.lib.Int32Array"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<meta>
		<m n=":keep"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><c path="js.lib.Uint16Array"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/usr/local/lib/haxe/std/js/_std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<meta>
		<m n=":keep"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.lib.Error" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.Object" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<class path="js._Boot.HaxeError" params="" file="/usr/local/lib/haxe/std/js/Boot.hx" private="1" module="js.Boot">
		<extends path="js.lib.Error"/>
		<val><d/></val>
		<new public="1" set="method" line="31"><f a="val">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="js.Boot" params="" file="/usr/local/lib/haxe/std/js/Boot.hx">
		<__string_rec set="method" line="78" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<_hx_index set="null"><x path="Int"/></_hx_index>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.lib.ArrayBuffer" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.lib.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="js.lib.DataView" params="" file="/usr/local/lib/haxe/std/js/lib/DataView.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"DataView"</e></m></meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Float32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/usr/local/lib/haxe/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Int32Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" private="1" module="js.lib.Object">
	<key public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
	</key>
	<value public="1" get="accessor" set="null" static="1">
		<x path="Any"/>
		<meta><m n=":impl"/></meta>
	</value>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.RegExpMatch" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1"><x path="Int"/></index>
		<input public="1"><c path="String"/></input>
	</class>
	<class path="js.lib.Symbol" params="" file="/usr/local/lib/haxe/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="61">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Uint16Array"</e></m>
		</meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<t path="js.lib.intl.NumberFormatOptions"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/usr/local/lib/haxe/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
</haxe>